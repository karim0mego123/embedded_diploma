
drivers.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000eac  08000130  08000130  00010130  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000fdc  08000fdc  00010fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000fe8  08000fe8  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000fe8  08000fe8  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000fe8  08000fe8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000fe8  08000fe8  00010fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000fec  08000fec  00010fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000ff0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000004  08000ff4  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  08000ff4  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006b0f  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000f5b  00000000  00000000  00026b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001eb4  00000000  00000000  00027a97  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000400  00000000  00000000  00029950  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000388  00000000  00000000  00029d50  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001053  00000000  00000000  0002a0d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000038c5  00000000  00000000  0002b12b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00012d3c  00000000  00000000  0002e9f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0004172c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000edc  00000000  00000000  000417a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	08000fc4 	.word	0x08000fc4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	08000fc4 	.word	0x08000fc4

08000170 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b088      	sub	sp, #32
 8000174:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8000176:	2300      	movs	r3, #0
 8000178:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800017a:	4b75      	ldr	r3, [pc, #468]	; (8000350 <xTaskIncrementTick+0x1e0>)
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	2b00      	cmp	r3, #0
 8000180:	f040 80dc 	bne.w	800033c <xTaskIncrementTick+0x1cc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000184:	4b73      	ldr	r3, [pc, #460]	; (8000354 <xTaskIncrementTick+0x1e4>)
 8000186:	681b      	ldr	r3, [r3, #0]
 8000188:	3301      	adds	r3, #1
 800018a:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800018c:	4a71      	ldr	r2, [pc, #452]	; (8000354 <xTaskIncrementTick+0x1e4>)
 800018e:	69bb      	ldr	r3, [r7, #24]
 8000190:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8000192:	69bb      	ldr	r3, [r7, #24]
 8000194:	2b00      	cmp	r3, #0
 8000196:	d110      	bne.n	80001ba <xTaskIncrementTick+0x4a>
        {
            taskSWITCH_DELAYED_LISTS();
 8000198:	4b6f      	ldr	r3, [pc, #444]	; (8000358 <xTaskIncrementTick+0x1e8>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	617b      	str	r3, [r7, #20]
 800019e:	4b6f      	ldr	r3, [pc, #444]	; (800035c <xTaskIncrementTick+0x1ec>)
 80001a0:	681b      	ldr	r3, [r3, #0]
 80001a2:	4a6d      	ldr	r2, [pc, #436]	; (8000358 <xTaskIncrementTick+0x1e8>)
 80001a4:	6013      	str	r3, [r2, #0]
 80001a6:	4a6d      	ldr	r2, [pc, #436]	; (800035c <xTaskIncrementTick+0x1ec>)
 80001a8:	697b      	ldr	r3, [r7, #20]
 80001aa:	6013      	str	r3, [r2, #0]
 80001ac:	4b6c      	ldr	r3, [pc, #432]	; (8000360 <xTaskIncrementTick+0x1f0>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	3301      	adds	r3, #1
 80001b2:	4a6b      	ldr	r2, [pc, #428]	; (8000360 <xTaskIncrementTick+0x1f0>)
 80001b4:	6013      	str	r3, [r2, #0]
 80001b6:	f000 f927 	bl	8000408 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80001ba:	4b6a      	ldr	r3, [pc, #424]	; (8000364 <xTaskIncrementTick+0x1f4>)
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	69ba      	ldr	r2, [r7, #24]
 80001c0:	429a      	cmp	r2, r3
 80001c2:	f0c0 80a6 	bcc.w	8000312 <xTaskIncrementTick+0x1a2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80001c6:	4b64      	ldr	r3, [pc, #400]	; (8000358 <xTaskIncrementTick+0x1e8>)
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d104      	bne.n	80001da <xTaskIncrementTick+0x6a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80001d0:	4b64      	ldr	r3, [pc, #400]	; (8000364 <xTaskIncrementTick+0x1f4>)
 80001d2:	f04f 32ff 	mov.w	r2, #4294967295
 80001d6:	601a      	str	r2, [r3, #0]
                    break;
 80001d8:	e09b      	b.n	8000312 <xTaskIncrementTick+0x1a2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80001da:	4b5f      	ldr	r3, [pc, #380]	; (8000358 <xTaskIncrementTick+0x1e8>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	68db      	ldr	r3, [r3, #12]
 80001e0:	68db      	ldr	r3, [r3, #12]
 80001e2:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80001e4:	693b      	ldr	r3, [r7, #16]
 80001e6:	685b      	ldr	r3, [r3, #4]
 80001e8:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 80001ea:	69ba      	ldr	r2, [r7, #24]
 80001ec:	68fb      	ldr	r3, [r7, #12]
 80001ee:	429a      	cmp	r2, r3
 80001f0:	d203      	bcs.n	80001fa <xTaskIncrementTick+0x8a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80001f2:	4a5c      	ldr	r2, [pc, #368]	; (8000364 <xTaskIncrementTick+0x1f4>)
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80001f8:	e08b      	b.n	8000312 <xTaskIncrementTick+0x1a2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80001fa:	693b      	ldr	r3, [r7, #16]
 80001fc:	695b      	ldr	r3, [r3, #20]
 80001fe:	60bb      	str	r3, [r7, #8]
 8000200:	693b      	ldr	r3, [r7, #16]
 8000202:	689b      	ldr	r3, [r3, #8]
 8000204:	693a      	ldr	r2, [r7, #16]
 8000206:	68d2      	ldr	r2, [r2, #12]
 8000208:	609a      	str	r2, [r3, #8]
 800020a:	693b      	ldr	r3, [r7, #16]
 800020c:	68db      	ldr	r3, [r3, #12]
 800020e:	693a      	ldr	r2, [r7, #16]
 8000210:	6892      	ldr	r2, [r2, #8]
 8000212:	605a      	str	r2, [r3, #4]
 8000214:	68bb      	ldr	r3, [r7, #8]
 8000216:	685a      	ldr	r2, [r3, #4]
 8000218:	693b      	ldr	r3, [r7, #16]
 800021a:	3304      	adds	r3, #4
 800021c:	429a      	cmp	r2, r3
 800021e:	d103      	bne.n	8000228 <xTaskIncrementTick+0xb8>
 8000220:	693b      	ldr	r3, [r7, #16]
 8000222:	68da      	ldr	r2, [r3, #12]
 8000224:	68bb      	ldr	r3, [r7, #8]
 8000226:	605a      	str	r2, [r3, #4]
 8000228:	693b      	ldr	r3, [r7, #16]
 800022a:	2200      	movs	r2, #0
 800022c:	615a      	str	r2, [r3, #20]
 800022e:	68bb      	ldr	r3, [r7, #8]
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	1e5a      	subs	r2, r3, #1
 8000234:	68bb      	ldr	r3, [r7, #8]
 8000236:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000238:	693b      	ldr	r3, [r7, #16]
 800023a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800023c:	2b00      	cmp	r3, #0
 800023e:	d01e      	beq.n	800027e <xTaskIncrementTick+0x10e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000240:	693b      	ldr	r3, [r7, #16]
 8000242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000244:	607b      	str	r3, [r7, #4]
 8000246:	693b      	ldr	r3, [r7, #16]
 8000248:	69db      	ldr	r3, [r3, #28]
 800024a:	693a      	ldr	r2, [r7, #16]
 800024c:	6a12      	ldr	r2, [r2, #32]
 800024e:	609a      	str	r2, [r3, #8]
 8000250:	693b      	ldr	r3, [r7, #16]
 8000252:	6a1b      	ldr	r3, [r3, #32]
 8000254:	693a      	ldr	r2, [r7, #16]
 8000256:	69d2      	ldr	r2, [r2, #28]
 8000258:	605a      	str	r2, [r3, #4]
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	685a      	ldr	r2, [r3, #4]
 800025e:	693b      	ldr	r3, [r7, #16]
 8000260:	3318      	adds	r3, #24
 8000262:	429a      	cmp	r2, r3
 8000264:	d103      	bne.n	800026e <xTaskIncrementTick+0xfe>
 8000266:	693b      	ldr	r3, [r7, #16]
 8000268:	6a1a      	ldr	r2, [r3, #32]
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	605a      	str	r2, [r3, #4]
 800026e:	693b      	ldr	r3, [r7, #16]
 8000270:	2200      	movs	r2, #0
 8000272:	629a      	str	r2, [r3, #40]	; 0x28
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	1e5a      	subs	r2, r3, #1
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800027e:	693b      	ldr	r3, [r7, #16]
 8000280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000282:	2201      	movs	r2, #1
 8000284:	409a      	lsls	r2, r3
 8000286:	4b38      	ldr	r3, [pc, #224]	; (8000368 <xTaskIncrementTick+0x1f8>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	4313      	orrs	r3, r2
 800028c:	4a36      	ldr	r2, [pc, #216]	; (8000368 <xTaskIncrementTick+0x1f8>)
 800028e:	6013      	str	r3, [r2, #0]
 8000290:	693b      	ldr	r3, [r7, #16]
 8000292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000294:	4935      	ldr	r1, [pc, #212]	; (800036c <xTaskIncrementTick+0x1fc>)
 8000296:	4613      	mov	r3, r2
 8000298:	009b      	lsls	r3, r3, #2
 800029a:	4413      	add	r3, r2
 800029c:	009b      	lsls	r3, r3, #2
 800029e:	440b      	add	r3, r1
 80002a0:	3304      	adds	r3, #4
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	603b      	str	r3, [r7, #0]
 80002a6:	693b      	ldr	r3, [r7, #16]
 80002a8:	683a      	ldr	r2, [r7, #0]
 80002aa:	609a      	str	r2, [r3, #8]
 80002ac:	683b      	ldr	r3, [r7, #0]
 80002ae:	689a      	ldr	r2, [r3, #8]
 80002b0:	693b      	ldr	r3, [r7, #16]
 80002b2:	60da      	str	r2, [r3, #12]
 80002b4:	683b      	ldr	r3, [r7, #0]
 80002b6:	689b      	ldr	r3, [r3, #8]
 80002b8:	693a      	ldr	r2, [r7, #16]
 80002ba:	3204      	adds	r2, #4
 80002bc:	605a      	str	r2, [r3, #4]
 80002be:	693b      	ldr	r3, [r7, #16]
 80002c0:	1d1a      	adds	r2, r3, #4
 80002c2:	683b      	ldr	r3, [r7, #0]
 80002c4:	609a      	str	r2, [r3, #8]
 80002c6:	693b      	ldr	r3, [r7, #16]
 80002c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80002ca:	4613      	mov	r3, r2
 80002cc:	009b      	lsls	r3, r3, #2
 80002ce:	4413      	add	r3, r2
 80002d0:	009b      	lsls	r3, r3, #2
 80002d2:	4a26      	ldr	r2, [pc, #152]	; (800036c <xTaskIncrementTick+0x1fc>)
 80002d4:	441a      	add	r2, r3
 80002d6:	693b      	ldr	r3, [r7, #16]
 80002d8:	615a      	str	r2, [r3, #20]
 80002da:	693b      	ldr	r3, [r7, #16]
 80002dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80002de:	4923      	ldr	r1, [pc, #140]	; (800036c <xTaskIncrementTick+0x1fc>)
 80002e0:	4613      	mov	r3, r2
 80002e2:	009b      	lsls	r3, r3, #2
 80002e4:	4413      	add	r3, r2
 80002e6:	009b      	lsls	r3, r3, #2
 80002e8:	440b      	add	r3, r1
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	1c59      	adds	r1, r3, #1
 80002ee:	481f      	ldr	r0, [pc, #124]	; (800036c <xTaskIncrementTick+0x1fc>)
 80002f0:	4613      	mov	r3, r2
 80002f2:	009b      	lsls	r3, r3, #2
 80002f4:	4413      	add	r3, r2
 80002f6:	009b      	lsls	r3, r3, #2
 80002f8:	4403      	add	r3, r0
 80002fa:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80002fc:	693b      	ldr	r3, [r7, #16]
 80002fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000300:	4b1b      	ldr	r3, [pc, #108]	; (8000370 <xTaskIncrementTick+0x200>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000306:	429a      	cmp	r2, r3
 8000308:	f4ff af5d 	bcc.w	80001c6 <xTaskIncrementTick+0x56>
                            {
                                xSwitchRequired = pdTRUE;
 800030c:	2301      	movs	r3, #1
 800030e:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000310:	e759      	b.n	80001c6 <xTaskIncrementTick+0x56>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8000312:	4b17      	ldr	r3, [pc, #92]	; (8000370 <xTaskIncrementTick+0x200>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000318:	4914      	ldr	r1, [pc, #80]	; (800036c <xTaskIncrementTick+0x1fc>)
 800031a:	4613      	mov	r3, r2
 800031c:	009b      	lsls	r3, r3, #2
 800031e:	4413      	add	r3, r2
 8000320:	009b      	lsls	r3, r3, #2
 8000322:	440b      	add	r3, r1
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	2b01      	cmp	r3, #1
 8000328:	d901      	bls.n	800032e <xTaskIncrementTick+0x1be>
                {
                    xSwitchRequired = pdTRUE;
 800032a:	2301      	movs	r3, #1
 800032c:	61fb      	str	r3, [r7, #28]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800032e:	4b11      	ldr	r3, [pc, #68]	; (8000374 <xTaskIncrementTick+0x204>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	2b00      	cmp	r3, #0
 8000334:	d007      	beq.n	8000346 <xTaskIncrementTick+0x1d6>
                {
                    xSwitchRequired = pdTRUE;
 8000336:	2301      	movs	r3, #1
 8000338:	61fb      	str	r3, [r7, #28]
 800033a:	e004      	b.n	8000346 <xTaskIncrementTick+0x1d6>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800033c:	4b0e      	ldr	r3, [pc, #56]	; (8000378 <xTaskIncrementTick+0x208>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	3301      	adds	r3, #1
 8000342:	4a0d      	ldr	r2, [pc, #52]	; (8000378 <xTaskIncrementTick+0x208>)
 8000344:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8000346:	69fb      	ldr	r3, [r7, #28]
}
 8000348:	4618      	mov	r0, r3
 800034a:	3720      	adds	r7, #32
 800034c:	46bd      	mov	sp, r7
 800034e:	bd80      	pop	{r7, pc}
 8000350:	200000a8 	.word	0x200000a8
 8000354:	20000090 	.word	0x20000090
 8000358:	20000088 	.word	0x20000088
 800035c:	2000008c 	.word	0x2000008c
 8000360:	200000a0 	.word	0x200000a0
 8000364:	200000a4 	.word	0x200000a4
 8000368:	20000094 	.word	0x20000094
 800036c:	20000024 	.word	0x20000024
 8000370:	20000020 	.word	0x20000020
 8000374:	2000009c 	.word	0x2000009c
 8000378:	20000098 	.word	0x20000098

0800037c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800037c:	b480      	push	{r7}
 800037e:	b085      	sub	sp, #20
 8000380:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000382:	4b1c      	ldr	r3, [pc, #112]	; (80003f4 <vTaskSwitchContext+0x78>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	2b00      	cmp	r3, #0
 8000388:	d003      	beq.n	8000392 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800038a:	4b1b      	ldr	r3, [pc, #108]	; (80003f8 <vTaskSwitchContext+0x7c>)
 800038c:	2201      	movs	r2, #1
 800038e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8000390:	e02a      	b.n	80003e8 <vTaskSwitchContext+0x6c>
        xYieldPending = pdFALSE;
 8000392:	4b19      	ldr	r3, [pc, #100]	; (80003f8 <vTaskSwitchContext+0x7c>)
 8000394:	2200      	movs	r2, #0
 8000396:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000398:	4b18      	ldr	r3, [pc, #96]	; (80003fc <vTaskSwitchContext+0x80>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	607b      	str	r3, [r7, #4]
/* Generic helper function. */
        __attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
        {
            uint8_t ucReturn;

            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	fab3 f383 	clz	r3, r3
 80003a4:	70fb      	strb	r3, [r7, #3]

            return ucReturn;
 80003a6:	78fb      	ldrb	r3, [r7, #3]
 80003a8:	f1c3 031f 	rsb	r3, r3, #31
 80003ac:	60fb      	str	r3, [r7, #12]
 80003ae:	68fa      	ldr	r2, [r7, #12]
 80003b0:	4613      	mov	r3, r2
 80003b2:	009b      	lsls	r3, r3, #2
 80003b4:	4413      	add	r3, r2
 80003b6:	009b      	lsls	r3, r3, #2
 80003b8:	4a11      	ldr	r2, [pc, #68]	; (8000400 <vTaskSwitchContext+0x84>)
 80003ba:	4413      	add	r3, r2
 80003bc:	60bb      	str	r3, [r7, #8]
 80003be:	68bb      	ldr	r3, [r7, #8]
 80003c0:	685b      	ldr	r3, [r3, #4]
 80003c2:	685a      	ldr	r2, [r3, #4]
 80003c4:	68bb      	ldr	r3, [r7, #8]
 80003c6:	605a      	str	r2, [r3, #4]
 80003c8:	68bb      	ldr	r3, [r7, #8]
 80003ca:	685a      	ldr	r2, [r3, #4]
 80003cc:	68bb      	ldr	r3, [r7, #8]
 80003ce:	3308      	adds	r3, #8
 80003d0:	429a      	cmp	r2, r3
 80003d2:	d104      	bne.n	80003de <vTaskSwitchContext+0x62>
 80003d4:	68bb      	ldr	r3, [r7, #8]
 80003d6:	685b      	ldr	r3, [r3, #4]
 80003d8:	685a      	ldr	r2, [r3, #4]
 80003da:	68bb      	ldr	r3, [r7, #8]
 80003dc:	605a      	str	r2, [r3, #4]
 80003de:	68bb      	ldr	r3, [r7, #8]
 80003e0:	685b      	ldr	r3, [r3, #4]
 80003e2:	68db      	ldr	r3, [r3, #12]
 80003e4:	4a07      	ldr	r2, [pc, #28]	; (8000404 <vTaskSwitchContext+0x88>)
 80003e6:	6013      	str	r3, [r2, #0]
}
 80003e8:	bf00      	nop
 80003ea:	3714      	adds	r7, #20
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bc80      	pop	{r7}
 80003f0:	4770      	bx	lr
 80003f2:	bf00      	nop
 80003f4:	200000a8 	.word	0x200000a8
 80003f8:	2000009c 	.word	0x2000009c
 80003fc:	20000094 	.word	0x20000094
 8000400:	20000024 	.word	0x20000024
 8000404:	20000020 	.word	0x20000020

08000408 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800040c:	4b09      	ldr	r3, [pc, #36]	; (8000434 <prvResetNextTaskUnblockTime+0x2c>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	2b00      	cmp	r3, #0
 8000414:	d104      	bne.n	8000420 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8000416:	4b08      	ldr	r3, [pc, #32]	; (8000438 <prvResetNextTaskUnblockTime+0x30>)
 8000418:	f04f 32ff 	mov.w	r2, #4294967295
 800041c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800041e:	e005      	b.n	800042c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000420:	4b04      	ldr	r3, [pc, #16]	; (8000434 <prvResetNextTaskUnblockTime+0x2c>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	68db      	ldr	r3, [r3, #12]
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	4a03      	ldr	r2, [pc, #12]	; (8000438 <prvResetNextTaskUnblockTime+0x30>)
 800042a:	6013      	str	r3, [r2, #0]
}
 800042c:	bf00      	nop
 800042e:	46bd      	mov	sp, r7
 8000430:	bc80      	pop	{r7}
 8000432:	4770      	bx	lr
 8000434:	20000088 	.word	0x20000088
 8000438:	200000a4 	.word	0x200000a4
 800043c:	00000000 	.word	0x00000000

08000440 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8000440:	f3ef 8009 	mrs	r0, PSP
 8000444:	f3bf 8f6f 	isb	sy
 8000448:	4b0d      	ldr	r3, [pc, #52]	; (8000480 <pxCurrentTCBConst>)
 800044a:	681a      	ldr	r2, [r3, #0]
 800044c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000450:	6010      	str	r0, [r2, #0]
 8000452:	e92d 4008 	stmdb	sp!, {r3, lr}
 8000456:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 800045a:	f380 8811 	msr	BASEPRI, r0
 800045e:	f7ff ff8d 	bl	800037c <vTaskSwitchContext>
 8000462:	f04f 0000 	mov.w	r0, #0
 8000466:	f380 8811 	msr	BASEPRI, r0
 800046a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800046e:	6819      	ldr	r1, [r3, #0]
 8000470:	6808      	ldr	r0, [r1, #0]
 8000472:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000476:	f380 8809 	msr	PSP, r0
 800047a:	f3bf 8f6f 	isb	sy
 800047e:	4770      	bx	lr

08000480 <pxCurrentTCBConst>:
 8000480:	20000020 	.word	0x20000020
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8000484:	bf00      	nop
 8000486:	bf00      	nop

08000488 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800048e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000492:	f383 8811 	msr	BASEPRI, r3
 8000496:	f3bf 8f6f 	isb	sy
 800049a:	f3bf 8f4f 	dsb	sy
 800049e:	607b      	str	r3, [r7, #4]
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80004a0:	f7ff fe66 	bl	8000170 <xTaskIncrementTick>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d003      	beq.n	80004b2 <SysTick_Handler+0x2a>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80004aa:	4b06      	ldr	r3, [pc, #24]	; (80004c4 <SysTick_Handler+0x3c>)
 80004ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80004b0:	601a      	str	r2, [r3, #0]
 80004b2:	2300      	movs	r3, #0
 80004b4:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80004b6:	683b      	ldr	r3, [r7, #0]
 80004b8:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 80004bc:	bf00      	nop
 80004be:	3708      	adds	r7, #8
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	e000ed04 	.word	0xe000ed04

080004c8 <SVC_Handler>:
#define OS_SWITCH_SP_MSP						__asm volatile ("MRS R0,CONTROL \t\n AND R0,R0,#0x5 \t\n MSR CONTROL,R0")
#define OS_SWITCH_SP_PSP						__asm volatile ("MRS R0,CONTROL \t\n ORR R0,R0,#0x2 \t\n MSR CONTROL,R0")
#define OS_GENERATE_INTERRUPT      				__asm volatile ("SVC #0x3")

void SVC_Handler ()
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
	SWITCH_CPU_ACCESS_UNPRIVILEGE_TO_PRIVILEGE ;
 80004cc:	f3ef 8314 	mrs	r3, CONTROL
 80004d0:	ea4f 0353 	mov.w	r3, r3, lsr #1
 80004d4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80004d8:	f383 8814 	msr	CONTROL, r3
}
 80004dc:	bf00      	nop
 80004de:	46bd      	mov	sp, r7
 80004e0:	bc80      	pop	{r7}
 80004e2:	4770      	bx	lr

080004e4 <TASK_B>:
int TASK_A(int a , int b )
{
	return a+b ;
}
int TASK_B(int a , int b )
{
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
 80004ec:	6039      	str	r1, [r7, #0]
	return a+b ;
 80004ee:	687a      	ldr	r2, [r7, #4]
 80004f0:	683b      	ldr	r3, [r7, #0]
 80004f2:	4413      	add	r3, r2
}
 80004f4:	4618      	mov	r0, r3
 80004f6:	370c      	adds	r7, #12
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bc80      	pop	{r7}
 80004fc:	4770      	bx	lr
	...

08000500 <EXTI9_CALLBACK>:
void EXTI9_CALLBACK(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
	if(flag==0)
 8000504:	4b0d      	ldr	r3, [pc, #52]	; (800053c <EXTI9_CALLBACK+0x3c>)
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	b2db      	uxtb	r3, r3
 800050a:	2b00      	cmp	r3, #0
 800050c:	d106      	bne.n	800051c <EXTI9_CALLBACK+0x1c>
	{
		flag_Task_A = 1 ;
 800050e:	4b0c      	ldr	r3, [pc, #48]	; (8000540 <EXTI9_CALLBACK+0x40>)
 8000510:	2201      	movs	r2, #1
 8000512:	701a      	strb	r2, [r3, #0]
		flag = 1 ;
 8000514:	4b09      	ldr	r3, [pc, #36]	; (800053c <EXTI9_CALLBACK+0x3c>)
 8000516:	2201      	movs	r2, #1
 8000518:	701a      	strb	r2, [r3, #0]
	else if(flag==1)
	{
		flag_Task_B = 1 ;
		flag = 0 ;
	}
}
 800051a:	e00a      	b.n	8000532 <EXTI9_CALLBACK+0x32>
	else if(flag==1)
 800051c:	4b07      	ldr	r3, [pc, #28]	; (800053c <EXTI9_CALLBACK+0x3c>)
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	b2db      	uxtb	r3, r3
 8000522:	2b01      	cmp	r3, #1
 8000524:	d105      	bne.n	8000532 <EXTI9_CALLBACK+0x32>
		flag_Task_B = 1 ;
 8000526:	4b07      	ldr	r3, [pc, #28]	; (8000544 <EXTI9_CALLBACK+0x44>)
 8000528:	2201      	movs	r2, #1
 800052a:	701a      	strb	r2, [r3, #0]
		flag = 0 ;
 800052c:	4b03      	ldr	r3, [pc, #12]	; (800053c <EXTI9_CALLBACK+0x3c>)
 800052e:	2200      	movs	r2, #0
 8000530:	701a      	strb	r2, [r3, #0]
}
 8000532:	bf00      	nop
 8000534:	46bd      	mov	sp, r7
 8000536:	bc80      	pop	{r7}
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	200000c4 	.word	0x200000c4
 8000540:	200000ac 	.word	0x200000ac
 8000544:	200000ad 	.word	0x200000ad

08000548 <Main_Os>:
void Main_Os()
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
	_E_MSP = _S_MSP - 512 ;
 800054c:	4b2f      	ldr	r3, [pc, #188]	; (800060c <Main_Os+0xc4>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8000554:	4a2e      	ldr	r2, [pc, #184]	; (8000610 <Main_Os+0xc8>)
 8000556:	6013      	str	r3, [r2, #0]

	_S_PSP_TA = _E_MSP - 8 ;
 8000558:	4b2d      	ldr	r3, [pc, #180]	; (8000610 <Main_Os+0xc8>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	3b08      	subs	r3, #8
 800055e:	4a2d      	ldr	r2, [pc, #180]	; (8000614 <Main_Os+0xcc>)
 8000560:	6013      	str	r3, [r2, #0]
	_E_PSP_TA = _S_PSP_TA - TASKA_STACK_SIZE ;
 8000562:	4b2c      	ldr	r3, [pc, #176]	; (8000614 <Main_Os+0xcc>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	3b64      	subs	r3, #100	; 0x64
 8000568:	4a2b      	ldr	r2, [pc, #172]	; (8000618 <Main_Os+0xd0>)
 800056a:	6013      	str	r3, [r2, #0]

	_S_PSP_TB = _E_PSP_TA - 8 ;
 800056c:	4b2a      	ldr	r3, [pc, #168]	; (8000618 <Main_Os+0xd0>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	3b08      	subs	r3, #8
 8000572:	4a2a      	ldr	r2, [pc, #168]	; (800061c <Main_Os+0xd4>)
 8000574:	6013      	str	r3, [r2, #0]
	_E_PSP_TB = _S_PSP_TB - TASKB_STACK_SIZE ;
 8000576:	4b29      	ldr	r3, [pc, #164]	; (800061c <Main_Os+0xd4>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	3b64      	subs	r3, #100	; 0x64
 800057c:	4a28      	ldr	r2, [pc, #160]	; (8000620 <Main_Os+0xd8>)
 800057e:	6013      	str	r3, [r2, #0]
	while(1)
	{

		__asm("nop") ;
 8000580:	bf00      	nop

		if (flag_Task_A == 1)
 8000582:	4b28      	ldr	r3, [pc, #160]	; (8000624 <Main_Os+0xdc>)
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	b2db      	uxtb	r3, r3
 8000588:	2b01      	cmp	r3, #1
 800058a:	d11d      	bne.n	80005c8 <Main_Os+0x80>
		{

			// Set PSP Register = _S_PSP_TA
			OS_SET_PSP(_S_PSP_TA) ;
 800058c:	4b21      	ldr	r3, [pc, #132]	; (8000614 <Main_Os+0xcc>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4618      	mov	r0, r3
 8000592:	f380 8809 	msr	PSP, r0
			// SP -> PSP
			OS_SWITCH_SP_PSP ;
 8000596:	f3ef 8014 	mrs	r0, CONTROL
 800059a:	f040 0002 	orr.w	r0, r0, #2
 800059e:	f380 8814 	msr	CONTROL, r0
			// Switch from Privileged to UnPrivileged
			SWITCH_CPU_ACCESS_PRIVILEGE_TO_UNPRIVILEGE ;
 80005a2:	f3ef 8314 	mrs	r3, CONTROL
 80005a6:	f043 0301 	orr.w	r3, r3, #1
 80005aa:	f383 8814 	msr	CONTROL, r3
			TASK_B(10,20) ;
 80005ae:	2114      	movs	r1, #20
 80005b0:	200a      	movs	r0, #10
 80005b2:	f7ff ff97 	bl	80004e4 <TASK_B>
			// Switch from UnPrivileged to Privileged
			OS_GENERATE_INTERRUPT ;
 80005b6:	df03      	svc	3
			// SP -> MSP
			OS_SWITCH_SP_MSP ;
 80005b8:	f3ef 8014 	mrs	r0, CONTROL
 80005bc:	f000 0005 	and.w	r0, r0, #5
 80005c0:	f380 8814 	msr	CONTROL, r0
			__asm("nop") ;
 80005c4:	bf00      	nop
 80005c6:	e7db      	b.n	8000580 <Main_Os+0x38>


		}
		else if(flag_Task_B==1)
 80005c8:	4b17      	ldr	r3, [pc, #92]	; (8000628 <Main_Os+0xe0>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	2b01      	cmp	r3, #1
 80005d0:	d1d6      	bne.n	8000580 <Main_Os+0x38>
		{

			OS_SET_PSP(_S_PSP_TB) ;
 80005d2:	4b12      	ldr	r3, [pc, #72]	; (800061c <Main_Os+0xd4>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4618      	mov	r0, r3
 80005d8:	f380 8809 	msr	PSP, r0
			OS_SWITCH_SP_PSP ;
 80005dc:	f3ef 8014 	mrs	r0, CONTROL
 80005e0:	f040 0002 	orr.w	r0, r0, #2
 80005e4:	f380 8814 	msr	CONTROL, r0
			SWITCH_CPU_ACCESS_PRIVILEGE_TO_UNPRIVILEGE ;
 80005e8:	f3ef 8314 	mrs	r3, CONTROL
 80005ec:	f043 0301 	orr.w	r3, r3, #1
 80005f0:	f383 8814 	msr	CONTROL, r3
			TASK_B(10,20) ;
 80005f4:	2114      	movs	r1, #20
 80005f6:	200a      	movs	r0, #10
 80005f8:	f7ff ff74 	bl	80004e4 <TASK_B>
			OS_GENERATE_INTERRUPT ;
 80005fc:	df03      	svc	3
			OS_SWITCH_SP_MSP ;
 80005fe:	f3ef 8014 	mrs	r0, CONTROL
 8000602:	f000 0005 	and.w	r0, r0, #5
 8000606:	f380 8814 	msr	CONTROL, r0
		__asm("nop") ;
 800060a:	e7b9      	b.n	8000580 <Main_Os+0x38>
 800060c:	20000000 	.word	0x20000000
 8000610:	200000bc 	.word	0x200000bc
 8000614:	200000c0 	.word	0x200000c0
 8000618:	200000d0 	.word	0x200000d0
 800061c:	200000c8 	.word	0x200000c8
 8000620:	200000cc 	.word	0x200000cc
 8000624:	200000ac 	.word	0x200000ac
 8000628:	200000ad 	.word	0x200000ad

0800062c <main>:
	}

}

int main ()
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b086      	sub	sp, #24
 8000630:	af00      	add	r7, sp, #0
	/* RCC Init */
	RCC_GPIOA_CLK_EN();
 8000632:	4b15      	ldr	r3, [pc, #84]	; (8000688 <main+0x5c>)
 8000634:	699b      	ldr	r3, [r3, #24]
 8000636:	4a14      	ldr	r2, [pc, #80]	; (8000688 <main+0x5c>)
 8000638:	f043 0304 	orr.w	r3, r3, #4
 800063c:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 800063e:	4b12      	ldr	r3, [pc, #72]	; (8000688 <main+0x5c>)
 8000640:	699b      	ldr	r3, [r3, #24]
 8000642:	4a11      	ldr	r2, [pc, #68]	; (8000688 <main+0x5c>)
 8000644:	f043 0308 	orr.w	r3, r3, #8
 8000648:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 800064a:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <main+0x5c>)
 800064c:	699b      	ldr	r3, [r3, #24]
 800064e:	4a0e      	ldr	r2, [pc, #56]	; (8000688 <main+0x5c>)
 8000650:	f043 0301 	orr.w	r3, r3, #1
 8000654:	6193      	str	r3, [r2, #24]

	EXTI_PinConfig_t EXTI_CFG ;
	EXTI_CFG.EXTI_PIN = EXTI0PA0 ;
 8000656:	4a0d      	ldr	r2, [pc, #52]	; (800068c <main+0x60>)
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	ca07      	ldmia	r2, {r0, r1, r2}
 800065c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	EXTI_CFG.IRQ_EN  =  EXTI_IRQ_Enable ;
 8000660:	2301      	movs	r3, #1
 8000662:	747b      	strb	r3, [r7, #17]
	EXTI_CFG.P_IRQ_CallBak = EXTI9_CALLBACK ;
 8000664:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <main+0x64>)
 8000666:	617b      	str	r3, [r7, #20]
	EXTI_CFG.Trigger_Case = EXTI_Trigger_RisingAnd_Falling;
 8000668:	2302      	movs	r3, #2
 800066a:	743b      	strb	r3, [r7, #16]
	MCAL_EXTI_GPIO_Init(&EXTI_CFG) ;
 800066c:	1d3b      	adds	r3, r7, #4
 800066e:	4618      	mov	r0, r3
 8000670:	f000 f9f4 	bl	8000a5c <MCAL_EXTI_GPIO_Init>

	NVIC_IRQ23_EXTI5_9_Enable ;
 8000674:	4b07      	ldr	r3, [pc, #28]	; (8000694 <main+0x68>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a06      	ldr	r2, [pc, #24]	; (8000694 <main+0x68>)
 800067a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800067e:	6013      	str	r3, [r2, #0]




	Main_Os();
 8000680:	f7ff ff62 	bl	8000548 <Main_Os>



	while(1); // Shall not return from MainOS
 8000684:	e7fe      	b.n	8000684 <main+0x58>
 8000686:	bf00      	nop
 8000688:	40021000 	.word	0x40021000
 800068c:	08000fdc 	.word	0x08000fdc
 8000690:	08000501 	.word	0x08000501
 8000694:	e000e100 	.word	0xe000e100

08000698 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000698:	480d      	ldr	r0, [pc, #52]	; (80006d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800069a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800069c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006a0:	480c      	ldr	r0, [pc, #48]	; (80006d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80006a2:	490d      	ldr	r1, [pc, #52]	; (80006d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006a4:	4a0d      	ldr	r2, [pc, #52]	; (80006dc <LoopForever+0xe>)
  movs r3, #0
 80006a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006a8:	e002      	b.n	80006b0 <LoopCopyDataInit>

080006aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ae:	3304      	adds	r3, #4

080006b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006b4:	d3f9      	bcc.n	80006aa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006b6:	4a0a      	ldr	r2, [pc, #40]	; (80006e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006b8:	4c0a      	ldr	r4, [pc, #40]	; (80006e4 <LoopForever+0x16>)
  movs r3, #0
 80006ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006bc:	e001      	b.n	80006c2 <LoopFillZerobss>

080006be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006c0:	3204      	adds	r2, #4

080006c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006c4:	d3fb      	bcc.n	80006be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006c6:	f000 fc59 	bl	8000f7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006ca:	f7ff ffaf 	bl	800062c <main>

080006ce <LoopForever>:

LoopForever:
    b LoopForever
 80006ce:	e7fe      	b.n	80006ce <LoopForever>
  ldr   r0, =_estack
 80006d0:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80006d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006d8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80006dc:	08000ff0 	.word	0x08000ff0
  ldr r2, =_sbss
 80006e0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80006e4:	20000110 	.word	0x20000110

080006e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006e8:	e7fe      	b.n	80006e8 <ADC1_2_IRQHandler>
	...

080006ec <NVIC_Enable>:
 * ======================================================================
 *                                          Generic Functions
 *======================================================================
 */
void NVIC_Enable(uint16_t IRQ)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	80fb      	strh	r3, [r7, #6]
	switch(IRQ)
 80006f6:	88fb      	ldrh	r3, [r7, #6]
 80006f8:	2b0f      	cmp	r3, #15
 80006fa:	d854      	bhi.n	80007a6 <NVIC_Enable+0xba>
 80006fc:	a201      	add	r2, pc, #4	; (adr r2, 8000704 <NVIC_Enable+0x18>)
 80006fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000702:	bf00      	nop
 8000704:	08000745 	.word	0x08000745
 8000708:	08000753 	.word	0x08000753
 800070c:	08000761 	.word	0x08000761
 8000710:	0800076f 	.word	0x0800076f
 8000714:	0800077d 	.word	0x0800077d
 8000718:	0800078b 	.word	0x0800078b
 800071c:	0800078b 	.word	0x0800078b
 8000720:	0800078b 	.word	0x0800078b
 8000724:	0800078b 	.word	0x0800078b
 8000728:	0800078b 	.word	0x0800078b
 800072c:	08000799 	.word	0x08000799
 8000730:	08000799 	.word	0x08000799
 8000734:	08000799 	.word	0x08000799
 8000738:	08000799 	.word	0x08000799
 800073c:	08000799 	.word	0x08000799
 8000740:	08000799 	.word	0x08000799
	{
	case EXTI0 :
		NVIC_IRQ6_EXTI0_Enable  ;
 8000744:	4b1a      	ldr	r3, [pc, #104]	; (80007b0 <NVIC_Enable+0xc4>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a19      	ldr	r2, [pc, #100]	; (80007b0 <NVIC_Enable+0xc4>)
 800074a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800074e:	6013      	str	r3, [r2, #0]
		break ;
 8000750:	e029      	b.n	80007a6 <NVIC_Enable+0xba>
	case EXTI1 :
		NVIC_IRQ7_EXTI1_Enable ;
 8000752:	4b17      	ldr	r3, [pc, #92]	; (80007b0 <NVIC_Enable+0xc4>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4a16      	ldr	r2, [pc, #88]	; (80007b0 <NVIC_Enable+0xc4>)
 8000758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800075c:	6013      	str	r3, [r2, #0]
		break ;
 800075e:	e022      	b.n	80007a6 <NVIC_Enable+0xba>
	case EXTI2 :
		NVIC_IRQ8_EXTI2_Enable ;
 8000760:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <NVIC_Enable+0xc4>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a12      	ldr	r2, [pc, #72]	; (80007b0 <NVIC_Enable+0xc4>)
 8000766:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800076a:	6013      	str	r3, [r2, #0]
		break ;
 800076c:	e01b      	b.n	80007a6 <NVIC_Enable+0xba>
	case EXTI3 :
		NVIC_IRQ9_EXTI3_Enable ;
 800076e:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <NVIC_Enable+0xc4>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4a0f      	ldr	r2, [pc, #60]	; (80007b0 <NVIC_Enable+0xc4>)
 8000774:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000778:	6013      	str	r3, [r2, #0]
		break ;
 800077a:	e014      	b.n	80007a6 <NVIC_Enable+0xba>
	case EXTI4 :
		NVIC_IRQ10_EXTI4_Enable ;
 800077c:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <NVIC_Enable+0xc4>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a0b      	ldr	r2, [pc, #44]	; (80007b0 <NVIC_Enable+0xc4>)
 8000782:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000786:	6013      	str	r3, [r2, #0]
		break ;
 8000788:	e00d      	b.n	80007a6 <NVIC_Enable+0xba>
	case EXTI5 :
	case EXTI6 :
	case EXTI7 :
	case EXTI8 :
	case EXTI9 :
		NVIC_IRQ23_EXTI5_9_Enable ;
 800078a:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <NVIC_Enable+0xc4>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4a08      	ldr	r2, [pc, #32]	; (80007b0 <NVIC_Enable+0xc4>)
 8000790:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000794:	6013      	str	r3, [r2, #0]
		break ;
 8000796:	e006      	b.n	80007a6 <NVIC_Enable+0xba>
	case EXTI11 :
	case EXTI12 :
	case EXTI13 :
	case EXTI14 :
	case EXTI15 :
		NVIC_IRQ40_EXTI10_15_Enable  ;
 8000798:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <NVIC_Enable+0xc8>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a05      	ldr	r2, [pc, #20]	; (80007b4 <NVIC_Enable+0xc8>)
 800079e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007a2:	6013      	str	r3, [r2, #0]
		break ;
 80007a4:	bf00      	nop
	}
}
 80007a6:	bf00      	nop
 80007a8:	370c      	adds	r7, #12
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bc80      	pop	{r7}
 80007ae:	4770      	bx	lr
 80007b0:	e000e100 	.word	0xe000e100
 80007b4:	e000e104 	.word	0xe000e104

080007b8 <NVIC_Disable>:

void NVIC_Disable(uint16_t IRQ)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	80fb      	strh	r3, [r7, #6]
	switch(IRQ)
 80007c2:	88fb      	ldrh	r3, [r7, #6]
 80007c4:	2b0f      	cmp	r3, #15
 80007c6:	d854      	bhi.n	8000872 <NVIC_Disable+0xba>
 80007c8:	a201      	add	r2, pc, #4	; (adr r2, 80007d0 <NVIC_Disable+0x18>)
 80007ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007ce:	bf00      	nop
 80007d0:	08000811 	.word	0x08000811
 80007d4:	0800081f 	.word	0x0800081f
 80007d8:	0800082d 	.word	0x0800082d
 80007dc:	0800083b 	.word	0x0800083b
 80007e0:	08000849 	.word	0x08000849
 80007e4:	08000857 	.word	0x08000857
 80007e8:	08000857 	.word	0x08000857
 80007ec:	08000857 	.word	0x08000857
 80007f0:	08000857 	.word	0x08000857
 80007f4:	08000857 	.word	0x08000857
 80007f8:	08000865 	.word	0x08000865
 80007fc:	08000865 	.word	0x08000865
 8000800:	08000865 	.word	0x08000865
 8000804:	08000865 	.word	0x08000865
 8000808:	08000865 	.word	0x08000865
 800080c:	08000865 	.word	0x08000865
	{
	case EXTI0 :
		NVIC_IRQ6_EXTI0_Disable  ;
 8000810:	4b1a      	ldr	r3, [pc, #104]	; (800087c <NVIC_Disable+0xc4>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a19      	ldr	r2, [pc, #100]	; (800087c <NVIC_Disable+0xc4>)
 8000816:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800081a:	6013      	str	r3, [r2, #0]
		break ;
 800081c:	e029      	b.n	8000872 <NVIC_Disable+0xba>
	case EXTI1 :
		NVIC_IRQ7_EXTI1_Disable ;
 800081e:	4b17      	ldr	r3, [pc, #92]	; (800087c <NVIC_Disable+0xc4>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4a16      	ldr	r2, [pc, #88]	; (800087c <NVIC_Disable+0xc4>)
 8000824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000828:	6013      	str	r3, [r2, #0]
		break ;
 800082a:	e022      	b.n	8000872 <NVIC_Disable+0xba>
	case EXTI2 :
		NVIC_IRQ8_EXTI2_Disable ;
 800082c:	4b13      	ldr	r3, [pc, #76]	; (800087c <NVIC_Disable+0xc4>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a12      	ldr	r2, [pc, #72]	; (800087c <NVIC_Disable+0xc4>)
 8000832:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000836:	6013      	str	r3, [r2, #0]
		break ;
 8000838:	e01b      	b.n	8000872 <NVIC_Disable+0xba>
	case EXTI3 :
		NVIC_IRQ9_EXTI3_Disable ;
 800083a:	4b10      	ldr	r3, [pc, #64]	; (800087c <NVIC_Disable+0xc4>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4a0f      	ldr	r2, [pc, #60]	; (800087c <NVIC_Disable+0xc4>)
 8000840:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000844:	6013      	str	r3, [r2, #0]
		break ;
 8000846:	e014      	b.n	8000872 <NVIC_Disable+0xba>
	case EXTI4 :
		NVIC_IRQ10_EXTI4_Disable ;
 8000848:	4b0c      	ldr	r3, [pc, #48]	; (800087c <NVIC_Disable+0xc4>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a0b      	ldr	r2, [pc, #44]	; (800087c <NVIC_Disable+0xc4>)
 800084e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000852:	6013      	str	r3, [r2, #0]
		break ;
 8000854:	e00d      	b.n	8000872 <NVIC_Disable+0xba>
	case EXTI5 :
	case EXTI6 :
	case EXTI7 :
	case EXTI8 :
	case EXTI9 :
		NVIC_IRQ23_EXTI5_9_Disable ;
 8000856:	4b09      	ldr	r3, [pc, #36]	; (800087c <NVIC_Disable+0xc4>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4a08      	ldr	r2, [pc, #32]	; (800087c <NVIC_Disable+0xc4>)
 800085c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000860:	6013      	str	r3, [r2, #0]
		break ;
 8000862:	e006      	b.n	8000872 <NVIC_Disable+0xba>
	case EXTI11 :
	case EXTI12 :
	case EXTI13 :
	case EXTI14 :
	case EXTI15 :
		NVIC_IRQ40_EXTI10_15_Disable  ;
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <NVIC_Disable+0xc8>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a05      	ldr	r2, [pc, #20]	; (8000880 <NVIC_Disable+0xc8>)
 800086a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800086e:	6013      	str	r3, [r2, #0]
		break ;
 8000870:	bf00      	nop
	}
}
 8000872:	bf00      	nop
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	bc80      	pop	{r7}
 800087a:	4770      	bx	lr
 800087c:	e000e180 	.word	0xe000e180
 8000880:	e000e184 	.word	0xe000e184

08000884 <Update_EXTI>:
 * 			@brief 						-EXTI_Config EXTI set @ref EXTI_Define @ref EXTI_Trigger																										*
 * 			@retval						- None																																									*
 * 			Note						-NONE																																	*
 ********************************************************************************************************************/
void Update_EXTI (EXTI_PinConfig_t* EXTI_Config)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
	// 1- configure GPiO TO be AFIO Input -> Floating input
	GPIO_PinCongif_t PinConfig ;
	PinConfig.GPIO_PinNumber=EXTI_Config->EXTI_PIN.GPIO_PIN ;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	891b      	ldrh	r3, [r3, #8]
 8000890:	813b      	strh	r3, [r7, #8]
	PinConfig.GPIO_MODE = GPIO_Mode_INPUT_FLO ;
 8000892:	2301      	movs	r3, #1
 8000894:	72bb      	strb	r3, [r7, #10]
	MCAL_GPIO_INIT((GPIO_Typedef *)EXTI_Config->EXTI_PIN.GPIO_PORT, &PinConfig);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	685b      	ldr	r3, [r3, #4]
 800089a:	f107 0208 	add.w	r2, r7, #8
 800089e:	4611      	mov	r1, r2
 80008a0:	4618      	mov	r0, r3
 80008a2:	f000 fa6d 	bl	8000d80 <MCAL_GPIO_INIT>

	// ==================================================

	// Update AFiO to Route Between EXTI Line With PORT A , B , C , D

	uint8_t AFIO_EXTICR_Index = EXTI_Config->EXTI_PIN.EXTI_InputLineNumber/4 ; // Git AFIO_EXTI[x] : x = 0 1 2 3
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	881b      	ldrh	r3, [r3, #0]
 80008aa:	089b      	lsrs	r3, r3, #2
 80008ac:	b29b      	uxth	r3, r3
 80008ae:	73fb      	strb	r3, [r7, #15]
	uint8_t	AFIO_EXTICR_Position = (EXTI_Config->EXTI_PIN.EXTI_InputLineNumber%4)*4;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	881b      	ldrh	r3, [r3, #0]
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	f003 0303 	and.w	r3, r3, #3
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	009b      	lsls	r3, r3, #2
 80008be:	73bb      	strb	r3, [r7, #14]
	//	These bits are written by software to select the source input for EXTIx external interrupt.
	//	0000: PA[x] pin
	//	0001: PB[x] pin
	//	0010: PC[x] pin
	//	0011: PD[x] pin
	AFIO->EXTICR[AFIO_EXTICR_Index] &= ~(0xF<<AFIO_EXTICR_Position);
 80008c0:	4a5f      	ldr	r2, [pc, #380]	; (8000a40 <Update_EXTI+0x1bc>)
 80008c2:	7bfb      	ldrb	r3, [r7, #15]
 80008c4:	3302      	adds	r3, #2
 80008c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008ca:	7bbb      	ldrb	r3, [r7, #14]
 80008cc:	210f      	movs	r1, #15
 80008ce:	fa01 f303 	lsl.w	r3, r1, r3
 80008d2:	43db      	mvns	r3, r3
 80008d4:	4618      	mov	r0, r3
 80008d6:	495a      	ldr	r1, [pc, #360]	; (8000a40 <Update_EXTI+0x1bc>)
 80008d8:	7bfb      	ldrb	r3, [r7, #15]
 80008da:	4002      	ands	r2, r0
 80008dc:	3302      	adds	r3, #2
 80008de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	AFIO->EXTICR[AFIO_EXTICR_Index] |= ((AFIO_GPIO_EXTI_Mapping((GPIO_Typedef	*)EXTI_Config->EXTI_PIN.GPIO_PORT)&0xf)<<AFIO_EXTICR_Position);
 80008e2:	4a57      	ldr	r2, [pc, #348]	; (8000a40 <Update_EXTI+0x1bc>)
 80008e4:	7bfb      	ldrb	r3, [r7, #15]
 80008e6:	3302      	adds	r3, #2
 80008e8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	4954      	ldr	r1, [pc, #336]	; (8000a44 <Update_EXTI+0x1c0>)
 80008f2:	428b      	cmp	r3, r1
 80008f4:	d016      	beq.n	8000924 <Update_EXTI+0xa0>
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	685b      	ldr	r3, [r3, #4]
 80008fa:	4953      	ldr	r1, [pc, #332]	; (8000a48 <Update_EXTI+0x1c4>)
 80008fc:	428b      	cmp	r3, r1
 80008fe:	d00f      	beq.n	8000920 <Update_EXTI+0x9c>
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	4951      	ldr	r1, [pc, #324]	; (8000a4c <Update_EXTI+0x1c8>)
 8000906:	428b      	cmp	r3, r1
 8000908:	d008      	beq.n	800091c <Update_EXTI+0x98>
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	685b      	ldr	r3, [r3, #4]
 800090e:	4950      	ldr	r1, [pc, #320]	; (8000a50 <Update_EXTI+0x1cc>)
 8000910:	428b      	cmp	r3, r1
 8000912:	d101      	bne.n	8000918 <Update_EXTI+0x94>
 8000914:	2303      	movs	r3, #3
 8000916:	e006      	b.n	8000926 <Update_EXTI+0xa2>
 8000918:	2300      	movs	r3, #0
 800091a:	e004      	b.n	8000926 <Update_EXTI+0xa2>
 800091c:	2302      	movs	r3, #2
 800091e:	e002      	b.n	8000926 <Update_EXTI+0xa2>
 8000920:	2301      	movs	r3, #1
 8000922:	e000      	b.n	8000926 <Update_EXTI+0xa2>
 8000924:	2300      	movs	r3, #0
 8000926:	7bb9      	ldrb	r1, [r7, #14]
 8000928:	408b      	lsls	r3, r1
 800092a:	4618      	mov	r0, r3
 800092c:	4944      	ldr	r1, [pc, #272]	; (8000a40 <Update_EXTI+0x1bc>)
 800092e:	7bfb      	ldrb	r3, [r7, #15]
 8000930:	4302      	orrs	r2, r0
 8000932:	3302      	adds	r3, #2
 8000934:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//==================================================

	// Update Resing and Falling Edge
	//clear the corresponding bit

	EXTI->RTSR &=~ (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000938:	4b46      	ldr	r3, [pc, #280]	; (8000a54 <Update_EXTI+0x1d0>)
 800093a:	689b      	ldr	r3, [r3, #8]
 800093c:	687a      	ldr	r2, [r7, #4]
 800093e:	8812      	ldrh	r2, [r2, #0]
 8000940:	4611      	mov	r1, r2
 8000942:	2201      	movs	r2, #1
 8000944:	408a      	lsls	r2, r1
 8000946:	43d2      	mvns	r2, r2
 8000948:	4611      	mov	r1, r2
 800094a:	4a42      	ldr	r2, [pc, #264]	; (8000a54 <Update_EXTI+0x1d0>)
 800094c:	400b      	ands	r3, r1
 800094e:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &=~ (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000950:	4b40      	ldr	r3, [pc, #256]	; (8000a54 <Update_EXTI+0x1d0>)
 8000952:	68db      	ldr	r3, [r3, #12]
 8000954:	687a      	ldr	r2, [r7, #4]
 8000956:	8812      	ldrh	r2, [r2, #0]
 8000958:	4611      	mov	r1, r2
 800095a:	2201      	movs	r2, #1
 800095c:	408a      	lsls	r2, r1
 800095e:	43d2      	mvns	r2, r2
 8000960:	4611      	mov	r1, r2
 8000962:	4a3c      	ldr	r2, [pc, #240]	; (8000a54 <Update_EXTI+0x1d0>)
 8000964:	400b      	ands	r3, r1
 8000966:	60d3      	str	r3, [r2, #12]

	if (EXTI_Config->Trigger_Case == EXTI_Trigger_Rising)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	7b1b      	ldrb	r3, [r3, #12]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d10b      	bne.n	8000988 <Update_EXTI+0x104>
	{
		EXTI->RTSR |= (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000970:	4b38      	ldr	r3, [pc, #224]	; (8000a54 <Update_EXTI+0x1d0>)
 8000972:	689b      	ldr	r3, [r3, #8]
 8000974:	687a      	ldr	r2, [r7, #4]
 8000976:	8812      	ldrh	r2, [r2, #0]
 8000978:	4611      	mov	r1, r2
 800097a:	2201      	movs	r2, #1
 800097c:	408a      	lsls	r2, r1
 800097e:	4611      	mov	r1, r2
 8000980:	4a34      	ldr	r2, [pc, #208]	; (8000a54 <Update_EXTI+0x1d0>)
 8000982:	430b      	orrs	r3, r1
 8000984:	6093      	str	r3, [r2, #8]
 8000986:	e029      	b.n	80009dc <Update_EXTI+0x158>
	}
	else if (EXTI_Config->Trigger_Case == EXTI_Trigger_Falling)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	7b1b      	ldrb	r3, [r3, #12]
 800098c:	2b01      	cmp	r3, #1
 800098e:	d10b      	bne.n	80009a8 <Update_EXTI+0x124>
	{
		EXTI->FTSR |= (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000990:	4b30      	ldr	r3, [pc, #192]	; (8000a54 <Update_EXTI+0x1d0>)
 8000992:	68db      	ldr	r3, [r3, #12]
 8000994:	687a      	ldr	r2, [r7, #4]
 8000996:	8812      	ldrh	r2, [r2, #0]
 8000998:	4611      	mov	r1, r2
 800099a:	2201      	movs	r2, #1
 800099c:	408a      	lsls	r2, r1
 800099e:	4611      	mov	r1, r2
 80009a0:	4a2c      	ldr	r2, [pc, #176]	; (8000a54 <Update_EXTI+0x1d0>)
 80009a2:	430b      	orrs	r3, r1
 80009a4:	60d3      	str	r3, [r2, #12]
 80009a6:	e019      	b.n	80009dc <Update_EXTI+0x158>
	}
	else if (EXTI_Config->Trigger_Case == EXTI_Trigger_RisingAnd_Falling)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	7b1b      	ldrb	r3, [r3, #12]
 80009ac:	2b02      	cmp	r3, #2
 80009ae:	d115      	bne.n	80009dc <Update_EXTI+0x158>
	{
		EXTI->RTSR |= (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80009b0:	4b28      	ldr	r3, [pc, #160]	; (8000a54 <Update_EXTI+0x1d0>)
 80009b2:	689b      	ldr	r3, [r3, #8]
 80009b4:	687a      	ldr	r2, [r7, #4]
 80009b6:	8812      	ldrh	r2, [r2, #0]
 80009b8:	4611      	mov	r1, r2
 80009ba:	2201      	movs	r2, #1
 80009bc:	408a      	lsls	r2, r1
 80009be:	4611      	mov	r1, r2
 80009c0:	4a24      	ldr	r2, [pc, #144]	; (8000a54 <Update_EXTI+0x1d0>)
 80009c2:	430b      	orrs	r3, r1
 80009c4:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80009c6:	4b23      	ldr	r3, [pc, #140]	; (8000a54 <Update_EXTI+0x1d0>)
 80009c8:	68db      	ldr	r3, [r3, #12]
 80009ca:	687a      	ldr	r2, [r7, #4]
 80009cc:	8812      	ldrh	r2, [r2, #0]
 80009ce:	4611      	mov	r1, r2
 80009d0:	2201      	movs	r2, #1
 80009d2:	408a      	lsls	r2, r1
 80009d4:	4611      	mov	r1, r2
 80009d6:	4a1f      	ldr	r2, [pc, #124]	; (8000a54 <Update_EXTI+0x1d0>)
 80009d8:	430b      	orrs	r3, r1
 80009da:	60d3      	str	r3, [r2, #12]
	}

	// Set Callbak
	GP_IRQ_CallBack[EXTI_Config->EXTI_PIN.EXTI_InputLineNumber] = EXTI_Config->P_IRQ_CallBak ;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	881b      	ldrh	r3, [r3, #0]
 80009e0:	4619      	mov	r1, r3
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	691b      	ldr	r3, [r3, #16]
 80009e6:	4a1c      	ldr	r2, [pc, #112]	; (8000a58 <Update_EXTI+0x1d4>)
 80009e8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	if(EXTI_Config->IRQ_EN==EXTI_IRQ_Enable)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	7b5b      	ldrb	r3, [r3, #13]
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d110      	bne.n	8000a16 <Update_EXTI+0x192>
	{
		EXTI->IMR |= (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80009f4:	4b17      	ldr	r3, [pc, #92]	; (8000a54 <Update_EXTI+0x1d0>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	687a      	ldr	r2, [r7, #4]
 80009fa:	8812      	ldrh	r2, [r2, #0]
 80009fc:	4611      	mov	r1, r2
 80009fe:	2201      	movs	r2, #1
 8000a00:	408a      	lsls	r2, r1
 8000a02:	4611      	mov	r1, r2
 8000a04:	4a13      	ldr	r2, [pc, #76]	; (8000a54 <Update_EXTI+0x1d0>)
 8000a06:	430b      	orrs	r3, r1
 8000a08:	6013      	str	r3, [r2, #0]
		NVIC_Enable(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	881b      	ldrh	r3, [r3, #0]
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f7ff fe6c 	bl	80006ec <NVIC_Enable>
	{
		EXTI->IMR &=~ (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
		NVIC_Disable(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
	}

}
 8000a14:	e010      	b.n	8000a38 <Update_EXTI+0x1b4>
		EXTI->IMR &=~ (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000a16:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <Update_EXTI+0x1d0>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	687a      	ldr	r2, [r7, #4]
 8000a1c:	8812      	ldrh	r2, [r2, #0]
 8000a1e:	4611      	mov	r1, r2
 8000a20:	2201      	movs	r2, #1
 8000a22:	408a      	lsls	r2, r1
 8000a24:	43d2      	mvns	r2, r2
 8000a26:	4611      	mov	r1, r2
 8000a28:	4a0a      	ldr	r2, [pc, #40]	; (8000a54 <Update_EXTI+0x1d0>)
 8000a2a:	400b      	ands	r3, r1
 8000a2c:	6013      	str	r3, [r2, #0]
		NVIC_Disable(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	881b      	ldrh	r3, [r3, #0]
 8000a32:	4618      	mov	r0, r3
 8000a34:	f7ff fec0 	bl	80007b8 <NVIC_Disable>
}
 8000a38:	bf00      	nop
 8000a3a:	3710      	adds	r7, #16
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	40010000 	.word	0x40010000
 8000a44:	40010800 	.word	0x40010800
 8000a48:	40010c00 	.word	0x40010c00
 8000a4c:	40011000 	.word	0x40011000
 8000a50:	40011400 	.word	0x40011400
 8000a54:	40010400 	.word	0x40010400
 8000a58:	200000d4 	.word	0x200000d4

08000a5c <MCAL_EXTI_GPIO_Init>:
 * @retval           -none
 * Note              -it is Mandatory to Enable RCC Clock for AFIO and the corresponding GPIO
 * =================================================================
 */
void MCAL_EXTI_GPIO_Init(EXTI_PinConfig_t* EXTI_Config)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
	Update_EXTI(EXTI_Config);
 8000a64:	6878      	ldr	r0, [r7, #4]
 8000a66:	f7ff ff0d 	bl	8000884 <Update_EXTI>
}
 8000a6a:	bf00      	nop
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
	...

08000a74 <EXTI0_IRQHandler>:
////**=====================     ISR FUNCTIONS      =============================
////**==========================================================================
////**==========================================================================

void EXTI0_IRQHandler(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
	// must clear PR By Writing one on Bit
	EXTI->PR |= (1<<EXTI0);
 8000a78:	4b05      	ldr	r3, [pc, #20]	; (8000a90 <EXTI0_IRQHandler+0x1c>)
 8000a7a:	695b      	ldr	r3, [r3, #20]
 8000a7c:	4a04      	ldr	r2, [pc, #16]	; (8000a90 <EXTI0_IRQHandler+0x1c>)
 8000a7e:	f043 0301 	orr.w	r3, r3, #1
 8000a82:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[EXTI0]();
 8000a84:	4b03      	ldr	r3, [pc, #12]	; (8000a94 <EXTI0_IRQHandler+0x20>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4798      	blx	r3
}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40010400 	.word	0x40010400
 8000a94:	200000d4 	.word	0x200000d4

08000a98 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
	// must clear PR By Writing one on Bit
	EXTI->PR |= (1<<EXTI1);
 8000a9c:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <EXTI1_IRQHandler+0x1c>)
 8000a9e:	695b      	ldr	r3, [r3, #20]
 8000aa0:	4a04      	ldr	r2, [pc, #16]	; (8000ab4 <EXTI1_IRQHandler+0x1c>)
 8000aa2:	f043 0302 	orr.w	r3, r3, #2
 8000aa6:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[EXTI1]();
 8000aa8:	4b03      	ldr	r3, [pc, #12]	; (8000ab8 <EXTI1_IRQHandler+0x20>)
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	4798      	blx	r3

}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40010400 	.word	0x40010400
 8000ab8:	200000d4 	.word	0x200000d4

08000abc <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
	// must clear PR By Writing one on Bit
	EXTI->PR |= (1<<EXTI2);
 8000ac0:	4b05      	ldr	r3, [pc, #20]	; (8000ad8 <EXTI2_IRQHandler+0x1c>)
 8000ac2:	695b      	ldr	r3, [r3, #20]
 8000ac4:	4a04      	ldr	r2, [pc, #16]	; (8000ad8 <EXTI2_IRQHandler+0x1c>)
 8000ac6:	f043 0304 	orr.w	r3, r3, #4
 8000aca:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[EXTI2]();
 8000acc:	4b03      	ldr	r3, [pc, #12]	; (8000adc <EXTI2_IRQHandler+0x20>)
 8000ace:	689b      	ldr	r3, [r3, #8]
 8000ad0:	4798      	blx	r3
}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40010400 	.word	0x40010400
 8000adc:	200000d4 	.word	0x200000d4

08000ae0 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
	// must clear PR By Writing one on Bit
	EXTI->PR |= (1<<EXTI3);
 8000ae4:	4b05      	ldr	r3, [pc, #20]	; (8000afc <EXTI3_IRQHandler+0x1c>)
 8000ae6:	695b      	ldr	r3, [r3, #20]
 8000ae8:	4a04      	ldr	r2, [pc, #16]	; (8000afc <EXTI3_IRQHandler+0x1c>)
 8000aea:	f043 0308 	orr.w	r3, r3, #8
 8000aee:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[EXTI13]();
 8000af0:	4b03      	ldr	r3, [pc, #12]	; (8000b00 <EXTI3_IRQHandler+0x20>)
 8000af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000af4:	4798      	blx	r3
}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40010400 	.word	0x40010400
 8000b00:	200000d4 	.word	0x200000d4

08000b04 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
	// must clear PR By Writing one on Bit
	EXTI->PR |= (1<<EXTI4);
 8000b08:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <EXTI4_IRQHandler+0x1c>)
 8000b0a:	695b      	ldr	r3, [r3, #20]
 8000b0c:	4a04      	ldr	r2, [pc, #16]	; (8000b20 <EXTI4_IRQHandler+0x1c>)
 8000b0e:	f043 0310 	orr.w	r3, r3, #16
 8000b12:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[EXTI4]();
 8000b14:	4b03      	ldr	r3, [pc, #12]	; (8000b24 <EXTI4_IRQHandler+0x20>)
 8000b16:	691b      	ldr	r3, [r3, #16]
 8000b18:	4798      	blx	r3
}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40010400 	.word	0x40010400
 8000b24:	200000d4 	.word	0x200000d4

08000b28 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
	// must clear PR By Writing one on Bit
	if (EXTI->PR & 1<<EXTI5){EXTI->PR |= 1<<EXTI5;GP_IRQ_CallBack[EXTI5]();}
 8000b2c:	4b26      	ldr	r3, [pc, #152]	; (8000bc8 <EXTI9_5_IRQHandler+0xa0>)
 8000b2e:	695b      	ldr	r3, [r3, #20]
 8000b30:	f003 0320 	and.w	r3, r3, #32
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d008      	beq.n	8000b4a <EXTI9_5_IRQHandler+0x22>
 8000b38:	4b23      	ldr	r3, [pc, #140]	; (8000bc8 <EXTI9_5_IRQHandler+0xa0>)
 8000b3a:	695b      	ldr	r3, [r3, #20]
 8000b3c:	4a22      	ldr	r2, [pc, #136]	; (8000bc8 <EXTI9_5_IRQHandler+0xa0>)
 8000b3e:	f043 0320 	orr.w	r3, r3, #32
 8000b42:	6153      	str	r3, [r2, #20]
 8000b44:	4b21      	ldr	r3, [pc, #132]	; (8000bcc <EXTI9_5_IRQHandler+0xa4>)
 8000b46:	695b      	ldr	r3, [r3, #20]
 8000b48:	4798      	blx	r3
	if (EXTI->PR & 1<<EXTI6){EXTI->PR |= 1<<EXTI6;GP_IRQ_CallBack[EXTI6]();}
 8000b4a:	4b1f      	ldr	r3, [pc, #124]	; (8000bc8 <EXTI9_5_IRQHandler+0xa0>)
 8000b4c:	695b      	ldr	r3, [r3, #20]
 8000b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d008      	beq.n	8000b68 <EXTI9_5_IRQHandler+0x40>
 8000b56:	4b1c      	ldr	r3, [pc, #112]	; (8000bc8 <EXTI9_5_IRQHandler+0xa0>)
 8000b58:	695b      	ldr	r3, [r3, #20]
 8000b5a:	4a1b      	ldr	r2, [pc, #108]	; (8000bc8 <EXTI9_5_IRQHandler+0xa0>)
 8000b5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b60:	6153      	str	r3, [r2, #20]
 8000b62:	4b1a      	ldr	r3, [pc, #104]	; (8000bcc <EXTI9_5_IRQHandler+0xa4>)
 8000b64:	699b      	ldr	r3, [r3, #24]
 8000b66:	4798      	blx	r3
	if (EXTI->PR & 1<<EXTI7){EXTI->PR |= 1<<EXTI7;GP_IRQ_CallBack[EXTI7]();}
 8000b68:	4b17      	ldr	r3, [pc, #92]	; (8000bc8 <EXTI9_5_IRQHandler+0xa0>)
 8000b6a:	695b      	ldr	r3, [r3, #20]
 8000b6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d008      	beq.n	8000b86 <EXTI9_5_IRQHandler+0x5e>
 8000b74:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <EXTI9_5_IRQHandler+0xa0>)
 8000b76:	695b      	ldr	r3, [r3, #20]
 8000b78:	4a13      	ldr	r2, [pc, #76]	; (8000bc8 <EXTI9_5_IRQHandler+0xa0>)
 8000b7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b7e:	6153      	str	r3, [r2, #20]
 8000b80:	4b12      	ldr	r3, [pc, #72]	; (8000bcc <EXTI9_5_IRQHandler+0xa4>)
 8000b82:	69db      	ldr	r3, [r3, #28]
 8000b84:	4798      	blx	r3
	if (EXTI->PR & 1<<EXTI8){EXTI->PR |= 1<<EXTI8;GP_IRQ_CallBack[EXTI8]();}
 8000b86:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <EXTI9_5_IRQHandler+0xa0>)
 8000b88:	695b      	ldr	r3, [r3, #20]
 8000b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d008      	beq.n	8000ba4 <EXTI9_5_IRQHandler+0x7c>
 8000b92:	4b0d      	ldr	r3, [pc, #52]	; (8000bc8 <EXTI9_5_IRQHandler+0xa0>)
 8000b94:	695b      	ldr	r3, [r3, #20]
 8000b96:	4a0c      	ldr	r2, [pc, #48]	; (8000bc8 <EXTI9_5_IRQHandler+0xa0>)
 8000b98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b9c:	6153      	str	r3, [r2, #20]
 8000b9e:	4b0b      	ldr	r3, [pc, #44]	; (8000bcc <EXTI9_5_IRQHandler+0xa4>)
 8000ba0:	6a1b      	ldr	r3, [r3, #32]
 8000ba2:	4798      	blx	r3
	if (EXTI->PR & 1<<EXTI9){EXTI->PR |= 1<<EXTI9;GP_IRQ_CallBack[EXTI9]();}
 8000ba4:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <EXTI9_5_IRQHandler+0xa0>)
 8000ba6:	695b      	ldr	r3, [r3, #20]
 8000ba8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d008      	beq.n	8000bc2 <EXTI9_5_IRQHandler+0x9a>
 8000bb0:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <EXTI9_5_IRQHandler+0xa0>)
 8000bb2:	695b      	ldr	r3, [r3, #20]
 8000bb4:	4a04      	ldr	r2, [pc, #16]	; (8000bc8 <EXTI9_5_IRQHandler+0xa0>)
 8000bb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bba:	6153      	str	r3, [r2, #20]
 8000bbc:	4b03      	ldr	r3, [pc, #12]	; (8000bcc <EXTI9_5_IRQHandler+0xa4>)
 8000bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bc0:	4798      	blx	r3
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40010400 	.word	0x40010400
 8000bcc:	200000d4 	.word	0x200000d4

08000bd0 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
	// must clear PR By Writing one on Bit
	if (EXTI->PR & 1<<EXTI10){EXTI->PR |= 1<<EXTI10;GP_IRQ_CallBack[EXTI10]();}
 8000bd4:	4b2d      	ldr	r3, [pc, #180]	; (8000c8c <EXTI15_10_IRQHandler+0xbc>)
 8000bd6:	695b      	ldr	r3, [r3, #20]
 8000bd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d008      	beq.n	8000bf2 <EXTI15_10_IRQHandler+0x22>
 8000be0:	4b2a      	ldr	r3, [pc, #168]	; (8000c8c <EXTI15_10_IRQHandler+0xbc>)
 8000be2:	695b      	ldr	r3, [r3, #20]
 8000be4:	4a29      	ldr	r2, [pc, #164]	; (8000c8c <EXTI15_10_IRQHandler+0xbc>)
 8000be6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bea:	6153      	str	r3, [r2, #20]
 8000bec:	4b28      	ldr	r3, [pc, #160]	; (8000c90 <EXTI15_10_IRQHandler+0xc0>)
 8000bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bf0:	4798      	blx	r3
	if (EXTI->PR & 1<<EXTI11){EXTI->PR |= 1<<EXTI11;GP_IRQ_CallBack[EXTI11]();}
 8000bf2:	4b26      	ldr	r3, [pc, #152]	; (8000c8c <EXTI15_10_IRQHandler+0xbc>)
 8000bf4:	695b      	ldr	r3, [r3, #20]
 8000bf6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d008      	beq.n	8000c10 <EXTI15_10_IRQHandler+0x40>
 8000bfe:	4b23      	ldr	r3, [pc, #140]	; (8000c8c <EXTI15_10_IRQHandler+0xbc>)
 8000c00:	695b      	ldr	r3, [r3, #20]
 8000c02:	4a22      	ldr	r2, [pc, #136]	; (8000c8c <EXTI15_10_IRQHandler+0xbc>)
 8000c04:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c08:	6153      	str	r3, [r2, #20]
 8000c0a:	4b21      	ldr	r3, [pc, #132]	; (8000c90 <EXTI15_10_IRQHandler+0xc0>)
 8000c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c0e:	4798      	blx	r3
	if (EXTI->PR & 1<<EXTI12){EXTI->PR |= 1<<EXTI12;GP_IRQ_CallBack[EXTI12]();}
 8000c10:	4b1e      	ldr	r3, [pc, #120]	; (8000c8c <EXTI15_10_IRQHandler+0xbc>)
 8000c12:	695b      	ldr	r3, [r3, #20]
 8000c14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d008      	beq.n	8000c2e <EXTI15_10_IRQHandler+0x5e>
 8000c1c:	4b1b      	ldr	r3, [pc, #108]	; (8000c8c <EXTI15_10_IRQHandler+0xbc>)
 8000c1e:	695b      	ldr	r3, [r3, #20]
 8000c20:	4a1a      	ldr	r2, [pc, #104]	; (8000c8c <EXTI15_10_IRQHandler+0xbc>)
 8000c22:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c26:	6153      	str	r3, [r2, #20]
 8000c28:	4b19      	ldr	r3, [pc, #100]	; (8000c90 <EXTI15_10_IRQHandler+0xc0>)
 8000c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2c:	4798      	blx	r3
	if (EXTI->PR & 1<<EXTI13){EXTI->PR |= 1<<EXTI13;GP_IRQ_CallBack[EXTI13]();}
 8000c2e:	4b17      	ldr	r3, [pc, #92]	; (8000c8c <EXTI15_10_IRQHandler+0xbc>)
 8000c30:	695b      	ldr	r3, [r3, #20]
 8000c32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d008      	beq.n	8000c4c <EXTI15_10_IRQHandler+0x7c>
 8000c3a:	4b14      	ldr	r3, [pc, #80]	; (8000c8c <EXTI15_10_IRQHandler+0xbc>)
 8000c3c:	695b      	ldr	r3, [r3, #20]
 8000c3e:	4a13      	ldr	r2, [pc, #76]	; (8000c8c <EXTI15_10_IRQHandler+0xbc>)
 8000c40:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c44:	6153      	str	r3, [r2, #20]
 8000c46:	4b12      	ldr	r3, [pc, #72]	; (8000c90 <EXTI15_10_IRQHandler+0xc0>)
 8000c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c4a:	4798      	blx	r3
	if (EXTI->PR & 1<<EXTI14){EXTI->PR |= 1<<EXTI14;GP_IRQ_CallBack[EXTI14]();}
 8000c4c:	4b0f      	ldr	r3, [pc, #60]	; (8000c8c <EXTI15_10_IRQHandler+0xbc>)
 8000c4e:	695b      	ldr	r3, [r3, #20]
 8000c50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d008      	beq.n	8000c6a <EXTI15_10_IRQHandler+0x9a>
 8000c58:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <EXTI15_10_IRQHandler+0xbc>)
 8000c5a:	695b      	ldr	r3, [r3, #20]
 8000c5c:	4a0b      	ldr	r2, [pc, #44]	; (8000c8c <EXTI15_10_IRQHandler+0xbc>)
 8000c5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c62:	6153      	str	r3, [r2, #20]
 8000c64:	4b0a      	ldr	r3, [pc, #40]	; (8000c90 <EXTI15_10_IRQHandler+0xc0>)
 8000c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c68:	4798      	blx	r3
	if (EXTI->PR & 1<<EXTI15){EXTI->PR |= 1<<EXTI15;GP_IRQ_CallBack[EXTI15]();}
 8000c6a:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <EXTI15_10_IRQHandler+0xbc>)
 8000c6c:	695b      	ldr	r3, [r3, #20]
 8000c6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d008      	beq.n	8000c88 <EXTI15_10_IRQHandler+0xb8>
 8000c76:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <EXTI15_10_IRQHandler+0xbc>)
 8000c78:	695b      	ldr	r3, [r3, #20]
 8000c7a:	4a04      	ldr	r2, [pc, #16]	; (8000c8c <EXTI15_10_IRQHandler+0xbc>)
 8000c7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c80:	6153      	str	r3, [r2, #20]
 8000c82:	4b03      	ldr	r3, [pc, #12]	; (8000c90 <EXTI15_10_IRQHandler+0xc0>)
 8000c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c86:	4798      	blx	r3

}
 8000c88:	bf00      	nop
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40010400 	.word	0x40010400
 8000c90:	200000d4 	.word	0x200000d4

08000c94 <Get_CRLH_Position>:
 * 			Note							-NONE																														*
 ********************************************************************************************************************/
#include "GPIO.h"

static uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b085      	sub	sp, #20
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	80fb      	strh	r3, [r7, #6]
	uint16_t Loc_Pin_Number = 0 ;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	81fb      	strh	r3, [r7, #14]
	switch(PinNumber)
 8000ca2:	88fb      	ldrh	r3, [r7, #6]
 8000ca4:	2b80      	cmp	r3, #128	; 0x80
 8000ca6:	d049      	beq.n	8000d3c <Get_CRLH_Position+0xa8>
 8000ca8:	2b80      	cmp	r3, #128	; 0x80
 8000caa:	dc11      	bgt.n	8000cd0 <Get_CRLH_Position+0x3c>
 8000cac:	2b08      	cmp	r3, #8
 8000cae:	d039      	beq.n	8000d24 <Get_CRLH_Position+0x90>
 8000cb0:	2b08      	cmp	r3, #8
 8000cb2:	dc06      	bgt.n	8000cc2 <Get_CRLH_Position+0x2e>
 8000cb4:	2b02      	cmp	r3, #2
 8000cb6:	d02f      	beq.n	8000d18 <Get_CRLH_Position+0x84>
 8000cb8:	2b04      	cmp	r3, #4
 8000cba:	d030      	beq.n	8000d1e <Get_CRLH_Position+0x8a>
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d028      	beq.n	8000d12 <Get_CRLH_Position+0x7e>
 8000cc0:	e057      	b.n	8000d72 <Get_CRLH_Position+0xde>
 8000cc2:	2b20      	cmp	r3, #32
 8000cc4:	d034      	beq.n	8000d30 <Get_CRLH_Position+0x9c>
 8000cc6:	2b40      	cmp	r3, #64	; 0x40
 8000cc8:	d035      	beq.n	8000d36 <Get_CRLH_Position+0xa2>
 8000cca:	2b10      	cmp	r3, #16
 8000ccc:	d02d      	beq.n	8000d2a <Get_CRLH_Position+0x96>
 8000cce:	e050      	b.n	8000d72 <Get_CRLH_Position+0xde>
 8000cd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000cd4:	d03e      	beq.n	8000d54 <Get_CRLH_Position+0xc0>
 8000cd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000cda:	dc09      	bgt.n	8000cf0 <Get_CRLH_Position+0x5c>
 8000cdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ce0:	d032      	beq.n	8000d48 <Get_CRLH_Position+0xb4>
 8000ce2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ce6:	d032      	beq.n	8000d4e <Get_CRLH_Position+0xba>
 8000ce8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000cec:	d029      	beq.n	8000d42 <Get_CRLH_Position+0xae>
 8000cee:	e040      	b.n	8000d72 <Get_CRLH_Position+0xde>
 8000cf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cf4:	d034      	beq.n	8000d60 <Get_CRLH_Position+0xcc>
 8000cf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cfa:	dc03      	bgt.n	8000d04 <Get_CRLH_Position+0x70>
 8000cfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d00:	d02b      	beq.n	8000d5a <Get_CRLH_Position+0xc6>
 8000d02:	e036      	b.n	8000d72 <Get_CRLH_Position+0xde>
 8000d04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000d08:	d02d      	beq.n	8000d66 <Get_CRLH_Position+0xd2>
 8000d0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000d0e:	d02d      	beq.n	8000d6c <Get_CRLH_Position+0xd8>
 8000d10:	e02f      	b.n	8000d72 <Get_CRLH_Position+0xde>
	{
	case GPIO_PIN_0 :
		Loc_Pin_Number = 0 ;
 8000d12:	2300      	movs	r3, #0
 8000d14:	81fb      	strh	r3, [r7, #14]
		break ;
 8000d16:	e02c      	b.n	8000d72 <Get_CRLH_Position+0xde>
	case GPIO_PIN_1 :
		Loc_Pin_Number = 4 ;
 8000d18:	2304      	movs	r3, #4
 8000d1a:	81fb      	strh	r3, [r7, #14]
		break ;
 8000d1c:	e029      	b.n	8000d72 <Get_CRLH_Position+0xde>
	case GPIO_PIN_2 :
		Loc_Pin_Number = 8 ;
 8000d1e:	2308      	movs	r3, #8
 8000d20:	81fb      	strh	r3, [r7, #14]
		break ;
 8000d22:	e026      	b.n	8000d72 <Get_CRLH_Position+0xde>
	case GPIO_PIN_3 :
		Loc_Pin_Number = 12 ;
 8000d24:	230c      	movs	r3, #12
 8000d26:	81fb      	strh	r3, [r7, #14]
		break ;
 8000d28:	e023      	b.n	8000d72 <Get_CRLH_Position+0xde>
	case GPIO_PIN_4 :
		Loc_Pin_Number = 16 ;
 8000d2a:	2310      	movs	r3, #16
 8000d2c:	81fb      	strh	r3, [r7, #14]
		break ;
 8000d2e:	e020      	b.n	8000d72 <Get_CRLH_Position+0xde>
	case GPIO_PIN_5 :
		Loc_Pin_Number = 20 ;
 8000d30:	2314      	movs	r3, #20
 8000d32:	81fb      	strh	r3, [r7, #14]
		break ;
 8000d34:	e01d      	b.n	8000d72 <Get_CRLH_Position+0xde>
	case GPIO_PIN_6 :
		Loc_Pin_Number = 24 ;
 8000d36:	2318      	movs	r3, #24
 8000d38:	81fb      	strh	r3, [r7, #14]
		break ;
 8000d3a:	e01a      	b.n	8000d72 <Get_CRLH_Position+0xde>
	case GPIO_PIN_7 :
		Loc_Pin_Number = 28 ;
 8000d3c:	231c      	movs	r3, #28
 8000d3e:	81fb      	strh	r3, [r7, #14]
		break ;
 8000d40:	e017      	b.n	8000d72 <Get_CRLH_Position+0xde>
	case GPIO_PIN_8 :
		Loc_Pin_Number = 0 ;
 8000d42:	2300      	movs	r3, #0
 8000d44:	81fb      	strh	r3, [r7, #14]
		break ;
 8000d46:	e014      	b.n	8000d72 <Get_CRLH_Position+0xde>
	case GPIO_PIN_9 :
		Loc_Pin_Number = 4 ;
 8000d48:	2304      	movs	r3, #4
 8000d4a:	81fb      	strh	r3, [r7, #14]
		break ;
 8000d4c:	e011      	b.n	8000d72 <Get_CRLH_Position+0xde>
	case GPIO_PIN_10 :
		Loc_Pin_Number = 8 ;
 8000d4e:	2308      	movs	r3, #8
 8000d50:	81fb      	strh	r3, [r7, #14]
		break ;
 8000d52:	e00e      	b.n	8000d72 <Get_CRLH_Position+0xde>
	case GPIO_PIN_11 :
		Loc_Pin_Number = 12 ;
 8000d54:	230c      	movs	r3, #12
 8000d56:	81fb      	strh	r3, [r7, #14]
		break ;
 8000d58:	e00b      	b.n	8000d72 <Get_CRLH_Position+0xde>
	case GPIO_PIN_12 :
		Loc_Pin_Number = 16 ;
 8000d5a:	2310      	movs	r3, #16
 8000d5c:	81fb      	strh	r3, [r7, #14]
		break ;
 8000d5e:	e008      	b.n	8000d72 <Get_CRLH_Position+0xde>
	case GPIO_PIN_13 :
		Loc_Pin_Number = 20 ;
 8000d60:	2314      	movs	r3, #20
 8000d62:	81fb      	strh	r3, [r7, #14]
		break ;
 8000d64:	e005      	b.n	8000d72 <Get_CRLH_Position+0xde>
	case GPIO_PIN_14 :
		Loc_Pin_Number = 24 ;
 8000d66:	2318      	movs	r3, #24
 8000d68:	81fb      	strh	r3, [r7, #14]
		break ;
 8000d6a:	e002      	b.n	8000d72 <Get_CRLH_Position+0xde>
	case GPIO_PIN_15 :
		Loc_Pin_Number = 28 ;
 8000d6c:	231c      	movs	r3, #28
 8000d6e:	81fb      	strh	r3, [r7, #14]
		break ;
 8000d70:	bf00      	nop
	}
	return Loc_Pin_Number ;
 8000d72:	89fb      	ldrh	r3, [r7, #14]
 8000d74:	b2db      	uxtb	r3, r3
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3714      	adds	r7, #20
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bc80      	pop	{r7}
 8000d7e:	4770      	bx	lr

08000d80 <MCAL_GPIO_INIT>:
 * 												-contain the configratoiin of GPIO PIN
 * 			@retval						-NONE																														*
 * 			Note							--stm32f103c6 has GPIO A : E BUT LQFP48 has A ,B 	,part of c , d pins																														*
 ********************************************************************************************************************/
void MCAL_GPIO_INIT(GPIO_Typedef * GPIOX,GPIO_PinCongif_t* pinconfig)
{
 8000d80:	b590      	push	{r4, r7, lr}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	6039      	str	r1, [r7, #0]
	volatile uint32_t* Loc_Config_Regester = NULL ;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60bb      	str	r3, [r7, #8]
	uint8_t	 Loc_Pin_Congif	=	0 ;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	73fb      	strb	r3, [r7, #15]
	Loc_Config_Regester = (pinconfig->GPIO_PinNumber<GPIO_PIN_8)? 	&GPIOX->CRL	:	&GPIOX->CRH 	 ;
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	881b      	ldrh	r3, [r3, #0]
 8000d96:	2bff      	cmp	r3, #255	; 0xff
 8000d98:	d801      	bhi.n	8000d9e <MCAL_GPIO_INIT+0x1e>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	e001      	b.n	8000da2 <MCAL_GPIO_INIT+0x22>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	3304      	adds	r3, #4
 8000da2:	60bb      	str	r3, [r7, #8]
	*(Loc_Config_Regester) &=~(0xf<<(Get_CRLH_Position(pinconfig->GPIO_PinNumber)));
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	881b      	ldrh	r3, [r3, #0]
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff ff73 	bl	8000c94 <Get_CRLH_Position>
 8000dae:	4603      	mov	r3, r0
 8000db0:	461a      	mov	r2, r3
 8000db2:	230f      	movs	r3, #15
 8000db4:	4093      	lsls	r3, r2
 8000db6:	43da      	mvns	r2, r3
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	401a      	ands	r2, r3
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	601a      	str	r2, [r3, #0]
	if (pinconfig->GPIO_MODE==GPIO_Mode_OUTPUT_OD || pinconfig->GPIO_MODE==GPIO_Mode_OUTPUT_PP||\
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	789b      	ldrb	r3, [r3, #2]
 8000dc6:	2b05      	cmp	r3, #5
 8000dc8:	d00b      	beq.n	8000de2 <MCAL_GPIO_INIT+0x62>
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	789b      	ldrb	r3, [r3, #2]
 8000dce:	2b04      	cmp	r3, #4
 8000dd0:	d007      	beq.n	8000de2 <MCAL_GPIO_INIT+0x62>
			pinconfig->GPIO_MODE==GPIO_Mode_OUTPUT_AF_OD ||pinconfig->GPIO_MODE==GPIO_Mode_OUTPUT_AF_PP)
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	789b      	ldrb	r3, [r3, #2]
	if (pinconfig->GPIO_MODE==GPIO_Mode_OUTPUT_OD || pinconfig->GPIO_MODE==GPIO_Mode_OUTPUT_PP||\
 8000dd6:	2b07      	cmp	r3, #7
 8000dd8:	d003      	beq.n	8000de2 <MCAL_GPIO_INIT+0x62>
			pinconfig->GPIO_MODE==GPIO_Mode_OUTPUT_AF_OD ||pinconfig->GPIO_MODE==GPIO_Mode_OUTPUT_AF_PP)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	789b      	ldrb	r3, [r3, #2]
 8000dde:	2b06      	cmp	r3, #6
 8000de0:	d10e      	bne.n	8000e00 <MCAL_GPIO_INIT+0x80>
	{
		Loc_Pin_Congif = ((((pinconfig->GPIO_MODE-4)<<2) | (pinconfig->GPIO_OutPut_Speed))&0x0f) ;
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	789b      	ldrb	r3, [r3, #2]
 8000de6:	3b04      	subs	r3, #4
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	b25a      	sxtb	r2, r3
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	78db      	ldrb	r3, [r3, #3]
 8000df0:	b25b      	sxtb	r3, r3
 8000df2:	4313      	orrs	r3, r2
 8000df4:	b25b      	sxtb	r3, r3
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	f003 030f 	and.w	r3, r3, #15
 8000dfc:	73fb      	strb	r3, [r7, #15]
 8000dfe:	e031      	b.n	8000e64 <MCAL_GPIO_INIT+0xe4>
	}
	else
	{
		if((pinconfig->GPIO_MODE==GPIO_Mode_INPUT_FLO)||(pinconfig->GPIO_MODE==GPIO_Mode_Analog))
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	789b      	ldrb	r3, [r3, #2]
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d003      	beq.n	8000e10 <MCAL_GPIO_INIT+0x90>
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	789b      	ldrb	r3, [r3, #2]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d107      	bne.n	8000e20 <MCAL_GPIO_INIT+0xa0>
		{
			Loc_Pin_Congif = ((((pinconfig->GPIO_MODE)<<2) |0x0)&0x0f) ;
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	789b      	ldrb	r3, [r3, #2]
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	f003 030f 	and.w	r3, r3, #15
 8000e1c:	73fb      	strb	r3, [r7, #15]
 8000e1e:	e021      	b.n	8000e64 <MCAL_GPIO_INIT+0xe4>
		}
		else if (pinconfig->GPIO_MODE==GPIO_Mode_AF_INPUT)
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	789b      	ldrb	r3, [r3, #2]
 8000e24:	2b08      	cmp	r3, #8
 8000e26:	d102      	bne.n	8000e2e <MCAL_GPIO_INIT+0xae>
		{
			Loc_Pin_Congif = GPIO_Mode_AF_INPUT ;
 8000e28:	2308      	movs	r3, #8
 8000e2a:	73fb      	strb	r3, [r7, #15]
 8000e2c:	e01a      	b.n	8000e64 <MCAL_GPIO_INIT+0xe4>
		}
		else
		{
			Loc_Pin_Congif =(( (pinconfig->GPIO_MODE<< 2) |0x0)&0x0F) ;
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	789b      	ldrb	r3, [r3, #2]
 8000e32:	009b      	lsls	r3, r3, #2
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	f003 030f 	and.w	r3, r3, #15
 8000e3a:	73fb      	strb	r3, [r7, #15]
			if (pinconfig->GPIO_MODE == GPIO_Mode_INPUT_PU)
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	789b      	ldrb	r3, [r3, #2]
 8000e40:	2b02      	cmp	r3, #2
 8000e42:	d107      	bne.n	8000e54 <MCAL_GPIO_INIT+0xd4>
			{
				GPIOX->ODR |= pinconfig->GPIO_PinNumber ;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	683a      	ldr	r2, [r7, #0]
 8000e4a:	8812      	ldrh	r2, [r2, #0]
 8000e4c:	431a      	orrs	r2, r3
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	e007      	b.n	8000e64 <MCAL_GPIO_INIT+0xe4>
			}
			else
			{
				GPIOX->ODR &=~ (pinconfig->GPIO_PinNumber) ;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	683a      	ldr	r2, [r7, #0]
 8000e5a:	8812      	ldrh	r2, [r2, #0]
 8000e5c:	43d2      	mvns	r2, r2
 8000e5e:	401a      	ands	r2, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	60da      	str	r2, [r3, #12]
			}
		}
	}
	(*Loc_Config_Regester) |= ((Loc_Pin_Congif)<<Get_CRLH_Position(pinconfig->GPIO_PinNumber)) ;
 8000e64:	7bfc      	ldrb	r4, [r7, #15]
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	881b      	ldrh	r3, [r3, #0]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff ff12 	bl	8000c94 <Get_CRLH_Position>
 8000e70:	4603      	mov	r3, r0
 8000e72:	fa04 f203 	lsl.w	r2, r4, r3
 8000e76:	68bb      	ldr	r3, [r7, #8]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	431a      	orrs	r2, r3
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	601a      	str	r2, [r3, #0]

}
 8000e80:	bf00      	nop
 8000e82:	3714      	adds	r7, #20
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd90      	pop	{r4, r7, pc}

08000e88 <SPI1_IRQHandler>:
 * 										IRQ
 * =============================================================================
 */

void SPI1_IRQHandler (void)  /* SPI1 global interrupt*/
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src;

	irq_src.TXE = ((SPI1->SR & (1<<1)) >> 1);
 8000e8e:	4b13      	ldr	r3, [pc, #76]	; (8000edc <SPI1_IRQHandler+0x54>)
 8000e90:	689b      	ldr	r3, [r3, #8]
 8000e92:	085b      	lsrs	r3, r3, #1
 8000e94:	f003 0301 	and.w	r3, r3, #1
 8000e98:	b2da      	uxtb	r2, r3
 8000e9a:	793b      	ldrb	r3, [r7, #4]
 8000e9c:	f362 0300 	bfi	r3, r2, #0, #1
 8000ea0:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ((SPI1->SR & (1<<0)) >> 0);
 8000ea2:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <SPI1_IRQHandler+0x54>)
 8000ea4:	689b      	ldr	r3, [r3, #8]
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	b2da      	uxtb	r2, r3
 8000eac:	793b      	ldrb	r3, [r7, #4]
 8000eae:	f362 0341 	bfi	r3, r2, #1, #1
 8000eb2:	713b      	strb	r3, [r7, #4]
	irq_src.ERR = ((SPI1->SR & (1<<4)) >> 4);
 8000eb4:	4b09      	ldr	r3, [pc, #36]	; (8000edc <SPI1_IRQHandler+0x54>)
 8000eb6:	689b      	ldr	r3, [r3, #8]
 8000eb8:	091b      	lsrs	r3, r3, #4
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	b2da      	uxtb	r2, r3
 8000ec0:	793b      	ldrb	r3, [r7, #4]
 8000ec2:	f362 0382 	bfi	r3, r2, #2, #1
 8000ec6:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[SPI1_Index]->P_IRQ_CallBack (irq_src);
 8000ec8:	4b05      	ldr	r3, [pc, #20]	; (8000ee0 <SPI1_IRQHandler+0x58>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	695b      	ldr	r3, [r3, #20]
 8000ece:	7938      	ldrb	r0, [r7, #4]
 8000ed0:	4798      	blx	r3

}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40013000 	.word	0x40013000
 8000ee0:	200000b0 	.word	0x200000b0

08000ee4 <SPI2_IRQHandler>:

void SPI2_IRQHandler (void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src;

	irq_src.TXE = ((SPI2->SR & (1<<1)) >> 1);
 8000eea:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <SPI2_IRQHandler+0x54>)
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	085b      	lsrs	r3, r3, #1
 8000ef0:	f003 0301 	and.w	r3, r3, #1
 8000ef4:	b2da      	uxtb	r2, r3
 8000ef6:	793b      	ldrb	r3, [r7, #4]
 8000ef8:	f362 0300 	bfi	r3, r2, #0, #1
 8000efc:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ((SPI2->SR & (1<<0)) >> 0);
 8000efe:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <SPI2_IRQHandler+0x54>)
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	b2da      	uxtb	r2, r3
 8000f08:	793b      	ldrb	r3, [r7, #4]
 8000f0a:	f362 0341 	bfi	r3, r2, #1, #1
 8000f0e:	713b      	strb	r3, [r7, #4]
	irq_src.ERR = ((SPI2->SR & (1<<4)) >> 4);
 8000f10:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <SPI2_IRQHandler+0x54>)
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	091b      	lsrs	r3, r3, #4
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	b2da      	uxtb	r2, r3
 8000f1c:	793b      	ldrb	r3, [r7, #4]
 8000f1e:	f362 0382 	bfi	r3, r2, #2, #1
 8000f22:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[SPI2_Index]->P_IRQ_CallBack (irq_src);
 8000f24:	4b05      	ldr	r3, [pc, #20]	; (8000f3c <SPI2_IRQHandler+0x58>)
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	695b      	ldr	r3, [r3, #20]
 8000f2a:	7938      	ldrb	r0, [r7, #4]
 8000f2c:	4798      	blx	r3
}
 8000f2e:	bf00      	nop
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40003800 	.word	0x40003800
 8000f3c:	200000b0 	.word	0x200000b0

08000f40 <USART1_IRQHandler>:



//ISR
void USART1_IRQHandler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
	Global_Usart_ConFig->P_IRQ_CallBack();
 8000f44:	4b02      	ldr	r3, [pc, #8]	; (8000f50 <USART1_IRQHandler+0x10>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	691b      	ldr	r3, [r3, #16]
 8000f4a:	4798      	blx	r3
}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	200000b8 	.word	0x200000b8

08000f54 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
	Global_Usart_ConFig->P_IRQ_CallBack();
 8000f58:	4b02      	ldr	r3, [pc, #8]	; (8000f64 <USART2_IRQHandler+0x10>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	691b      	ldr	r3, [r3, #16]
 8000f5e:	4798      	blx	r3
}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	200000b8 	.word	0x200000b8

08000f68 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
	Global_Usart_ConFig->P_IRQ_CallBack();
 8000f6c:	4b02      	ldr	r3, [pc, #8]	; (8000f78 <USART3_IRQHandler+0x10>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	691b      	ldr	r3, [r3, #16]
 8000f72:	4798      	blx	r3
}
 8000f74:	bf00      	nop
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	200000b8 	.word	0x200000b8

08000f7c <__libc_init_array>:
 8000f7c:	b570      	push	{r4, r5, r6, lr}
 8000f7e:	2500      	movs	r5, #0
 8000f80:	4e0c      	ldr	r6, [pc, #48]	; (8000fb4 <__libc_init_array+0x38>)
 8000f82:	4c0d      	ldr	r4, [pc, #52]	; (8000fb8 <__libc_init_array+0x3c>)
 8000f84:	1ba4      	subs	r4, r4, r6
 8000f86:	10a4      	asrs	r4, r4, #2
 8000f88:	42a5      	cmp	r5, r4
 8000f8a:	d109      	bne.n	8000fa0 <__libc_init_array+0x24>
 8000f8c:	f000 f81a 	bl	8000fc4 <_init>
 8000f90:	2500      	movs	r5, #0
 8000f92:	4e0a      	ldr	r6, [pc, #40]	; (8000fbc <__libc_init_array+0x40>)
 8000f94:	4c0a      	ldr	r4, [pc, #40]	; (8000fc0 <__libc_init_array+0x44>)
 8000f96:	1ba4      	subs	r4, r4, r6
 8000f98:	10a4      	asrs	r4, r4, #2
 8000f9a:	42a5      	cmp	r5, r4
 8000f9c:	d105      	bne.n	8000faa <__libc_init_array+0x2e>
 8000f9e:	bd70      	pop	{r4, r5, r6, pc}
 8000fa0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000fa4:	4798      	blx	r3
 8000fa6:	3501      	adds	r5, #1
 8000fa8:	e7ee      	b.n	8000f88 <__libc_init_array+0xc>
 8000faa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000fae:	4798      	blx	r3
 8000fb0:	3501      	adds	r5, #1
 8000fb2:	e7f2      	b.n	8000f9a <__libc_init_array+0x1e>
 8000fb4:	08000fe8 	.word	0x08000fe8
 8000fb8:	08000fe8 	.word	0x08000fe8
 8000fbc:	08000fe8 	.word	0x08000fe8
 8000fc0:	08000fec 	.word	0x08000fec

08000fc4 <_init>:
 8000fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fc6:	bf00      	nop
 8000fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fca:	bc08      	pop	{r3}
 8000fcc:	469e      	mov	lr, r3
 8000fce:	4770      	bx	lr

08000fd0 <_fini>:
 8000fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fd2:	bf00      	nop
 8000fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fd6:	bc08      	pop	{r3}
 8000fd8:	469e      	mov	lr, r3
 8000fda:	4770      	bx	lr
