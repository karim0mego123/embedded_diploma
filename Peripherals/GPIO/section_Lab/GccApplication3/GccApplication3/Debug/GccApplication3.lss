
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ca  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000011e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000011e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000150  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000652  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000586  00000000  00000000  000007fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000288  00000000  00000000  00000d84  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000100c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000325  00000000  00000000  00001030  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000cd  00000000  00000000  00001355  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001422  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define F_CPU	8000000UL
#include "util\delay.h"

int main(void)
{
	DDRC_BASE =0XFF;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	84 bb       	out	0x14, r24	; 20
	 DDRD_BASE = 0b11110000 ;	
  70:	80 ef       	ldi	r24, 0xF0	; 240
  72:	81 bb       	out	0x11, r24	; 17
    /* Replace with your application code */
    while (1) 
    {
		for ( uint8_t i = 0 ; i<10 ; i++ )
  74:	90 e0       	ldi	r25, 0x00	; 0
  76:	24 c0       	rjmp	.+72     	; 0xc0 <main+0x54>
 		{
 			for ( uint8_t j = 0 ; j<10 ; j++ )
 			{
 				PORTC_BASE = 0b1011 | (i<<4);
  78:	40 e1       	ldi	r20, 0x10	; 16
  7a:	94 9f       	mul	r25, r20
  7c:	90 01       	movw	r18, r0
  7e:	11 24       	eor	r1, r1
  80:	2b 60       	ori	r18, 0x0B	; 11
  82:	25 bb       	out	0x15, r18	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  84:	2f ef       	ldi	r18, 0xFF	; 255
  86:	34 e3       	ldi	r19, 0x34	; 52
  88:	4c e0       	ldi	r20, 0x0C	; 12
  8a:	21 50       	subi	r18, 0x01	; 1
  8c:	30 40       	sbci	r19, 0x00	; 0
  8e:	40 40       	sbci	r20, 0x00	; 0
  90:	e1 f7       	brne	.-8      	; 0x8a <main+0x1e>
  92:	00 c0       	rjmp	.+0      	; 0x94 <main+0x28>
  94:	00 00       	nop
 				_delay_ms(500);
 				PORTC_BASE = 0b0111 | (j<<4) ;
  96:	40 e1       	ldi	r20, 0x10	; 16
  98:	84 9f       	mul	r24, r20
  9a:	90 01       	movw	r18, r0
  9c:	11 24       	eor	r1, r1
  9e:	27 60       	ori	r18, 0x07	; 7
  a0:	25 bb       	out	0x15, r18	; 21
  a2:	2f ef       	ldi	r18, 0xFF	; 255
  a4:	34 e3       	ldi	r19, 0x34	; 52
  a6:	4c e0       	ldi	r20, 0x0C	; 12
  a8:	21 50       	subi	r18, 0x01	; 1
  aa:	30 40       	sbci	r19, 0x00	; 0
  ac:	40 40       	sbci	r20, 0x00	; 0
  ae:	e1 f7       	brne	.-8      	; 0xa8 <main+0x3c>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <main+0x46>
  b2:	00 00       	nop
    /* Replace with your application code */
    while (1) 
    {
		for ( uint8_t i = 0 ; i<10 ; i++ )
 		{
 			for ( uint8_t j = 0 ; j<10 ; j++ )
  b4:	8f 5f       	subi	r24, 0xFF	; 255
  b6:	01 c0       	rjmp	.+2      	; 0xba <main+0x4e>
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	8a 30       	cpi	r24, 0x0A	; 10
  bc:	e8 f2       	brcs	.-70     	; 0x78 <main+0xc>
	DDRC_BASE =0XFF;
	 DDRD_BASE = 0b11110000 ;	
    /* Replace with your application code */
    while (1) 
    {
		for ( uint8_t i = 0 ; i<10 ; i++ )
  be:	9f 5f       	subi	r25, 0xFF	; 255
  c0:	9a 30       	cpi	r25, 0x0A	; 10
  c2:	d0 f3       	brcs	.-12     	; 0xb8 <main+0x4c>
  c4:	d7 cf       	rjmp	.-82     	; 0x74 <main+0x8>

000000c6 <_exit>:
  c6:	f8 94       	cli

000000c8 <__stop_program>:
  c8:	ff cf       	rjmp	.-2      	; 0xc8 <__stop_program>
