
drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d1c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08000e4c  08000e4c  00010e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000e74  08000e74  00010e7c  2**0
                  CONTENTS
  4 .ARM          00000000  08000e74  08000e74  00010e7c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e74  08000e7c  00010e7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e74  08000e74  00010e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e78  08000e78  00010e78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010e7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000000  08000e7c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  08000e7c  00020060  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010e7c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003411  00000000  00000000  00010ea5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000811  00000000  00000000  000142b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000009b8  00000000  00000000  00014ac7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001a0  00000000  00000000  00015480  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000158  00000000  00000000  00015620  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000adb  00000000  00000000  00015778  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001a6d  00000000  00000000  00016253  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00009302  00000000  00000000  00017cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00020fc2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000524  00000000  00000000  00021040  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000e34 	.word	0x08000e34

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000e34 	.word	0x08000e34

08000170 <LCD_Clear_Screen>:
 * 			@param [in]					-NONE																		*
 * 			@retval						-NONE																		*
 * 			Note						-NONE																		*
 ********************************************************************************************************************/
void LCD_Clear_Screen ()
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	LCD_Wirte_Cmd(LCD_CLEAR_SCREEN);
 8000174:	2001      	movs	r0, #1
 8000176:	f000 f8fb 	bl	8000370 <LCD_Wirte_Cmd>
}
 800017a:	bf00      	nop
 800017c:	bd80      	pop	{r7, pc}
	...

08000180 <LCD_Enable>:
 * 			@param [in]					-NONE																		*
 * 			@retval						-NONE																		*
 * 			Note						-NONE																		*
 ********************************************************************************************************************/
void LCD_Enable ()
{
 8000180:	b580      	push	{r7, lr}
 8000182:	af00      	add	r7, sp, #0
	MCAL_GPIO_Write_PIN(LCD_CTRL, EN_SWITCH,HIGH);
 8000184:	2201      	movs	r2, #1
 8000186:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800018a:	4807      	ldr	r0, [pc, #28]	; (80001a8 <LCD_Enable+0x28>)
 800018c:	f000 fe08 	bl	8000da0 <MCAL_GPIO_Write_PIN>
	_delay_ms(50);
 8000190:	2032      	movs	r0, #50	; 0x32
 8000192:	f000 f80b 	bl	80001ac <_delay_ms>
	MCAL_GPIO_Write_PIN(LCD_CTRL, EN_SWITCH,LOW);
 8000196:	2200      	movs	r2, #0
 8000198:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800019c:	4802      	ldr	r0, [pc, #8]	; (80001a8 <LCD_Enable+0x28>)
 800019e:	f000 fdff 	bl	8000da0 <MCAL_GPIO_Write_PIN>
}
 80001a2:	bf00      	nop
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	40010800 	.word	0x40010800

080001ac <_delay_ms>:
void _delay_ms(int Delay)
{
 80001ac:	b480      	push	{r7}
 80001ae:	b085      	sub	sp, #20
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	6078      	str	r0, [r7, #4]
	for(int  i = 0 ; i < Delay ; i++ )
 80001b4:	2300      	movs	r3, #0
 80001b6:	60fb      	str	r3, [r7, #12]
 80001b8:	e00b      	b.n	80001d2 <_delay_ms+0x26>
		for(int j = 0 ; j < 255 ; j++) ;
 80001ba:	2300      	movs	r3, #0
 80001bc:	60bb      	str	r3, [r7, #8]
 80001be:	e002      	b.n	80001c6 <_delay_ms+0x1a>
 80001c0:	68bb      	ldr	r3, [r7, #8]
 80001c2:	3301      	adds	r3, #1
 80001c4:	60bb      	str	r3, [r7, #8]
 80001c6:	68bb      	ldr	r3, [r7, #8]
 80001c8:	2bfe      	cmp	r3, #254	; 0xfe
 80001ca:	ddf9      	ble.n	80001c0 <_delay_ms+0x14>
	for(int  i = 0 ; i < Delay ; i++ )
 80001cc:	68fb      	ldr	r3, [r7, #12]
 80001ce:	3301      	adds	r3, #1
 80001d0:	60fb      	str	r3, [r7, #12]
 80001d2:	68fa      	ldr	r2, [r7, #12]
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	429a      	cmp	r2, r3
 80001d8:	dbef      	blt.n	80001ba <_delay_ms+0xe>
}
 80001da:	bf00      	nop
 80001dc:	3714      	adds	r7, #20
 80001de:	46bd      	mov	sp, r7
 80001e0:	bc80      	pop	{r7}
 80001e2:	4770      	bx	lr

080001e4 <LCD_Init>:
 * 			@param [in]					-NONE																		*
 * 			@retval						-NONE																		*
 * 			Note						-NONE																		*
 ********************************************************************************************************************/
void LCD_Init()
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	af00      	add	r7, sp, #0
	_delay_ms(20) ;
 80001e8:	2014      	movs	r0, #20
 80001ea:	f7ff ffdf 	bl	80001ac <_delay_ms>

	PinConfig.GPIO_PinNumber=RS_SWITCH;
 80001ee:	4b5e      	ldr	r3, [pc, #376]	; (8000368 <LCD_Init+0x184>)
 80001f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80001f4:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE=GPIO_Mode_OUTPUT_PP;
 80001f6:	4b5c      	ldr	r3, [pc, #368]	; (8000368 <LCD_Init+0x184>)
 80001f8:	2204      	movs	r2, #4
 80001fa:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_OutPut_Speed=GPIO_SPEED_10M;
 80001fc:	4b5a      	ldr	r3, [pc, #360]	; (8000368 <LCD_Init+0x184>)
 80001fe:	2201      	movs	r2, #1
 8000200:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_CTRL, &PinConfig);
 8000202:	4959      	ldr	r1, [pc, #356]	; (8000368 <LCD_Init+0x184>)
 8000204:	4859      	ldr	r0, [pc, #356]	; (800036c <LCD_Init+0x188>)
 8000206:	f000 fd47 	bl	8000c98 <MCAL_GPIO_INIT>

	PinConfig.GPIO_PinNumber=RW_SWITCH;
 800020a:	4b57      	ldr	r3, [pc, #348]	; (8000368 <LCD_Init+0x184>)
 800020c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000210:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE=GPIO_Mode_OUTPUT_PP;
 8000212:	4b55      	ldr	r3, [pc, #340]	; (8000368 <LCD_Init+0x184>)
 8000214:	2204      	movs	r2, #4
 8000216:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_OutPut_Speed=GPIO_SPEED_10M;
 8000218:	4b53      	ldr	r3, [pc, #332]	; (8000368 <LCD_Init+0x184>)
 800021a:	2201      	movs	r2, #1
 800021c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_CTRL, &PinConfig);
 800021e:	4952      	ldr	r1, [pc, #328]	; (8000368 <LCD_Init+0x184>)
 8000220:	4852      	ldr	r0, [pc, #328]	; (800036c <LCD_Init+0x188>)
 8000222:	f000 fd39 	bl	8000c98 <MCAL_GPIO_INIT>

	PinConfig.GPIO_PinNumber=EN_SWITCH;
 8000226:	4b50      	ldr	r3, [pc, #320]	; (8000368 <LCD_Init+0x184>)
 8000228:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800022c:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE=GPIO_Mode_OUTPUT_PP;
 800022e:	4b4e      	ldr	r3, [pc, #312]	; (8000368 <LCD_Init+0x184>)
 8000230:	2204      	movs	r2, #4
 8000232:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_OutPut_Speed=GPIO_SPEED_10M;
 8000234:	4b4c      	ldr	r3, [pc, #304]	; (8000368 <LCD_Init+0x184>)
 8000236:	2201      	movs	r2, #1
 8000238:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_CTRL, &PinConfig);
 800023a:	494b      	ldr	r1, [pc, #300]	; (8000368 <LCD_Init+0x184>)
 800023c:	484b      	ldr	r0, [pc, #300]	; (800036c <LCD_Init+0x188>)
 800023e:	f000 fd2b 	bl	8000c98 <MCAL_GPIO_INIT>

	_delay_ms(15) ;
 8000242:	200f      	movs	r0, #15
 8000244:	f7ff ffb2 	bl	80001ac <_delay_ms>

	PinConfig.GPIO_PinNumber=GPIO_PIN_0;
 8000248:	4b47      	ldr	r3, [pc, #284]	; (8000368 <LCD_Init+0x184>)
 800024a:	2201      	movs	r2, #1
 800024c:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE=GPIO_Mode_OUTPUT_PP;
 800024e:	4b46      	ldr	r3, [pc, #280]	; (8000368 <LCD_Init+0x184>)
 8000250:	2204      	movs	r2, #4
 8000252:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_OutPut_Speed=GPIO_SPEED_10M;
 8000254:	4b44      	ldr	r3, [pc, #272]	; (8000368 <LCD_Init+0x184>)
 8000256:	2201      	movs	r2, #1
 8000258:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_CTRL, &PinConfig);
 800025a:	4943      	ldr	r1, [pc, #268]	; (8000368 <LCD_Init+0x184>)
 800025c:	4843      	ldr	r0, [pc, #268]	; (800036c <LCD_Init+0x188>)
 800025e:	f000 fd1b 	bl	8000c98 <MCAL_GPIO_INIT>

	PinConfig.GPIO_PinNumber=GPIO_PIN_1;
 8000262:	4b41      	ldr	r3, [pc, #260]	; (8000368 <LCD_Init+0x184>)
 8000264:	2202      	movs	r2, #2
 8000266:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE=GPIO_Mode_OUTPUT_PP;
 8000268:	4b3f      	ldr	r3, [pc, #252]	; (8000368 <LCD_Init+0x184>)
 800026a:	2204      	movs	r2, #4
 800026c:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_OutPut_Speed=GPIO_SPEED_10M;
 800026e:	4b3e      	ldr	r3, [pc, #248]	; (8000368 <LCD_Init+0x184>)
 8000270:	2201      	movs	r2, #1
 8000272:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_CTRL, &PinConfig);
 8000274:	493c      	ldr	r1, [pc, #240]	; (8000368 <LCD_Init+0x184>)
 8000276:	483d      	ldr	r0, [pc, #244]	; (800036c <LCD_Init+0x188>)
 8000278:	f000 fd0e 	bl	8000c98 <MCAL_GPIO_INIT>

	PinConfig.GPIO_PinNumber=GPIO_PIN_2;
 800027c:	4b3a      	ldr	r3, [pc, #232]	; (8000368 <LCD_Init+0x184>)
 800027e:	2204      	movs	r2, #4
 8000280:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE=GPIO_Mode_OUTPUT_PP;
 8000282:	4b39      	ldr	r3, [pc, #228]	; (8000368 <LCD_Init+0x184>)
 8000284:	2204      	movs	r2, #4
 8000286:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_OutPut_Speed=GPIO_SPEED_10M;
 8000288:	4b37      	ldr	r3, [pc, #220]	; (8000368 <LCD_Init+0x184>)
 800028a:	2201      	movs	r2, #1
 800028c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_CTRL, &PinConfig);
 800028e:	4936      	ldr	r1, [pc, #216]	; (8000368 <LCD_Init+0x184>)
 8000290:	4836      	ldr	r0, [pc, #216]	; (800036c <LCD_Init+0x188>)
 8000292:	f000 fd01 	bl	8000c98 <MCAL_GPIO_INIT>

	PinConfig.GPIO_PinNumber=GPIO_PIN_3;
 8000296:	4b34      	ldr	r3, [pc, #208]	; (8000368 <LCD_Init+0x184>)
 8000298:	2208      	movs	r2, #8
 800029a:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE=GPIO_Mode_OUTPUT_PP;
 800029c:	4b32      	ldr	r3, [pc, #200]	; (8000368 <LCD_Init+0x184>)
 800029e:	2204      	movs	r2, #4
 80002a0:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_OutPut_Speed=GPIO_SPEED_10M;
 80002a2:	4b31      	ldr	r3, [pc, #196]	; (8000368 <LCD_Init+0x184>)
 80002a4:	2201      	movs	r2, #1
 80002a6:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_CTRL, &PinConfig);
 80002a8:	492f      	ldr	r1, [pc, #188]	; (8000368 <LCD_Init+0x184>)
 80002aa:	4830      	ldr	r0, [pc, #192]	; (800036c <LCD_Init+0x188>)
 80002ac:	f000 fcf4 	bl	8000c98 <MCAL_GPIO_INIT>

	PinConfig.GPIO_PinNumber=GPIO_PIN_4;
 80002b0:	4b2d      	ldr	r3, [pc, #180]	; (8000368 <LCD_Init+0x184>)
 80002b2:	2210      	movs	r2, #16
 80002b4:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE=GPIO_Mode_OUTPUT_PP;
 80002b6:	4b2c      	ldr	r3, [pc, #176]	; (8000368 <LCD_Init+0x184>)
 80002b8:	2204      	movs	r2, #4
 80002ba:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_OutPut_Speed=GPIO_SPEED_10M;
 80002bc:	4b2a      	ldr	r3, [pc, #168]	; (8000368 <LCD_Init+0x184>)
 80002be:	2201      	movs	r2, #1
 80002c0:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_CTRL, &PinConfig);
 80002c2:	4929      	ldr	r1, [pc, #164]	; (8000368 <LCD_Init+0x184>)
 80002c4:	4829      	ldr	r0, [pc, #164]	; (800036c <LCD_Init+0x188>)
 80002c6:	f000 fce7 	bl	8000c98 <MCAL_GPIO_INIT>

	PinConfig.GPIO_PinNumber=GPIO_PIN_5;
 80002ca:	4b27      	ldr	r3, [pc, #156]	; (8000368 <LCD_Init+0x184>)
 80002cc:	2220      	movs	r2, #32
 80002ce:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE=GPIO_Mode_OUTPUT_PP;
 80002d0:	4b25      	ldr	r3, [pc, #148]	; (8000368 <LCD_Init+0x184>)
 80002d2:	2204      	movs	r2, #4
 80002d4:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_OutPut_Speed=GPIO_SPEED_10M;
 80002d6:	4b24      	ldr	r3, [pc, #144]	; (8000368 <LCD_Init+0x184>)
 80002d8:	2201      	movs	r2, #1
 80002da:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_CTRL, &PinConfig);
 80002dc:	4922      	ldr	r1, [pc, #136]	; (8000368 <LCD_Init+0x184>)
 80002de:	4823      	ldr	r0, [pc, #140]	; (800036c <LCD_Init+0x188>)
 80002e0:	f000 fcda 	bl	8000c98 <MCAL_GPIO_INIT>

	LCD_Clear_Screen();
 80002e4:	f7ff ff44 	bl	8000170 <LCD_Clear_Screen>
	PinConfig.GPIO_PinNumber=GPIO_PIN_6;
 80002e8:	4b1f      	ldr	r3, [pc, #124]	; (8000368 <LCD_Init+0x184>)
 80002ea:	2240      	movs	r2, #64	; 0x40
 80002ec:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE=GPIO_Mode_OUTPUT_PP;
 80002ee:	4b1e      	ldr	r3, [pc, #120]	; (8000368 <LCD_Init+0x184>)
 80002f0:	2204      	movs	r2, #4
 80002f2:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_OutPut_Speed=GPIO_SPEED_10M;
 80002f4:	4b1c      	ldr	r3, [pc, #112]	; (8000368 <LCD_Init+0x184>)
 80002f6:	2201      	movs	r2, #1
 80002f8:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_CTRL, &PinConfig);
 80002fa:	491b      	ldr	r1, [pc, #108]	; (8000368 <LCD_Init+0x184>)
 80002fc:	481b      	ldr	r0, [pc, #108]	; (800036c <LCD_Init+0x188>)
 80002fe:	f000 fccb 	bl	8000c98 <MCAL_GPIO_INIT>

	PinConfig.GPIO_PinNumber=GPIO_PIN_7;
 8000302:	4b19      	ldr	r3, [pc, #100]	; (8000368 <LCD_Init+0x184>)
 8000304:	2280      	movs	r2, #128	; 0x80
 8000306:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE=GPIO_Mode_OUTPUT_PP;
 8000308:	4b17      	ldr	r3, [pc, #92]	; (8000368 <LCD_Init+0x184>)
 800030a:	2204      	movs	r2, #4
 800030c:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_OutPut_Speed=GPIO_SPEED_10M;
 800030e:	4b16      	ldr	r3, [pc, #88]	; (8000368 <LCD_Init+0x184>)
 8000310:	2201      	movs	r2, #1
 8000312:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_CTRL, &PinConfig);
 8000314:	4914      	ldr	r1, [pc, #80]	; (8000368 <LCD_Init+0x184>)
 8000316:	4815      	ldr	r0, [pc, #84]	; (800036c <LCD_Init+0x188>)
 8000318:	f000 fcbe 	bl	8000c98 <MCAL_GPIO_INIT>

	MCAL_GPIO_Write_PIN(LCD_CTRL, RW_SWITCH, LOW);
 800031c:	2200      	movs	r2, #0
 800031e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000322:	4812      	ldr	r0, [pc, #72]	; (800036c <LCD_Init+0x188>)
 8000324:	f000 fd3c 	bl	8000da0 <MCAL_GPIO_Write_PIN>
	MCAL_GPIO_Write_PIN(LCD_CTRL, RS_SWITCH, LOW);
 8000328:	2200      	movs	r2, #0
 800032a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800032e:	480f      	ldr	r0, [pc, #60]	; (800036c <LCD_Init+0x188>)
 8000330:	f000 fd36 	bl	8000da0 <MCAL_GPIO_Write_PIN>
	MCAL_GPIO_Write_PIN(LCD_CTRL, EN_SWITCH, LOW);
 8000334:	2200      	movs	r2, #0
 8000336:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800033a:	480c      	ldr	r0, [pc, #48]	; (800036c <LCD_Init+0x188>)
 800033c:	f000 fd30 	bl	8000da0 <MCAL_GPIO_Write_PIN>
	_delay_ms(15);
 8000340:	200f      	movs	r0, #15
 8000342:	f7ff ff33 	bl	80001ac <_delay_ms>
	LCD_Clear_Screen();
 8000346:	f7ff ff13 	bl	8000170 <LCD_Clear_Screen>

#ifdef EIGHT_BIT_MODE
	LCD_Wirte_Cmd(LCD_FUNCTION_8BIT_2LINES);
 800034a:	2038      	movs	r0, #56	; 0x38
 800034c:	f000 f810 	bl	8000370 <LCD_Wirte_Cmd>
	// 	LCD_Wirte_Cmd(0x60);	By Default

	Init_Is_Finshed = 1 ; // when we init LCD in case four bit we will send 0x2xxxx  , 0x2xxxx , 0x8xxxx
	// SO When we send 0x0010 0000 last four bit will be read from lcd and 0000 will not be read
#endif
	LCD_Wirte_Cmd(LCD_ENTRY_MODE);
 8000350:	2006      	movs	r0, #6
 8000352:	f000 f80d 	bl	8000370 <LCD_Wirte_Cmd>
	LCD_Wirte_Cmd(LCD_BEGIN_AT_FIRST_ROW);
 8000356:	2080      	movs	r0, #128	; 0x80
 8000358:	f000 f80a 	bl	8000370 <LCD_Wirte_Cmd>
	LCD_Wirte_Cmd(LCD_DISP_ON_CURSOR_BLINK);	
 800035c:	200f      	movs	r0, #15
 800035e:	f000 f807 	bl	8000370 <LCD_Wirte_Cmd>
}
 8000362:	bf00      	nop
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	20000020 	.word	0x20000020
 800036c:	40010800 	.word	0x40010800

08000370 <LCD_Wirte_Cmd>:
 * 			@param [in]					-Cmd Command user will inter to preform specific operation					*
 * 			@retval						-NONE																		*
 * 			Note						-NONE																		*
 ********************************************************************************************************************/
void LCD_Wirte_Cmd (uint8_t Cmd)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
 8000376:	4603      	mov	r3, r0
 8000378:	71fb      	strb	r3, [r7, #7]


#ifdef EIGHT_BIT_MODE
	MCAL_GPIO_Write_PORT(LCD_DATA, Cmd);
 800037a:	79fb      	ldrb	r3, [r7, #7]
 800037c:	4619      	mov	r1, r3
 800037e:	480d      	ldr	r0, [pc, #52]	; (80003b4 <LCD_Wirte_Cmd+0x44>)
 8000380:	f000 fd25 	bl	8000dce <MCAL_GPIO_Write_PORT>
	MCAL_GPIO_Write_PIN(LCD_CTRL, RS_SWITCH, LOW);
 8000384:	2200      	movs	r2, #0
 8000386:	f44f 7180 	mov.w	r1, #256	; 0x100
 800038a:	480a      	ldr	r0, [pc, #40]	; (80003b4 <LCD_Wirte_Cmd+0x44>)
 800038c:	f000 fd08 	bl	8000da0 <MCAL_GPIO_Write_PIN>
	MCAL_GPIO_Write_PIN(LCD_CTRL, RW_SWITCH, LOW);
 8000390:	2200      	movs	r2, #0
 8000392:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000396:	4807      	ldr	r0, [pc, #28]	; (80003b4 <LCD_Wirte_Cmd+0x44>)
 8000398:	f000 fd02 	bl	8000da0 <MCAL_GPIO_Write_PIN>
	_delay_ms(1);
 800039c:	2001      	movs	r0, #1
 800039e:	f7ff ff05 	bl	80001ac <_delay_ms>
	LCD_Enable();
 80003a2:	f7ff feed 	bl	8000180 <LCD_Enable>
#endif
	_delay_ms(2);
 80003a6:	2002      	movs	r0, #2
 80003a8:	f7ff ff00 	bl	80001ac <_delay_ms>
}
 80003ac:	bf00      	nop
 80003ae:	3708      	adds	r7, #8
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	40010800 	.word	0x40010800

080003b8 <Lcd_Write_Char>:
 * 			@retval						-NONE																		*
 * 			Note						-NONE																		*
 *******************************************************************************************************************/

void Lcd_Write_Char(uint8_t Char)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0
 80003be:	4603      	mov	r3, r0
 80003c0:	71fb      	strb	r3, [r7, #7]


#ifdef EIGHT_BIT_MODE
	MCAL_GPIO_Write_PORT(LCD_DATA, Char);
 80003c2:	79fb      	ldrb	r3, [r7, #7]
 80003c4:	4619      	mov	r1, r3
 80003c6:	480c      	ldr	r0, [pc, #48]	; (80003f8 <Lcd_Write_Char+0x40>)
 80003c8:	f000 fd01 	bl	8000dce <MCAL_GPIO_Write_PORT>
	MCAL_GPIO_Write_PIN(LCD_CTRL, RS_SWITCH, HIGH);
 80003cc:	2201      	movs	r2, #1
 80003ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003d2:	4809      	ldr	r0, [pc, #36]	; (80003f8 <Lcd_Write_Char+0x40>)
 80003d4:	f000 fce4 	bl	8000da0 <MCAL_GPIO_Write_PIN>
	MCAL_GPIO_Write_PIN(LCD_CTRL, RW_SWITCH, LOW);
 80003d8:	2200      	movs	r2, #0
 80003da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003de:	4806      	ldr	r0, [pc, #24]	; (80003f8 <Lcd_Write_Char+0x40>)
 80003e0:	f000 fcde 	bl	8000da0 <MCAL_GPIO_Write_PIN>
	_delay_ms(1);
 80003e4:	2001      	movs	r0, #1
 80003e6:	f7ff fee1 	bl	80001ac <_delay_ms>
	LCD_Enable();
 80003ea:	f7ff fec9 	bl	8000180 <LCD_Enable>
#endif
}
 80003ee:	bf00      	nop
 80003f0:	3708      	adds	r7, #8
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	40010800 	.word	0x40010800

080003fc <LCD_Write_String>:
 *			@param [in]					-COL																		*		
 * 			@retval						-NONE																		*
 * 			Note						-NONE																		*
 ********************************************************************************************************************/
void LCD_Write_String( uint8_t* STRING , uint8_t ROW , uint8_t COL)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b084      	sub	sp, #16
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
 8000404:	460b      	mov	r3, r1
 8000406:	70fb      	strb	r3, [r7, #3]
 8000408:	4613      	mov	r3, r2
 800040a:	70bb      	strb	r3, [r7, #2]
	LCD_GO_TO_INDEX(ROW,COL);
 800040c:	78ba      	ldrb	r2, [r7, #2]
 800040e:	78fb      	ldrb	r3, [r7, #3]
 8000410:	4611      	mov	r1, r2
 8000412:	4618      	mov	r0, r3
 8000414:	f000 f851 	bl	80004ba <LCD_GO_TO_INDEX>
	uint8_t index = 0 ;
 8000418:	2300      	movs	r3, #0
 800041a:	73fb      	strb	r3, [r7, #15]
	uint8_t Line = 0 ;
 800041c:	2300      	movs	r3, #0
 800041e:	73bb      	strb	r3, [r7, #14]
	while(STRING[index]!='\0' && ((ROW*16)+(index+COL))<=32 )  // Know if there are empty position in 2 * 16 LCD 
 8000420:	e039      	b.n	8000496 <LCD_Write_String+0x9a>
	{
		if (( (ROW*16)+(index+COL) )<16 ) // Write in First Row 
 8000422:	78fb      	ldrb	r3, [r7, #3]
 8000424:	011a      	lsls	r2, r3, #4
 8000426:	7bf9      	ldrb	r1, [r7, #15]
 8000428:	78bb      	ldrb	r3, [r7, #2]
 800042a:	440b      	add	r3, r1
 800042c:	4413      	add	r3, r2
 800042e:	2b0f      	cmp	r3, #15
 8000430:	dc0a      	bgt.n	8000448 <LCD_Write_String+0x4c>
		{
			Lcd_Write_Char(STRING[index]);
 8000432:	7bfb      	ldrb	r3, [r7, #15]
 8000434:	687a      	ldr	r2, [r7, #4]
 8000436:	4413      	add	r3, r2
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	4618      	mov	r0, r3
 800043c:	f7ff ffbc 	bl	80003b8 <Lcd_Write_Char>
			index++;
 8000440:	7bfb      	ldrb	r3, [r7, #15]
 8000442:	3301      	adds	r3, #1
 8000444:	73fb      	strb	r3, [r7, #15]
 8000446:	e026      	b.n	8000496 <LCD_Write_String+0x9a>
		}
		else if (( (ROW*16)+(index+COL) ) == 16 && Line == 0 ) // IF I REACH END OF ROW0 I WILL MOVE TO ROW1 
 8000448:	78fb      	ldrb	r3, [r7, #3]
 800044a:	011a      	lsls	r2, r3, #4
 800044c:	7bf9      	ldrb	r1, [r7, #15]
 800044e:	78bb      	ldrb	r3, [r7, #2]
 8000450:	440b      	add	r3, r1
 8000452:	4413      	add	r3, r2
 8000454:	2b10      	cmp	r3, #16
 8000456:	d109      	bne.n	800046c <LCD_Write_String+0x70>
 8000458:	7bbb      	ldrb	r3, [r7, #14]
 800045a:	2b00      	cmp	r3, #0
 800045c:	d106      	bne.n	800046c <LCD_Write_String+0x70>
		{
			LCD_GO_TO_INDEX(1,0) ; 
 800045e:	2100      	movs	r1, #0
 8000460:	2001      	movs	r0, #1
 8000462:	f000 f82a 	bl	80004ba <LCD_GO_TO_INDEX>
			Line = 1 ; 
 8000466:	2301      	movs	r3, #1
 8000468:	73bb      	strb	r3, [r7, #14]
 800046a:	e014      	b.n	8000496 <LCD_Write_String+0x9a>
		}
		else if (( (ROW*16)+(index+COL) ) < 32 && Line==1  ) // i will start write in ROW1 till end of Row
 800046c:	78fb      	ldrb	r3, [r7, #3]
 800046e:	011a      	lsls	r2, r3, #4
 8000470:	7bf9      	ldrb	r1, [r7, #15]
 8000472:	78bb      	ldrb	r3, [r7, #2]
 8000474:	440b      	add	r3, r1
 8000476:	4413      	add	r3, r2
 8000478:	2b1f      	cmp	r3, #31
 800047a:	dc0c      	bgt.n	8000496 <LCD_Write_String+0x9a>
 800047c:	7bbb      	ldrb	r3, [r7, #14]
 800047e:	2b01      	cmp	r3, #1
 8000480:	d109      	bne.n	8000496 <LCD_Write_String+0x9a>
		{
			Lcd_Write_Char(STRING[index]);
 8000482:	7bfb      	ldrb	r3, [r7, #15]
 8000484:	687a      	ldr	r2, [r7, #4]
 8000486:	4413      	add	r3, r2
 8000488:	781b      	ldrb	r3, [r3, #0]
 800048a:	4618      	mov	r0, r3
 800048c:	f7ff ff94 	bl	80003b8 <Lcd_Write_Char>
			index++ ;
 8000490:	7bfb      	ldrb	r3, [r7, #15]
 8000492:	3301      	adds	r3, #1
 8000494:	73fb      	strb	r3, [r7, #15]
	while(STRING[index]!='\0' && ((ROW*16)+(index+COL))<=32 )  // Know if there are empty position in 2 * 16 LCD 
 8000496:	7bfb      	ldrb	r3, [r7, #15]
 8000498:	687a      	ldr	r2, [r7, #4]
 800049a:	4413      	add	r3, r2
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d007      	beq.n	80004b2 <LCD_Write_String+0xb6>
 80004a2:	78fb      	ldrb	r3, [r7, #3]
 80004a4:	011a      	lsls	r2, r3, #4
 80004a6:	7bf9      	ldrb	r1, [r7, #15]
 80004a8:	78bb      	ldrb	r3, [r7, #2]
 80004aa:	440b      	add	r3, r1
 80004ac:	4413      	add	r3, r2
 80004ae:	2b20      	cmp	r3, #32
 80004b0:	ddb7      	ble.n	8000422 <LCD_Write_String+0x26>
		}		
	}
}
 80004b2:	bf00      	nop
 80004b4:	3710      	adds	r7, #16
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}

080004ba <LCD_GO_TO_INDEX>:
 * 			@param [in]					-COL																	 	*
 * 			@retval						-NONE																		*
 * 			Note						-NONE																		*
 ********************************************************************************************************************/
void LCD_GO_TO_INDEX(uint8_t ROW , uint8_t COL)
{
 80004ba:	b580      	push	{r7, lr}
 80004bc:	b084      	sub	sp, #16
 80004be:	af00      	add	r7, sp, #0
 80004c0:	4603      	mov	r3, r0
 80004c2:	460a      	mov	r2, r1
 80004c4:	71fb      	strb	r3, [r7, #7]
 80004c6:	4613      	mov	r3, r2
 80004c8:	71bb      	strb	r3, [r7, #6]
	uint8_t Address ; 
	if (ROW<2 && COL <16){
 80004ca:	79fb      	ldrb	r3, [r7, #7]
 80004cc:	2b01      	cmp	r3, #1
 80004ce:	d810      	bhi.n	80004f2 <LCD_GO_TO_INDEX+0x38>
 80004d0:	79bb      	ldrb	r3, [r7, #6]
 80004d2:	2b0f      	cmp	r3, #15
 80004d4:	d80d      	bhi.n	80004f2 <LCD_GO_TO_INDEX+0x38>
		Address = ( ROW * Second_Row_Address ) + COL; // We multiply the row number by the starting address of the second row and add the column value
 80004d6:	79fb      	ldrb	r3, [r7, #7]
 80004d8:	019b      	lsls	r3, r3, #6
 80004da:	b2da      	uxtb	r2, r3
 80004dc:	79bb      	ldrb	r3, [r7, #6]
 80004de:	4413      	add	r3, r2
 80004e0:	73fb      	strb	r3, [r7, #15]
		Address |= (1<<7) ;
 80004e2:	7bfb      	ldrb	r3, [r7, #15]
 80004e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80004e8:	73fb      	strb	r3, [r7, #15]
		//SET_BIT(Address,7);	// To set DDRAM Address we must set bit7 in Address . Address here limit by 7bits becouse has 80 Location
		LCD_Wirte_Cmd(Address);
 80004ea:	7bfb      	ldrb	r3, [r7, #15]
 80004ec:	4618      	mov	r0, r3
 80004ee:	f7ff ff3f 	bl	8000370 <LCD_Wirte_Cmd>
	}
}
 80004f2:	bf00      	nop
 80004f4:	3710      	adds	r7, #16
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
	...

080004fc <Clock_Init>:
#include "Keypad.h"

uint8_t IRQ_Flag = 0 ;

void Clock_Init()
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_EN();
 8000500:	4b0a      	ldr	r3, [pc, #40]	; (800052c <Clock_Init+0x30>)
 8000502:	699b      	ldr	r3, [r3, #24]
 8000504:	4a09      	ldr	r2, [pc, #36]	; (800052c <Clock_Init+0x30>)
 8000506:	f043 0304 	orr.w	r3, r3, #4
 800050a:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 800050c:	4b07      	ldr	r3, [pc, #28]	; (800052c <Clock_Init+0x30>)
 800050e:	699b      	ldr	r3, [r3, #24]
 8000510:	4a06      	ldr	r2, [pc, #24]	; (800052c <Clock_Init+0x30>)
 8000512:	f043 0308 	orr.w	r3, r3, #8
 8000516:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 8000518:	4b04      	ldr	r3, [pc, #16]	; (800052c <Clock_Init+0x30>)
 800051a:	699b      	ldr	r3, [r3, #24]
 800051c:	4a03      	ldr	r2, [pc, #12]	; (800052c <Clock_Init+0x30>)
 800051e:	f043 0301 	orr.w	r3, r3, #1
 8000522:	6193      	str	r3, [r2, #24]
}
 8000524:	bf00      	nop
 8000526:	46bd      	mov	sp, r7
 8000528:	bc80      	pop	{r7}
 800052a:	4770      	bx	lr
 800052c:	40021000 	.word	0x40021000

08000530 <EXTI9_CallBack>:
void EXTI9_CallBack()
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
	IRQ_Flag=1 ;
 8000534:	4b06      	ldr	r3, [pc, #24]	; (8000550 <EXTI9_CallBack+0x20>)
 8000536:	2201      	movs	r2, #1
 8000538:	701a      	strb	r2, [r3, #0]
	LCD_Write_String((uint8_t*)"IRQ EXTI9 Is Happened -\\ ", 0, 0) ;
 800053a:	2200      	movs	r2, #0
 800053c:	2100      	movs	r1, #0
 800053e:	4805      	ldr	r0, [pc, #20]	; (8000554 <EXTI9_CallBack+0x24>)
 8000540:	f7ff ff5c 	bl	80003fc <LCD_Write_String>
	_delay_ms(1000);
 8000544:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000548:	f7ff fe30 	bl	80001ac <_delay_ms>
}
 800054c:	bf00      	nop
 800054e:	bd80      	pop	{r7, pc}
 8000550:	2000001c 	.word	0x2000001c
 8000554:	08000e4c 	.word	0x08000e4c

08000558 <main>:
int main(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b086      	sub	sp, #24
 800055c:	af00      	add	r7, sp, #0
	Clock_Init();
 800055e:	f7ff ffcd 	bl	80004fc <Clock_Init>

	LCD_Init();
 8000562:	f7ff fe3f 	bl	80001e4 <LCD_Init>
	LCD_Clear_Screen();
 8000566:	f7ff fe03 	bl	8000170 <LCD_Clear_Screen>
	EXTI_PinConfig_t EXTI_ConFig ;

	EXTI_ConFig.EXTI_PIN=EXTI9PB9 ;
 800056a:	4a0e      	ldr	r2, [pc, #56]	; (80005a4 <main+0x4c>)
 800056c:	1d3b      	adds	r3, r7, #4
 800056e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000570:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	EXTI_ConFig.Trigger_Case = EXTI_Trigger_Rising ;
 8000574:	2300      	movs	r3, #0
 8000576:	743b      	strb	r3, [r7, #16]
	EXTI_ConFig.P_IRQ_CallBak=EXTI9_CallBack ;
 8000578:	4b0b      	ldr	r3, [pc, #44]	; (80005a8 <main+0x50>)
 800057a:	617b      	str	r3, [r7, #20]
	EXTI_ConFig.IRQ_EN = EXTI_IRQ_Enable ;
 800057c:	2301      	movs	r3, #1
 800057e:	747b      	strb	r3, [r7, #17]
	MCAL_EXTI_GPIO_Init(&EXTI_ConFig);
 8000580:	1d3b      	adds	r3, r7, #4
 8000582:	4618      	mov	r0, r3
 8000584:	f000 f9f6 	bl	8000974 <MCAL_EXTI_GPIO_Init>
	IRQ_Flag = 1;
 8000588:	4b08      	ldr	r3, [pc, #32]	; (80005ac <main+0x54>)
 800058a:	2201      	movs	r2, #1
 800058c:	701a      	strb	r2, [r3, #0]
	while(1)
	{
		if(IRQ_Flag)
 800058e:	4b07      	ldr	r3, [pc, #28]	; (80005ac <main+0x54>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d0fb      	beq.n	800058e <main+0x36>
		{
			LCD_Clear_Screen();
 8000596:	f7ff fdeb 	bl	8000170 <LCD_Clear_Screen>
			IRQ_Flag = 0 ;
 800059a:	4b04      	ldr	r3, [pc, #16]	; (80005ac <main+0x54>)
 800059c:	2200      	movs	r2, #0
 800059e:	701a      	strb	r2, [r3, #0]
		if(IRQ_Flag)
 80005a0:	e7f5      	b.n	800058e <main+0x36>
 80005a2:	bf00      	nop
 80005a4:	08000e68 	.word	0x08000e68
 80005a8:	08000531 	.word	0x08000531
 80005ac:	2000001c 	.word	0x2000001c

080005b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005b0:	480d      	ldr	r0, [pc, #52]	; (80005e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005b2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80005b4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005b8:	480c      	ldr	r0, [pc, #48]	; (80005ec <LoopForever+0x6>)
  ldr r1, =_edata
 80005ba:	490d      	ldr	r1, [pc, #52]	; (80005f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005bc:	4a0d      	ldr	r2, [pc, #52]	; (80005f4 <LoopForever+0xe>)
  movs r3, #0
 80005be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005c0:	e002      	b.n	80005c8 <LoopCopyDataInit>

080005c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005c6:	3304      	adds	r3, #4

080005c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005cc:	d3f9      	bcc.n	80005c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ce:	4a0a      	ldr	r2, [pc, #40]	; (80005f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005d0:	4c0a      	ldr	r4, [pc, #40]	; (80005fc <LoopForever+0x16>)
  movs r3, #0
 80005d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005d4:	e001      	b.n	80005da <LoopFillZerobss>

080005d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005d8:	3204      	adds	r2, #4

080005da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005dc:	d3fb      	bcc.n	80005d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005de:	f000 fc05 	bl	8000dec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005e2:	f7ff ffb9 	bl	8000558 <main>

080005e6 <LoopForever>:

LoopForever:
    b LoopForever
 80005e6:	e7fe      	b.n	80005e6 <LoopForever>
  ldr   r0, =_estack
 80005e8:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80005ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005f0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80005f4:	08000e7c 	.word	0x08000e7c
  ldr r2, =_sbss
 80005f8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80005fc:	20000060 	.word	0x20000060

08000600 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000600:	e7fe      	b.n	8000600 <ADC1_2_IRQHandler>
	...

08000604 <NVIC_Enable>:
 * ======================================================================
 *                                          Generic Functions
 *======================================================================
 */
void NVIC_Enable(uint16_t IRQ)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	4603      	mov	r3, r0
 800060c:	80fb      	strh	r3, [r7, #6]
	switch(IRQ)
 800060e:	88fb      	ldrh	r3, [r7, #6]
 8000610:	2b0f      	cmp	r3, #15
 8000612:	d854      	bhi.n	80006be <NVIC_Enable+0xba>
 8000614:	a201      	add	r2, pc, #4	; (adr r2, 800061c <NVIC_Enable+0x18>)
 8000616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800061a:	bf00      	nop
 800061c:	0800065d 	.word	0x0800065d
 8000620:	0800066b 	.word	0x0800066b
 8000624:	08000679 	.word	0x08000679
 8000628:	08000687 	.word	0x08000687
 800062c:	08000695 	.word	0x08000695
 8000630:	080006a3 	.word	0x080006a3
 8000634:	080006a3 	.word	0x080006a3
 8000638:	080006a3 	.word	0x080006a3
 800063c:	080006a3 	.word	0x080006a3
 8000640:	080006a3 	.word	0x080006a3
 8000644:	080006b1 	.word	0x080006b1
 8000648:	080006b1 	.word	0x080006b1
 800064c:	080006b1 	.word	0x080006b1
 8000650:	080006b1 	.word	0x080006b1
 8000654:	080006b1 	.word	0x080006b1
 8000658:	080006b1 	.word	0x080006b1
	{
	case EXTI0 :
		NVIC_IRQ6_EXTI0_Enable  ;
 800065c:	4b1a      	ldr	r3, [pc, #104]	; (80006c8 <NVIC_Enable+0xc4>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a19      	ldr	r2, [pc, #100]	; (80006c8 <NVIC_Enable+0xc4>)
 8000662:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000666:	6013      	str	r3, [r2, #0]
		break ;
 8000668:	e029      	b.n	80006be <NVIC_Enable+0xba>
	case EXTI1 :
		NVIC_IRQ7_EXTI1_Enable ;
 800066a:	4b17      	ldr	r3, [pc, #92]	; (80006c8 <NVIC_Enable+0xc4>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4a16      	ldr	r2, [pc, #88]	; (80006c8 <NVIC_Enable+0xc4>)
 8000670:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000674:	6013      	str	r3, [r2, #0]
		break ;
 8000676:	e022      	b.n	80006be <NVIC_Enable+0xba>
	case EXTI2 :
		NVIC_IRQ8_EXTI2_Enable ;
 8000678:	4b13      	ldr	r3, [pc, #76]	; (80006c8 <NVIC_Enable+0xc4>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a12      	ldr	r2, [pc, #72]	; (80006c8 <NVIC_Enable+0xc4>)
 800067e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000682:	6013      	str	r3, [r2, #0]
		break ;
 8000684:	e01b      	b.n	80006be <NVIC_Enable+0xba>
	case EXTI3 :
		NVIC_IRQ9_EXTI3_Enable ;
 8000686:	4b10      	ldr	r3, [pc, #64]	; (80006c8 <NVIC_Enable+0xc4>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4a0f      	ldr	r2, [pc, #60]	; (80006c8 <NVIC_Enable+0xc4>)
 800068c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000690:	6013      	str	r3, [r2, #0]
		break ;
 8000692:	e014      	b.n	80006be <NVIC_Enable+0xba>
	case EXTI4 :
		NVIC_IRQ10_EXTI4_Enable ;
 8000694:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <NVIC_Enable+0xc4>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a0b      	ldr	r2, [pc, #44]	; (80006c8 <NVIC_Enable+0xc4>)
 800069a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800069e:	6013      	str	r3, [r2, #0]
		break ;
 80006a0:	e00d      	b.n	80006be <NVIC_Enable+0xba>
	case EXTI5 :
	case EXTI6 :
	case EXTI7 :
	case EXTI8 :
	case EXTI9 :
		NVIC_IRQ23_EXTI5_9_Enable ;
 80006a2:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <NVIC_Enable+0xc4>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4a08      	ldr	r2, [pc, #32]	; (80006c8 <NVIC_Enable+0xc4>)
 80006a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80006ac:	6013      	str	r3, [r2, #0]
		break ;
 80006ae:	e006      	b.n	80006be <NVIC_Enable+0xba>
	case EXTI11 :
	case EXTI12 :
	case EXTI13 :
	case EXTI14 :
	case EXTI15 :
		NVIC_IRQ40_EXTI10_15_Enable  ;
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <NVIC_Enable+0xc8>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a05      	ldr	r2, [pc, #20]	; (80006cc <NVIC_Enable+0xc8>)
 80006b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006ba:	6013      	str	r3, [r2, #0]
		break ;
 80006bc:	bf00      	nop
	}
}
 80006be:	bf00      	nop
 80006c0:	370c      	adds	r7, #12
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc80      	pop	{r7}
 80006c6:	4770      	bx	lr
 80006c8:	e000e100 	.word	0xe000e100
 80006cc:	e000e104 	.word	0xe000e104

080006d0 <NVIC_Disable>:

void NVIC_Disable(uint16_t IRQ)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	80fb      	strh	r3, [r7, #6]
	switch(IRQ)
 80006da:	88fb      	ldrh	r3, [r7, #6]
 80006dc:	2b0f      	cmp	r3, #15
 80006de:	d854      	bhi.n	800078a <NVIC_Disable+0xba>
 80006e0:	a201      	add	r2, pc, #4	; (adr r2, 80006e8 <NVIC_Disable+0x18>)
 80006e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006e6:	bf00      	nop
 80006e8:	08000729 	.word	0x08000729
 80006ec:	08000737 	.word	0x08000737
 80006f0:	08000745 	.word	0x08000745
 80006f4:	08000753 	.word	0x08000753
 80006f8:	08000761 	.word	0x08000761
 80006fc:	0800076f 	.word	0x0800076f
 8000700:	0800076f 	.word	0x0800076f
 8000704:	0800076f 	.word	0x0800076f
 8000708:	0800076f 	.word	0x0800076f
 800070c:	0800076f 	.word	0x0800076f
 8000710:	0800077d 	.word	0x0800077d
 8000714:	0800077d 	.word	0x0800077d
 8000718:	0800077d 	.word	0x0800077d
 800071c:	0800077d 	.word	0x0800077d
 8000720:	0800077d 	.word	0x0800077d
 8000724:	0800077d 	.word	0x0800077d
	{
	case EXTI0 :
		NVIC_IRQ6_EXTI0_Disable  ;
 8000728:	4b1a      	ldr	r3, [pc, #104]	; (8000794 <NVIC_Disable+0xc4>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a19      	ldr	r2, [pc, #100]	; (8000794 <NVIC_Disable+0xc4>)
 800072e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000732:	6013      	str	r3, [r2, #0]
		break ;
 8000734:	e029      	b.n	800078a <NVIC_Disable+0xba>
	case EXTI1 :
		NVIC_IRQ7_EXTI1_Disable ;
 8000736:	4b17      	ldr	r3, [pc, #92]	; (8000794 <NVIC_Disable+0xc4>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4a16      	ldr	r2, [pc, #88]	; (8000794 <NVIC_Disable+0xc4>)
 800073c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000740:	6013      	str	r3, [r2, #0]
		break ;
 8000742:	e022      	b.n	800078a <NVIC_Disable+0xba>
	case EXTI2 :
		NVIC_IRQ8_EXTI2_Disable ;
 8000744:	4b13      	ldr	r3, [pc, #76]	; (8000794 <NVIC_Disable+0xc4>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a12      	ldr	r2, [pc, #72]	; (8000794 <NVIC_Disable+0xc4>)
 800074a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800074e:	6013      	str	r3, [r2, #0]
		break ;
 8000750:	e01b      	b.n	800078a <NVIC_Disable+0xba>
	case EXTI3 :
		NVIC_IRQ9_EXTI3_Disable ;
 8000752:	4b10      	ldr	r3, [pc, #64]	; (8000794 <NVIC_Disable+0xc4>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4a0f      	ldr	r2, [pc, #60]	; (8000794 <NVIC_Disable+0xc4>)
 8000758:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800075c:	6013      	str	r3, [r2, #0]
		break ;
 800075e:	e014      	b.n	800078a <NVIC_Disable+0xba>
	case EXTI4 :
		NVIC_IRQ10_EXTI4_Disable ;
 8000760:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <NVIC_Disable+0xc4>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a0b      	ldr	r2, [pc, #44]	; (8000794 <NVIC_Disable+0xc4>)
 8000766:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800076a:	6013      	str	r3, [r2, #0]
		break ;
 800076c:	e00d      	b.n	800078a <NVIC_Disable+0xba>
	case EXTI5 :
	case EXTI6 :
	case EXTI7 :
	case EXTI8 :
	case EXTI9 :
		NVIC_IRQ23_EXTI5_9_Disable ;
 800076e:	4b09      	ldr	r3, [pc, #36]	; (8000794 <NVIC_Disable+0xc4>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4a08      	ldr	r2, [pc, #32]	; (8000794 <NVIC_Disable+0xc4>)
 8000774:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000778:	6013      	str	r3, [r2, #0]
		break ;
 800077a:	e006      	b.n	800078a <NVIC_Disable+0xba>
	case EXTI11 :
	case EXTI12 :
	case EXTI13 :
	case EXTI14 :
	case EXTI15 :
		NVIC_IRQ40_EXTI10_15_Disable  ;
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <NVIC_Disable+0xc8>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a05      	ldr	r2, [pc, #20]	; (8000798 <NVIC_Disable+0xc8>)
 8000782:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000786:	6013      	str	r3, [r2, #0]
		break ;
 8000788:	bf00      	nop
	}
}
 800078a:	bf00      	nop
 800078c:	370c      	adds	r7, #12
 800078e:	46bd      	mov	sp, r7
 8000790:	bc80      	pop	{r7}
 8000792:	4770      	bx	lr
 8000794:	e000e180 	.word	0xe000e180
 8000798:	e000e184 	.word	0xe000e184

0800079c <Update_EXTI>:
 * 			@brief 						-EXTI_Config EXTI set @ref EXTI_Define @ref EXTI_Trigger																										*
 * 			@retval						- None																																									*
 * 			Note						-NONE																																	*
 ********************************************************************************************************************/
void Update_EXTI (EXTI_PinConfig_t* EXTI_Config)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
	// 1- configure GPiO TO be AFIO Input -> Floating input
	GPIO_PinCongif_t PinConfig ;
	PinConfig.GPIO_PinNumber=EXTI_Config->EXTI_PIN.GPIO_PIN ;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	891b      	ldrh	r3, [r3, #8]
 80007a8:	813b      	strh	r3, [r7, #8]
	PinConfig.GPIO_MODE = GPIO_Mode_INPUT_FLO ;
 80007aa:	2301      	movs	r3, #1
 80007ac:	72bb      	strb	r3, [r7, #10]
	MCAL_GPIO_INIT((GPIO_Typedef *)EXTI_Config->EXTI_PIN.GPIO_PORT, &PinConfig);
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	685b      	ldr	r3, [r3, #4]
 80007b2:	f107 0208 	add.w	r2, r7, #8
 80007b6:	4611      	mov	r1, r2
 80007b8:	4618      	mov	r0, r3
 80007ba:	f000 fa6d 	bl	8000c98 <MCAL_GPIO_INIT>

	// ==================================================

	// Update AFiO to Route Between EXTI Line With PORT A , B , C , D

	uint8_t AFIO_EXTICR_Index = EXTI_Config->EXTI_PIN.EXTI_InputLineNumber/4 ; // Git AFIO_EXTI[x] : x = 0 1 2 3
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	881b      	ldrh	r3, [r3, #0]
 80007c2:	089b      	lsrs	r3, r3, #2
 80007c4:	b29b      	uxth	r3, r3
 80007c6:	73fb      	strb	r3, [r7, #15]
	uint8_t	AFIO_EXTICR_Position = (EXTI_Config->EXTI_PIN.EXTI_InputLineNumber%4)*4;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	881b      	ldrh	r3, [r3, #0]
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	f003 0303 	and.w	r3, r3, #3
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	009b      	lsls	r3, r3, #2
 80007d6:	73bb      	strb	r3, [r7, #14]
	//	These bits are written by software to select the source input for EXTIx external interrupt.
	//	0000: PA[x] pin
	//	0001: PB[x] pin
	//	0010: PC[x] pin
	//	0011: PD[x] pin
	AFIO->EXTICR[AFIO_EXTICR_Index] &= ~(0xF<<AFIO_EXTICR_Position);
 80007d8:	4a5f      	ldr	r2, [pc, #380]	; (8000958 <Update_EXTI+0x1bc>)
 80007da:	7bfb      	ldrb	r3, [r7, #15]
 80007dc:	3302      	adds	r3, #2
 80007de:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007e2:	7bbb      	ldrb	r3, [r7, #14]
 80007e4:	210f      	movs	r1, #15
 80007e6:	fa01 f303 	lsl.w	r3, r1, r3
 80007ea:	43db      	mvns	r3, r3
 80007ec:	4618      	mov	r0, r3
 80007ee:	495a      	ldr	r1, [pc, #360]	; (8000958 <Update_EXTI+0x1bc>)
 80007f0:	7bfb      	ldrb	r3, [r7, #15]
 80007f2:	4002      	ands	r2, r0
 80007f4:	3302      	adds	r3, #2
 80007f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	AFIO->EXTICR[AFIO_EXTICR_Index] |= ((AFIO_GPIO_EXTI_Mapping((GPIO_Typedef	*)EXTI_Config->EXTI_PIN.GPIO_PORT)&0xf)<<AFIO_EXTICR_Position);
 80007fa:	4a57      	ldr	r2, [pc, #348]	; (8000958 <Update_EXTI+0x1bc>)
 80007fc:	7bfb      	ldrb	r3, [r7, #15]
 80007fe:	3302      	adds	r3, #2
 8000800:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	685b      	ldr	r3, [r3, #4]
 8000808:	4954      	ldr	r1, [pc, #336]	; (800095c <Update_EXTI+0x1c0>)
 800080a:	428b      	cmp	r3, r1
 800080c:	d016      	beq.n	800083c <Update_EXTI+0xa0>
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	685b      	ldr	r3, [r3, #4]
 8000812:	4953      	ldr	r1, [pc, #332]	; (8000960 <Update_EXTI+0x1c4>)
 8000814:	428b      	cmp	r3, r1
 8000816:	d00f      	beq.n	8000838 <Update_EXTI+0x9c>
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	685b      	ldr	r3, [r3, #4]
 800081c:	4951      	ldr	r1, [pc, #324]	; (8000964 <Update_EXTI+0x1c8>)
 800081e:	428b      	cmp	r3, r1
 8000820:	d008      	beq.n	8000834 <Update_EXTI+0x98>
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	685b      	ldr	r3, [r3, #4]
 8000826:	4950      	ldr	r1, [pc, #320]	; (8000968 <Update_EXTI+0x1cc>)
 8000828:	428b      	cmp	r3, r1
 800082a:	d101      	bne.n	8000830 <Update_EXTI+0x94>
 800082c:	2303      	movs	r3, #3
 800082e:	e006      	b.n	800083e <Update_EXTI+0xa2>
 8000830:	2300      	movs	r3, #0
 8000832:	e004      	b.n	800083e <Update_EXTI+0xa2>
 8000834:	2302      	movs	r3, #2
 8000836:	e002      	b.n	800083e <Update_EXTI+0xa2>
 8000838:	2301      	movs	r3, #1
 800083a:	e000      	b.n	800083e <Update_EXTI+0xa2>
 800083c:	2300      	movs	r3, #0
 800083e:	7bb9      	ldrb	r1, [r7, #14]
 8000840:	408b      	lsls	r3, r1
 8000842:	4618      	mov	r0, r3
 8000844:	4944      	ldr	r1, [pc, #272]	; (8000958 <Update_EXTI+0x1bc>)
 8000846:	7bfb      	ldrb	r3, [r7, #15]
 8000848:	4302      	orrs	r2, r0
 800084a:	3302      	adds	r3, #2
 800084c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//==================================================

	// Update Resing and Falling Edge
	//clear the corresponding bit

	EXTI->RTSR &=~ (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000850:	4b46      	ldr	r3, [pc, #280]	; (800096c <Update_EXTI+0x1d0>)
 8000852:	689b      	ldr	r3, [r3, #8]
 8000854:	687a      	ldr	r2, [r7, #4]
 8000856:	8812      	ldrh	r2, [r2, #0]
 8000858:	4611      	mov	r1, r2
 800085a:	2201      	movs	r2, #1
 800085c:	408a      	lsls	r2, r1
 800085e:	43d2      	mvns	r2, r2
 8000860:	4611      	mov	r1, r2
 8000862:	4a42      	ldr	r2, [pc, #264]	; (800096c <Update_EXTI+0x1d0>)
 8000864:	400b      	ands	r3, r1
 8000866:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &=~ (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000868:	4b40      	ldr	r3, [pc, #256]	; (800096c <Update_EXTI+0x1d0>)
 800086a:	68db      	ldr	r3, [r3, #12]
 800086c:	687a      	ldr	r2, [r7, #4]
 800086e:	8812      	ldrh	r2, [r2, #0]
 8000870:	4611      	mov	r1, r2
 8000872:	2201      	movs	r2, #1
 8000874:	408a      	lsls	r2, r1
 8000876:	43d2      	mvns	r2, r2
 8000878:	4611      	mov	r1, r2
 800087a:	4a3c      	ldr	r2, [pc, #240]	; (800096c <Update_EXTI+0x1d0>)
 800087c:	400b      	ands	r3, r1
 800087e:	60d3      	str	r3, [r2, #12]

	if (EXTI_Config->Trigger_Case == EXTI_Trigger_Rising)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	7b1b      	ldrb	r3, [r3, #12]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d10b      	bne.n	80008a0 <Update_EXTI+0x104>
	{
		EXTI->RTSR |= (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000888:	4b38      	ldr	r3, [pc, #224]	; (800096c <Update_EXTI+0x1d0>)
 800088a:	689b      	ldr	r3, [r3, #8]
 800088c:	687a      	ldr	r2, [r7, #4]
 800088e:	8812      	ldrh	r2, [r2, #0]
 8000890:	4611      	mov	r1, r2
 8000892:	2201      	movs	r2, #1
 8000894:	408a      	lsls	r2, r1
 8000896:	4611      	mov	r1, r2
 8000898:	4a34      	ldr	r2, [pc, #208]	; (800096c <Update_EXTI+0x1d0>)
 800089a:	430b      	orrs	r3, r1
 800089c:	6093      	str	r3, [r2, #8]
 800089e:	e029      	b.n	80008f4 <Update_EXTI+0x158>
	}
	else if (EXTI_Config->Trigger_Case == EXTI_Trigger_Falling)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	7b1b      	ldrb	r3, [r3, #12]
 80008a4:	2b01      	cmp	r3, #1
 80008a6:	d10b      	bne.n	80008c0 <Update_EXTI+0x124>
	{
		EXTI->FTSR |= (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80008a8:	4b30      	ldr	r3, [pc, #192]	; (800096c <Update_EXTI+0x1d0>)
 80008aa:	68db      	ldr	r3, [r3, #12]
 80008ac:	687a      	ldr	r2, [r7, #4]
 80008ae:	8812      	ldrh	r2, [r2, #0]
 80008b0:	4611      	mov	r1, r2
 80008b2:	2201      	movs	r2, #1
 80008b4:	408a      	lsls	r2, r1
 80008b6:	4611      	mov	r1, r2
 80008b8:	4a2c      	ldr	r2, [pc, #176]	; (800096c <Update_EXTI+0x1d0>)
 80008ba:	430b      	orrs	r3, r1
 80008bc:	60d3      	str	r3, [r2, #12]
 80008be:	e019      	b.n	80008f4 <Update_EXTI+0x158>
	}
	else if (EXTI_Config->Trigger_Case == EXTI_Trigger_RisingAnd_Falling)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	7b1b      	ldrb	r3, [r3, #12]
 80008c4:	2b02      	cmp	r3, #2
 80008c6:	d115      	bne.n	80008f4 <Update_EXTI+0x158>
	{
		EXTI->RTSR |= (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80008c8:	4b28      	ldr	r3, [pc, #160]	; (800096c <Update_EXTI+0x1d0>)
 80008ca:	689b      	ldr	r3, [r3, #8]
 80008cc:	687a      	ldr	r2, [r7, #4]
 80008ce:	8812      	ldrh	r2, [r2, #0]
 80008d0:	4611      	mov	r1, r2
 80008d2:	2201      	movs	r2, #1
 80008d4:	408a      	lsls	r2, r1
 80008d6:	4611      	mov	r1, r2
 80008d8:	4a24      	ldr	r2, [pc, #144]	; (800096c <Update_EXTI+0x1d0>)
 80008da:	430b      	orrs	r3, r1
 80008dc:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80008de:	4b23      	ldr	r3, [pc, #140]	; (800096c <Update_EXTI+0x1d0>)
 80008e0:	68db      	ldr	r3, [r3, #12]
 80008e2:	687a      	ldr	r2, [r7, #4]
 80008e4:	8812      	ldrh	r2, [r2, #0]
 80008e6:	4611      	mov	r1, r2
 80008e8:	2201      	movs	r2, #1
 80008ea:	408a      	lsls	r2, r1
 80008ec:	4611      	mov	r1, r2
 80008ee:	4a1f      	ldr	r2, [pc, #124]	; (800096c <Update_EXTI+0x1d0>)
 80008f0:	430b      	orrs	r3, r1
 80008f2:	60d3      	str	r3, [r2, #12]
	}

	// Set Callbak
	GP_IRQ_CallBack[EXTI_Config->EXTI_PIN.EXTI_InputLineNumber] = EXTI_Config->P_IRQ_CallBak ;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	881b      	ldrh	r3, [r3, #0]
 80008f8:	4619      	mov	r1, r3
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	691b      	ldr	r3, [r3, #16]
 80008fe:	4a1c      	ldr	r2, [pc, #112]	; (8000970 <Update_EXTI+0x1d4>)
 8000900:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	if(EXTI_Config->IRQ_EN==EXTI_IRQ_Enable)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	7b5b      	ldrb	r3, [r3, #13]
 8000908:	2b01      	cmp	r3, #1
 800090a:	d110      	bne.n	800092e <Update_EXTI+0x192>
	{
		EXTI->IMR |= (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 800090c:	4b17      	ldr	r3, [pc, #92]	; (800096c <Update_EXTI+0x1d0>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	687a      	ldr	r2, [r7, #4]
 8000912:	8812      	ldrh	r2, [r2, #0]
 8000914:	4611      	mov	r1, r2
 8000916:	2201      	movs	r2, #1
 8000918:	408a      	lsls	r2, r1
 800091a:	4611      	mov	r1, r2
 800091c:	4a13      	ldr	r2, [pc, #76]	; (800096c <Update_EXTI+0x1d0>)
 800091e:	430b      	orrs	r3, r1
 8000920:	6013      	str	r3, [r2, #0]
		NVIC_Enable(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	881b      	ldrh	r3, [r3, #0]
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff fe6c 	bl	8000604 <NVIC_Enable>
	{
		EXTI->IMR &=~ (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
		NVIC_Disable(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
	}

}
 800092c:	e010      	b.n	8000950 <Update_EXTI+0x1b4>
		EXTI->IMR &=~ (1<<EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 800092e:	4b0f      	ldr	r3, [pc, #60]	; (800096c <Update_EXTI+0x1d0>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	687a      	ldr	r2, [r7, #4]
 8000934:	8812      	ldrh	r2, [r2, #0]
 8000936:	4611      	mov	r1, r2
 8000938:	2201      	movs	r2, #1
 800093a:	408a      	lsls	r2, r1
 800093c:	43d2      	mvns	r2, r2
 800093e:	4611      	mov	r1, r2
 8000940:	4a0a      	ldr	r2, [pc, #40]	; (800096c <Update_EXTI+0x1d0>)
 8000942:	400b      	ands	r3, r1
 8000944:	6013      	str	r3, [r2, #0]
		NVIC_Disable(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	881b      	ldrh	r3, [r3, #0]
 800094a:	4618      	mov	r0, r3
 800094c:	f7ff fec0 	bl	80006d0 <NVIC_Disable>
}
 8000950:	bf00      	nop
 8000952:	3710      	adds	r7, #16
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40010000 	.word	0x40010000
 800095c:	40010800 	.word	0x40010800
 8000960:	40010c00 	.word	0x40010c00
 8000964:	40011000 	.word	0x40011000
 8000968:	40011400 	.word	0x40011400
 800096c:	40010400 	.word	0x40010400
 8000970:	20000024 	.word	0x20000024

08000974 <MCAL_EXTI_GPIO_Init>:
 * @retval           -none
 * Note              -it is Mandatory to Enable RCC Clock for AFIO and the corresponding GPIO
 * =================================================================
 */
void MCAL_EXTI_GPIO_Init(EXTI_PinConfig_t* EXTI_Config)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
	Update_EXTI(EXTI_Config);
 800097c:	6878      	ldr	r0, [r7, #4]
 800097e:	f7ff ff0d 	bl	800079c <Update_EXTI>
}
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
	...

0800098c <EXTI0_IRQHandler>:
////**=====================     ISR FUNCTIONS      =============================
////**==========================================================================
////**==========================================================================

void EXTI0_IRQHandler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
	// must clear PR By Writing one on Bit
	EXTI->PR |= (1<<EXTI0);
 8000990:	4b05      	ldr	r3, [pc, #20]	; (80009a8 <EXTI0_IRQHandler+0x1c>)
 8000992:	695b      	ldr	r3, [r3, #20]
 8000994:	4a04      	ldr	r2, [pc, #16]	; (80009a8 <EXTI0_IRQHandler+0x1c>)
 8000996:	f043 0301 	orr.w	r3, r3, #1
 800099a:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[EXTI0]();
 800099c:	4b03      	ldr	r3, [pc, #12]	; (80009ac <EXTI0_IRQHandler+0x20>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4798      	blx	r3
}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40010400 	.word	0x40010400
 80009ac:	20000024 	.word	0x20000024

080009b0 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
	// must clear PR By Writing one on Bit
	EXTI->PR |= (1<<EXTI1);
 80009b4:	4b05      	ldr	r3, [pc, #20]	; (80009cc <EXTI1_IRQHandler+0x1c>)
 80009b6:	695b      	ldr	r3, [r3, #20]
 80009b8:	4a04      	ldr	r2, [pc, #16]	; (80009cc <EXTI1_IRQHandler+0x1c>)
 80009ba:	f043 0302 	orr.w	r3, r3, #2
 80009be:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[EXTI1]();
 80009c0:	4b03      	ldr	r3, [pc, #12]	; (80009d0 <EXTI1_IRQHandler+0x20>)
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	4798      	blx	r3

}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40010400 	.word	0x40010400
 80009d0:	20000024 	.word	0x20000024

080009d4 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
	// must clear PR By Writing one on Bit
	EXTI->PR |= (1<<EXTI2);
 80009d8:	4b05      	ldr	r3, [pc, #20]	; (80009f0 <EXTI2_IRQHandler+0x1c>)
 80009da:	695b      	ldr	r3, [r3, #20]
 80009dc:	4a04      	ldr	r2, [pc, #16]	; (80009f0 <EXTI2_IRQHandler+0x1c>)
 80009de:	f043 0304 	orr.w	r3, r3, #4
 80009e2:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[EXTI2]();
 80009e4:	4b03      	ldr	r3, [pc, #12]	; (80009f4 <EXTI2_IRQHandler+0x20>)
 80009e6:	689b      	ldr	r3, [r3, #8]
 80009e8:	4798      	blx	r3
}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40010400 	.word	0x40010400
 80009f4:	20000024 	.word	0x20000024

080009f8 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
	// must clear PR By Writing one on Bit
	EXTI->PR |= (1<<EXTI3);
 80009fc:	4b05      	ldr	r3, [pc, #20]	; (8000a14 <EXTI3_IRQHandler+0x1c>)
 80009fe:	695b      	ldr	r3, [r3, #20]
 8000a00:	4a04      	ldr	r2, [pc, #16]	; (8000a14 <EXTI3_IRQHandler+0x1c>)
 8000a02:	f043 0308 	orr.w	r3, r3, #8
 8000a06:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[EXTI13]();
 8000a08:	4b03      	ldr	r3, [pc, #12]	; (8000a18 <EXTI3_IRQHandler+0x20>)
 8000a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a0c:	4798      	blx	r3
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40010400 	.word	0x40010400
 8000a18:	20000024 	.word	0x20000024

08000a1c <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
	// must clear PR By Writing one on Bit
	EXTI->PR |= (1<<EXTI4);
 8000a20:	4b05      	ldr	r3, [pc, #20]	; (8000a38 <EXTI4_IRQHandler+0x1c>)
 8000a22:	695b      	ldr	r3, [r3, #20]
 8000a24:	4a04      	ldr	r2, [pc, #16]	; (8000a38 <EXTI4_IRQHandler+0x1c>)
 8000a26:	f043 0310 	orr.w	r3, r3, #16
 8000a2a:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[EXTI4]();
 8000a2c:	4b03      	ldr	r3, [pc, #12]	; (8000a3c <EXTI4_IRQHandler+0x20>)
 8000a2e:	691b      	ldr	r3, [r3, #16]
 8000a30:	4798      	blx	r3
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40010400 	.word	0x40010400
 8000a3c:	20000024 	.word	0x20000024

08000a40 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
	// must clear PR By Writing one on Bit
	if (EXTI->PR & 1<<EXTI5){EXTI->PR |= 1<<EXTI5;GP_IRQ_CallBack[EXTI5]();}
 8000a44:	4b26      	ldr	r3, [pc, #152]	; (8000ae0 <EXTI9_5_IRQHandler+0xa0>)
 8000a46:	695b      	ldr	r3, [r3, #20]
 8000a48:	f003 0320 	and.w	r3, r3, #32
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d008      	beq.n	8000a62 <EXTI9_5_IRQHandler+0x22>
 8000a50:	4b23      	ldr	r3, [pc, #140]	; (8000ae0 <EXTI9_5_IRQHandler+0xa0>)
 8000a52:	695b      	ldr	r3, [r3, #20]
 8000a54:	4a22      	ldr	r2, [pc, #136]	; (8000ae0 <EXTI9_5_IRQHandler+0xa0>)
 8000a56:	f043 0320 	orr.w	r3, r3, #32
 8000a5a:	6153      	str	r3, [r2, #20]
 8000a5c:	4b21      	ldr	r3, [pc, #132]	; (8000ae4 <EXTI9_5_IRQHandler+0xa4>)
 8000a5e:	695b      	ldr	r3, [r3, #20]
 8000a60:	4798      	blx	r3
	if (EXTI->PR & 1<<EXTI6){EXTI->PR |= 1<<EXTI6;GP_IRQ_CallBack[EXTI6]();}
 8000a62:	4b1f      	ldr	r3, [pc, #124]	; (8000ae0 <EXTI9_5_IRQHandler+0xa0>)
 8000a64:	695b      	ldr	r3, [r3, #20]
 8000a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d008      	beq.n	8000a80 <EXTI9_5_IRQHandler+0x40>
 8000a6e:	4b1c      	ldr	r3, [pc, #112]	; (8000ae0 <EXTI9_5_IRQHandler+0xa0>)
 8000a70:	695b      	ldr	r3, [r3, #20]
 8000a72:	4a1b      	ldr	r2, [pc, #108]	; (8000ae0 <EXTI9_5_IRQHandler+0xa0>)
 8000a74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a78:	6153      	str	r3, [r2, #20]
 8000a7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ae4 <EXTI9_5_IRQHandler+0xa4>)
 8000a7c:	699b      	ldr	r3, [r3, #24]
 8000a7e:	4798      	blx	r3
	if (EXTI->PR & 1<<EXTI7){EXTI->PR |= 1<<EXTI7;GP_IRQ_CallBack[EXTI7]();}
 8000a80:	4b17      	ldr	r3, [pc, #92]	; (8000ae0 <EXTI9_5_IRQHandler+0xa0>)
 8000a82:	695b      	ldr	r3, [r3, #20]
 8000a84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d008      	beq.n	8000a9e <EXTI9_5_IRQHandler+0x5e>
 8000a8c:	4b14      	ldr	r3, [pc, #80]	; (8000ae0 <EXTI9_5_IRQHandler+0xa0>)
 8000a8e:	695b      	ldr	r3, [r3, #20]
 8000a90:	4a13      	ldr	r2, [pc, #76]	; (8000ae0 <EXTI9_5_IRQHandler+0xa0>)
 8000a92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a96:	6153      	str	r3, [r2, #20]
 8000a98:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <EXTI9_5_IRQHandler+0xa4>)
 8000a9a:	69db      	ldr	r3, [r3, #28]
 8000a9c:	4798      	blx	r3
	if (EXTI->PR & 1<<EXTI8){EXTI->PR |= 1<<EXTI8;GP_IRQ_CallBack[EXTI8]();}
 8000a9e:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <EXTI9_5_IRQHandler+0xa0>)
 8000aa0:	695b      	ldr	r3, [r3, #20]
 8000aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d008      	beq.n	8000abc <EXTI9_5_IRQHandler+0x7c>
 8000aaa:	4b0d      	ldr	r3, [pc, #52]	; (8000ae0 <EXTI9_5_IRQHandler+0xa0>)
 8000aac:	695b      	ldr	r3, [r3, #20]
 8000aae:	4a0c      	ldr	r2, [pc, #48]	; (8000ae0 <EXTI9_5_IRQHandler+0xa0>)
 8000ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ab4:	6153      	str	r3, [r2, #20]
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <EXTI9_5_IRQHandler+0xa4>)
 8000ab8:	6a1b      	ldr	r3, [r3, #32]
 8000aba:	4798      	blx	r3
	if (EXTI->PR & 1<<EXTI9){EXTI->PR |= 1<<EXTI9;GP_IRQ_CallBack[EXTI9]();}
 8000abc:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <EXTI9_5_IRQHandler+0xa0>)
 8000abe:	695b      	ldr	r3, [r3, #20]
 8000ac0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d008      	beq.n	8000ada <EXTI9_5_IRQHandler+0x9a>
 8000ac8:	4b05      	ldr	r3, [pc, #20]	; (8000ae0 <EXTI9_5_IRQHandler+0xa0>)
 8000aca:	695b      	ldr	r3, [r3, #20]
 8000acc:	4a04      	ldr	r2, [pc, #16]	; (8000ae0 <EXTI9_5_IRQHandler+0xa0>)
 8000ace:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ad2:	6153      	str	r3, [r2, #20]
 8000ad4:	4b03      	ldr	r3, [pc, #12]	; (8000ae4 <EXTI9_5_IRQHandler+0xa4>)
 8000ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ad8:	4798      	blx	r3
}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40010400 	.word	0x40010400
 8000ae4:	20000024 	.word	0x20000024

08000ae8 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
	// must clear PR By Writing one on Bit
	if (EXTI->PR & 1<<EXTI10){EXTI->PR |= 1<<EXTI10;GP_IRQ_CallBack[EXTI10]();}
 8000aec:	4b2d      	ldr	r3, [pc, #180]	; (8000ba4 <EXTI15_10_IRQHandler+0xbc>)
 8000aee:	695b      	ldr	r3, [r3, #20]
 8000af0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d008      	beq.n	8000b0a <EXTI15_10_IRQHandler+0x22>
 8000af8:	4b2a      	ldr	r3, [pc, #168]	; (8000ba4 <EXTI15_10_IRQHandler+0xbc>)
 8000afa:	695b      	ldr	r3, [r3, #20]
 8000afc:	4a29      	ldr	r2, [pc, #164]	; (8000ba4 <EXTI15_10_IRQHandler+0xbc>)
 8000afe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b02:	6153      	str	r3, [r2, #20]
 8000b04:	4b28      	ldr	r3, [pc, #160]	; (8000ba8 <EXTI15_10_IRQHandler+0xc0>)
 8000b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b08:	4798      	blx	r3
	if (EXTI->PR & 1<<EXTI11){EXTI->PR |= 1<<EXTI11;GP_IRQ_CallBack[EXTI11]();}
 8000b0a:	4b26      	ldr	r3, [pc, #152]	; (8000ba4 <EXTI15_10_IRQHandler+0xbc>)
 8000b0c:	695b      	ldr	r3, [r3, #20]
 8000b0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d008      	beq.n	8000b28 <EXTI15_10_IRQHandler+0x40>
 8000b16:	4b23      	ldr	r3, [pc, #140]	; (8000ba4 <EXTI15_10_IRQHandler+0xbc>)
 8000b18:	695b      	ldr	r3, [r3, #20]
 8000b1a:	4a22      	ldr	r2, [pc, #136]	; (8000ba4 <EXTI15_10_IRQHandler+0xbc>)
 8000b1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b20:	6153      	str	r3, [r2, #20]
 8000b22:	4b21      	ldr	r3, [pc, #132]	; (8000ba8 <EXTI15_10_IRQHandler+0xc0>)
 8000b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b26:	4798      	blx	r3
	if (EXTI->PR & 1<<EXTI12){EXTI->PR |= 1<<EXTI12;GP_IRQ_CallBack[EXTI12]();}
 8000b28:	4b1e      	ldr	r3, [pc, #120]	; (8000ba4 <EXTI15_10_IRQHandler+0xbc>)
 8000b2a:	695b      	ldr	r3, [r3, #20]
 8000b2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d008      	beq.n	8000b46 <EXTI15_10_IRQHandler+0x5e>
 8000b34:	4b1b      	ldr	r3, [pc, #108]	; (8000ba4 <EXTI15_10_IRQHandler+0xbc>)
 8000b36:	695b      	ldr	r3, [r3, #20]
 8000b38:	4a1a      	ldr	r2, [pc, #104]	; (8000ba4 <EXTI15_10_IRQHandler+0xbc>)
 8000b3a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b3e:	6153      	str	r3, [r2, #20]
 8000b40:	4b19      	ldr	r3, [pc, #100]	; (8000ba8 <EXTI15_10_IRQHandler+0xc0>)
 8000b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b44:	4798      	blx	r3
	if (EXTI->PR & 1<<EXTI13){EXTI->PR |= 1<<EXTI13;GP_IRQ_CallBack[EXTI13]();}
 8000b46:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <EXTI15_10_IRQHandler+0xbc>)
 8000b48:	695b      	ldr	r3, [r3, #20]
 8000b4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d008      	beq.n	8000b64 <EXTI15_10_IRQHandler+0x7c>
 8000b52:	4b14      	ldr	r3, [pc, #80]	; (8000ba4 <EXTI15_10_IRQHandler+0xbc>)
 8000b54:	695b      	ldr	r3, [r3, #20]
 8000b56:	4a13      	ldr	r2, [pc, #76]	; (8000ba4 <EXTI15_10_IRQHandler+0xbc>)
 8000b58:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b5c:	6153      	str	r3, [r2, #20]
 8000b5e:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <EXTI15_10_IRQHandler+0xc0>)
 8000b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b62:	4798      	blx	r3
	if (EXTI->PR & 1<<EXTI14){EXTI->PR |= 1<<EXTI14;GP_IRQ_CallBack[EXTI14]();}
 8000b64:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <EXTI15_10_IRQHandler+0xbc>)
 8000b66:	695b      	ldr	r3, [r3, #20]
 8000b68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d008      	beq.n	8000b82 <EXTI15_10_IRQHandler+0x9a>
 8000b70:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <EXTI15_10_IRQHandler+0xbc>)
 8000b72:	695b      	ldr	r3, [r3, #20]
 8000b74:	4a0b      	ldr	r2, [pc, #44]	; (8000ba4 <EXTI15_10_IRQHandler+0xbc>)
 8000b76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b7a:	6153      	str	r3, [r2, #20]
 8000b7c:	4b0a      	ldr	r3, [pc, #40]	; (8000ba8 <EXTI15_10_IRQHandler+0xc0>)
 8000b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b80:	4798      	blx	r3
	if (EXTI->PR & 1<<EXTI15){EXTI->PR |= 1<<EXTI15;GP_IRQ_CallBack[EXTI15]();}
 8000b82:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <EXTI15_10_IRQHandler+0xbc>)
 8000b84:	695b      	ldr	r3, [r3, #20]
 8000b86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d008      	beq.n	8000ba0 <EXTI15_10_IRQHandler+0xb8>
 8000b8e:	4b05      	ldr	r3, [pc, #20]	; (8000ba4 <EXTI15_10_IRQHandler+0xbc>)
 8000b90:	695b      	ldr	r3, [r3, #20]
 8000b92:	4a04      	ldr	r2, [pc, #16]	; (8000ba4 <EXTI15_10_IRQHandler+0xbc>)
 8000b94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b98:	6153      	str	r3, [r2, #20]
 8000b9a:	4b03      	ldr	r3, [pc, #12]	; (8000ba8 <EXTI15_10_IRQHandler+0xc0>)
 8000b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b9e:	4798      	blx	r3

}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	40010400 	.word	0x40010400
 8000ba8:	20000024 	.word	0x20000024

08000bac <Get_CRLH_Position>:
 * 			Note							-NONE																														*
 ********************************************************************************************************************/
#include "GPIO.h"

static uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b085      	sub	sp, #20
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	80fb      	strh	r3, [r7, #6]
	uint16_t Loc_Pin_Number = 0 ;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	81fb      	strh	r3, [r7, #14]
	switch(PinNumber)
 8000bba:	88fb      	ldrh	r3, [r7, #6]
 8000bbc:	2b80      	cmp	r3, #128	; 0x80
 8000bbe:	d049      	beq.n	8000c54 <Get_CRLH_Position+0xa8>
 8000bc0:	2b80      	cmp	r3, #128	; 0x80
 8000bc2:	dc11      	bgt.n	8000be8 <Get_CRLH_Position+0x3c>
 8000bc4:	2b08      	cmp	r3, #8
 8000bc6:	d039      	beq.n	8000c3c <Get_CRLH_Position+0x90>
 8000bc8:	2b08      	cmp	r3, #8
 8000bca:	dc06      	bgt.n	8000bda <Get_CRLH_Position+0x2e>
 8000bcc:	2b02      	cmp	r3, #2
 8000bce:	d02f      	beq.n	8000c30 <Get_CRLH_Position+0x84>
 8000bd0:	2b04      	cmp	r3, #4
 8000bd2:	d030      	beq.n	8000c36 <Get_CRLH_Position+0x8a>
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d028      	beq.n	8000c2a <Get_CRLH_Position+0x7e>
 8000bd8:	e057      	b.n	8000c8a <Get_CRLH_Position+0xde>
 8000bda:	2b20      	cmp	r3, #32
 8000bdc:	d034      	beq.n	8000c48 <Get_CRLH_Position+0x9c>
 8000bde:	2b40      	cmp	r3, #64	; 0x40
 8000be0:	d035      	beq.n	8000c4e <Get_CRLH_Position+0xa2>
 8000be2:	2b10      	cmp	r3, #16
 8000be4:	d02d      	beq.n	8000c42 <Get_CRLH_Position+0x96>
 8000be6:	e050      	b.n	8000c8a <Get_CRLH_Position+0xde>
 8000be8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000bec:	d03e      	beq.n	8000c6c <Get_CRLH_Position+0xc0>
 8000bee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000bf2:	dc09      	bgt.n	8000c08 <Get_CRLH_Position+0x5c>
 8000bf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bf8:	d032      	beq.n	8000c60 <Get_CRLH_Position+0xb4>
 8000bfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bfe:	d032      	beq.n	8000c66 <Get_CRLH_Position+0xba>
 8000c00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c04:	d029      	beq.n	8000c5a <Get_CRLH_Position+0xae>
 8000c06:	e040      	b.n	8000c8a <Get_CRLH_Position+0xde>
 8000c08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c0c:	d034      	beq.n	8000c78 <Get_CRLH_Position+0xcc>
 8000c0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c12:	dc03      	bgt.n	8000c1c <Get_CRLH_Position+0x70>
 8000c14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000c18:	d02b      	beq.n	8000c72 <Get_CRLH_Position+0xc6>
 8000c1a:	e036      	b.n	8000c8a <Get_CRLH_Position+0xde>
 8000c1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000c20:	d02d      	beq.n	8000c7e <Get_CRLH_Position+0xd2>
 8000c22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000c26:	d02d      	beq.n	8000c84 <Get_CRLH_Position+0xd8>
 8000c28:	e02f      	b.n	8000c8a <Get_CRLH_Position+0xde>
	{
	case GPIO_PIN_0 :
		Loc_Pin_Number = 0 ;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	81fb      	strh	r3, [r7, #14]
		break ;
 8000c2e:	e02c      	b.n	8000c8a <Get_CRLH_Position+0xde>
	case GPIO_PIN_1 :
		Loc_Pin_Number = 4 ;
 8000c30:	2304      	movs	r3, #4
 8000c32:	81fb      	strh	r3, [r7, #14]
		break ;
 8000c34:	e029      	b.n	8000c8a <Get_CRLH_Position+0xde>
	case GPIO_PIN_2 :
		Loc_Pin_Number = 8 ;
 8000c36:	2308      	movs	r3, #8
 8000c38:	81fb      	strh	r3, [r7, #14]
		break ;
 8000c3a:	e026      	b.n	8000c8a <Get_CRLH_Position+0xde>
	case GPIO_PIN_3 :
		Loc_Pin_Number = 12 ;
 8000c3c:	230c      	movs	r3, #12
 8000c3e:	81fb      	strh	r3, [r7, #14]
		break ;
 8000c40:	e023      	b.n	8000c8a <Get_CRLH_Position+0xde>
	case GPIO_PIN_4 :
		Loc_Pin_Number = 16 ;
 8000c42:	2310      	movs	r3, #16
 8000c44:	81fb      	strh	r3, [r7, #14]
		break ;
 8000c46:	e020      	b.n	8000c8a <Get_CRLH_Position+0xde>
	case GPIO_PIN_5 :
		Loc_Pin_Number = 20 ;
 8000c48:	2314      	movs	r3, #20
 8000c4a:	81fb      	strh	r3, [r7, #14]
		break ;
 8000c4c:	e01d      	b.n	8000c8a <Get_CRLH_Position+0xde>
	case GPIO_PIN_6 :
		Loc_Pin_Number = 24 ;
 8000c4e:	2318      	movs	r3, #24
 8000c50:	81fb      	strh	r3, [r7, #14]
		break ;
 8000c52:	e01a      	b.n	8000c8a <Get_CRLH_Position+0xde>
	case GPIO_PIN_7 :
		Loc_Pin_Number = 28 ;
 8000c54:	231c      	movs	r3, #28
 8000c56:	81fb      	strh	r3, [r7, #14]
		break ;
 8000c58:	e017      	b.n	8000c8a <Get_CRLH_Position+0xde>
	case GPIO_PIN_8 :
		Loc_Pin_Number = 0 ;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	81fb      	strh	r3, [r7, #14]
		break ;
 8000c5e:	e014      	b.n	8000c8a <Get_CRLH_Position+0xde>
	case GPIO_PIN_9 :
		Loc_Pin_Number = 4 ;
 8000c60:	2304      	movs	r3, #4
 8000c62:	81fb      	strh	r3, [r7, #14]
		break ;
 8000c64:	e011      	b.n	8000c8a <Get_CRLH_Position+0xde>
	case GPIO_PIN_10 :
		Loc_Pin_Number = 8 ;
 8000c66:	2308      	movs	r3, #8
 8000c68:	81fb      	strh	r3, [r7, #14]
		break ;
 8000c6a:	e00e      	b.n	8000c8a <Get_CRLH_Position+0xde>
	case GPIO_PIN_11 :
		Loc_Pin_Number = 12 ;
 8000c6c:	230c      	movs	r3, #12
 8000c6e:	81fb      	strh	r3, [r7, #14]
		break ;
 8000c70:	e00b      	b.n	8000c8a <Get_CRLH_Position+0xde>
	case GPIO_PIN_12 :
		Loc_Pin_Number = 16 ;
 8000c72:	2310      	movs	r3, #16
 8000c74:	81fb      	strh	r3, [r7, #14]
		break ;
 8000c76:	e008      	b.n	8000c8a <Get_CRLH_Position+0xde>
	case GPIO_PIN_13 :
		Loc_Pin_Number = 20 ;
 8000c78:	2314      	movs	r3, #20
 8000c7a:	81fb      	strh	r3, [r7, #14]
		break ;
 8000c7c:	e005      	b.n	8000c8a <Get_CRLH_Position+0xde>
	case GPIO_PIN_14 :
		Loc_Pin_Number = 24 ;
 8000c7e:	2318      	movs	r3, #24
 8000c80:	81fb      	strh	r3, [r7, #14]
		break ;
 8000c82:	e002      	b.n	8000c8a <Get_CRLH_Position+0xde>
	case GPIO_PIN_15 :
		Loc_Pin_Number = 28 ;
 8000c84:	231c      	movs	r3, #28
 8000c86:	81fb      	strh	r3, [r7, #14]
		break ;
 8000c88:	bf00      	nop
	}
	return Loc_Pin_Number ;
 8000c8a:	89fb      	ldrh	r3, [r7, #14]
 8000c8c:	b2db      	uxtb	r3, r3
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3714      	adds	r7, #20
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bc80      	pop	{r7}
 8000c96:	4770      	bx	lr

08000c98 <MCAL_GPIO_INIT>:
 * 												-contain the configratoiin of GPIO PIN
 * 			@retval						-NONE																														*
 * 			Note							--stm32f103c6 has GPIO A : E BUT LQFP48 has A ,B 	,part of c , d pins																														*
 ********************************************************************************************************************/
void MCAL_GPIO_INIT(GPIO_Typedef * GPIOX,GPIO_PinCongif_t* pinconfig)
{
 8000c98:	b590      	push	{r4, r7, lr}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	6039      	str	r1, [r7, #0]
	volatile uint32_t* Loc_Config_Regester = NULL ;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60bb      	str	r3, [r7, #8]
	uint8_t	 Loc_Pin_Congif	=	0 ;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	73fb      	strb	r3, [r7, #15]
	Loc_Config_Regester = (pinconfig->GPIO_PinNumber<GPIO_PIN_8)? 	&GPIOX->CRL	:	&GPIOX->CRH 	 ;
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	881b      	ldrh	r3, [r3, #0]
 8000cae:	2bff      	cmp	r3, #255	; 0xff
 8000cb0:	d801      	bhi.n	8000cb6 <MCAL_GPIO_INIT+0x1e>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	e001      	b.n	8000cba <MCAL_GPIO_INIT+0x22>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	3304      	adds	r3, #4
 8000cba:	60bb      	str	r3, [r7, #8]
	*(Loc_Config_Regester) &=~(0x0f<<(Get_CRLH_Position(pinconfig->GPIO_PinNumber)));
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	881b      	ldrh	r3, [r3, #0]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff ff73 	bl	8000bac <Get_CRLH_Position>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	461a      	mov	r2, r3
 8000cca:	230f      	movs	r3, #15
 8000ccc:	4093      	lsls	r3, r2
 8000cce:	43da      	mvns	r2, r3
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	401a      	ands	r2, r3
 8000cd6:	68bb      	ldr	r3, [r7, #8]
 8000cd8:	601a      	str	r2, [r3, #0]
	if (pinconfig->GPIO_MODE==GPIO_Mode_OUTPUT_OD || pinconfig->GPIO_MODE==GPIO_Mode_OUTPUT_PP||\
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	789b      	ldrb	r3, [r3, #2]
 8000cde:	2b05      	cmp	r3, #5
 8000ce0:	d00b      	beq.n	8000cfa <MCAL_GPIO_INIT+0x62>
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	789b      	ldrb	r3, [r3, #2]
 8000ce6:	2b04      	cmp	r3, #4
 8000ce8:	d007      	beq.n	8000cfa <MCAL_GPIO_INIT+0x62>
			pinconfig->GPIO_MODE==GPIO_Mode_OUTPUT_AF_OD ||pinconfig->GPIO_MODE==GPIO_Mode_OUTPUT_AF_PP)
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	789b      	ldrb	r3, [r3, #2]
	if (pinconfig->GPIO_MODE==GPIO_Mode_OUTPUT_OD || pinconfig->GPIO_MODE==GPIO_Mode_OUTPUT_PP||\
 8000cee:	2b07      	cmp	r3, #7
 8000cf0:	d003      	beq.n	8000cfa <MCAL_GPIO_INIT+0x62>
			pinconfig->GPIO_MODE==GPIO_Mode_OUTPUT_AF_OD ||pinconfig->GPIO_MODE==GPIO_Mode_OUTPUT_AF_PP)
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	789b      	ldrb	r3, [r3, #2]
 8000cf6:	2b06      	cmp	r3, #6
 8000cf8:	d10e      	bne.n	8000d18 <MCAL_GPIO_INIT+0x80>
	{
		Loc_Pin_Congif = ((((pinconfig->GPIO_MODE-4)<<2) | (pinconfig->GPIO_OutPut_Speed))&0x0f) ;
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	789b      	ldrb	r3, [r3, #2]
 8000cfe:	3b04      	subs	r3, #4
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	b25a      	sxtb	r2, r3
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	78db      	ldrb	r3, [r3, #3]
 8000d08:	b25b      	sxtb	r3, r3
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	b25b      	sxtb	r3, r3
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	f003 030f 	and.w	r3, r3, #15
 8000d14:	73fb      	strb	r3, [r7, #15]
 8000d16:	e031      	b.n	8000d7c <MCAL_GPIO_INIT+0xe4>
	}
	else
	{
		if((pinconfig->GPIO_MODE==GPIO_Mode_INPUT_FLO)||(pinconfig->GPIO_MODE==GPIO_Mode_Analog))
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	789b      	ldrb	r3, [r3, #2]
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d003      	beq.n	8000d28 <MCAL_GPIO_INIT+0x90>
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	789b      	ldrb	r3, [r3, #2]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d107      	bne.n	8000d38 <MCAL_GPIO_INIT+0xa0>
		{
			Loc_Pin_Congif = ((((pinconfig->GPIO_MODE)<<2) |0x0)&0x0f) ;
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	789b      	ldrb	r3, [r3, #2]
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	f003 030f 	and.w	r3, r3, #15
 8000d34:	73fb      	strb	r3, [r7, #15]
 8000d36:	e021      	b.n	8000d7c <MCAL_GPIO_INIT+0xe4>
		}
		else if (pinconfig->GPIO_MODE==GPIO_Mode_AF_INPUT)
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	789b      	ldrb	r3, [r3, #2]
 8000d3c:	2b08      	cmp	r3, #8
 8000d3e:	d102      	bne.n	8000d46 <MCAL_GPIO_INIT+0xae>
		{
			Loc_Pin_Congif = (((GPIO_Mode_INPUT_FLO<<2) |0x0)&0x0f) ;
 8000d40:	2304      	movs	r3, #4
 8000d42:	73fb      	strb	r3, [r7, #15]
 8000d44:	e01a      	b.n	8000d7c <MCAL_GPIO_INIT+0xe4>
		}
		else
		{
			Loc_Pin_Congif =(( (pinconfig->GPIO_MODE<< 2) |0x0)&0x0F) ;
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	789b      	ldrb	r3, [r3, #2]
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	f003 030f 	and.w	r3, r3, #15
 8000d52:	73fb      	strb	r3, [r7, #15]
			if (pinconfig->GPIO_MODE == GPIO_Mode_INPUT_PU)
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	789b      	ldrb	r3, [r3, #2]
 8000d58:	2b02      	cmp	r3, #2
 8000d5a:	d107      	bne.n	8000d6c <MCAL_GPIO_INIT+0xd4>
			{
				GPIOX->ODR |= pinconfig->GPIO_PinNumber ;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	683a      	ldr	r2, [r7, #0]
 8000d62:	8812      	ldrh	r2, [r2, #0]
 8000d64:	431a      	orrs	r2, r3
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	e007      	b.n	8000d7c <MCAL_GPIO_INIT+0xe4>
			}
			else
			{
				GPIOX->ODR &=~ (pinconfig->GPIO_PinNumber) ;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	683a      	ldr	r2, [r7, #0]
 8000d72:	8812      	ldrh	r2, [r2, #0]
 8000d74:	43d2      	mvns	r2, r2
 8000d76:	401a      	ands	r2, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	60da      	str	r2, [r3, #12]
			}
		}
	}
	(*Loc_Config_Regester) |= ((Loc_Pin_Congif)<<Get_CRLH_Position(pinconfig->GPIO_PinNumber)) ;
 8000d7c:	7bfc      	ldrb	r4, [r7, #15]
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	881b      	ldrh	r3, [r3, #0]
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff ff12 	bl	8000bac <Get_CRLH_Position>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	fa04 f203 	lsl.w	r2, r4, r3
 8000d8e:	68bb      	ldr	r3, [r7, #8]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	431a      	orrs	r2, r3
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	601a      	str	r2, [r3, #0]

}
 8000d98:	bf00      	nop
 8000d9a:	3714      	adds	r7, #20
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd90      	pop	{r4, r7, pc}

08000da0 <MCAL_GPIO_Write_PIN>:
 * 			@param [in]				-value : PIN VALUE																												*
 * 			@retval					- NONE																																*																									*
 * 			Note							-NONE																																	*
 ********************************************************************************************************************/
void MCAL_GPIO_Write_PIN(GPIO_Typedef * GPIOX,uint16_t Pin_Number,uint8_t value)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	460b      	mov	r3, r1
 8000daa:	807b      	strh	r3, [r7, #2]
 8000dac:	4613      	mov	r3, r2
 8000dae:	707b      	strb	r3, [r7, #1]
	if (value!=LOW)
 8000db0:	787b      	ldrb	r3, [r7, #1]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d003      	beq.n	8000dbe <MCAL_GPIO_Write_PIN+0x1e>
	{
		//GPIOX->ODR |= (uint32_t)Pin_Number ;
		GPIOX->BSRR = (uint32_t)Pin_Number ;
 8000db6:	887a      	ldrh	r2, [r7, #2]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	611a      	str	r2, [r3, #16]
	}else
	{
		//	GPIOX->ODR &= ~((uint32_t)Pin_Number) ;
		GPIOX->BRR = (uint32_t)Pin_Number ;
	}
}
 8000dbc:	e002      	b.n	8000dc4 <MCAL_GPIO_Write_PIN+0x24>
		GPIOX->BRR = (uint32_t)Pin_Number ;
 8000dbe:	887a      	ldrh	r2, [r7, #2]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	615a      	str	r2, [r3, #20]
}
 8000dc4:	bf00      	nop
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bc80      	pop	{r7}
 8000dcc:	4770      	bx	lr

08000dce <MCAL_GPIO_Write_PORT>:
 * 			@param [in]				-value : PIN VALUE																												*
 * 			@retval					- NONE																																*																									*
 * 			Note							-NONE																																	*
 ********************************************************************************************************************/
void MCAL_GPIO_Write_PORT(GPIO_Typedef * GPIOX,uint8_t value)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	b083      	sub	sp, #12
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
 8000dd6:	460b      	mov	r3, r1
 8000dd8:	70fb      	strb	r3, [r7, #3]
	GPIOX->ODR = (uint32_t)value ;
 8000dda:	78fa      	ldrb	r2, [r7, #3]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	60da      	str	r2, [r3, #12]
}
 8000de0:	bf00      	nop
 8000de2:	370c      	adds	r7, #12
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bc80      	pop	{r7}
 8000de8:	4770      	bx	lr
	...

08000dec <__libc_init_array>:
 8000dec:	b570      	push	{r4, r5, r6, lr}
 8000dee:	2500      	movs	r5, #0
 8000df0:	4e0c      	ldr	r6, [pc, #48]	; (8000e24 <__libc_init_array+0x38>)
 8000df2:	4c0d      	ldr	r4, [pc, #52]	; (8000e28 <__libc_init_array+0x3c>)
 8000df4:	1ba4      	subs	r4, r4, r6
 8000df6:	10a4      	asrs	r4, r4, #2
 8000df8:	42a5      	cmp	r5, r4
 8000dfa:	d109      	bne.n	8000e10 <__libc_init_array+0x24>
 8000dfc:	f000 f81a 	bl	8000e34 <_init>
 8000e00:	2500      	movs	r5, #0
 8000e02:	4e0a      	ldr	r6, [pc, #40]	; (8000e2c <__libc_init_array+0x40>)
 8000e04:	4c0a      	ldr	r4, [pc, #40]	; (8000e30 <__libc_init_array+0x44>)
 8000e06:	1ba4      	subs	r4, r4, r6
 8000e08:	10a4      	asrs	r4, r4, #2
 8000e0a:	42a5      	cmp	r5, r4
 8000e0c:	d105      	bne.n	8000e1a <__libc_init_array+0x2e>
 8000e0e:	bd70      	pop	{r4, r5, r6, pc}
 8000e10:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e14:	4798      	blx	r3
 8000e16:	3501      	adds	r5, #1
 8000e18:	e7ee      	b.n	8000df8 <__libc_init_array+0xc>
 8000e1a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e1e:	4798      	blx	r3
 8000e20:	3501      	adds	r5, #1
 8000e22:	e7f2      	b.n	8000e0a <__libc_init_array+0x1e>
 8000e24:	08000e74 	.word	0x08000e74
 8000e28:	08000e74 	.word	0x08000e74
 8000e2c:	08000e74 	.word	0x08000e74
 8000e30:	08000e78 	.word	0x08000e78

08000e34 <_init>:
 8000e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e36:	bf00      	nop
 8000e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e3a:	bc08      	pop	{r3}
 8000e3c:	469e      	mov	lr, r3
 8000e3e:	4770      	bx	lr

08000e40 <_fini>:
 8000e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e42:	bf00      	nop
 8000e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e46:	bc08      	pop	{r3}
 8000e48:	469e      	mov	lr, r3
 8000e4a:	4770      	bx	lr
