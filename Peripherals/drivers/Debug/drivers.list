
drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e50  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000f80  08000f80  00010f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000f98  08000f98  00010fa0  2**0
                  CONTENTS
  4 .ARM          00000000  08000f98  08000f98  00010fa0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f98  08000fa0  00010fa0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f98  08000f98  00010f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f9c  08000f9c  00010f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010fa0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  20000000  08000fa0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000068  08000fa0  00020068  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010fa0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005251  00000000  00000000  00010fc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000bff  00000000  00000000  0001621a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000d60  00000000  00000000  00016e19  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000230  00000000  00000000  00017b80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001c8  00000000  00000000  00017db0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000d17  00000000  00000000  00017f78  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00002730  00000000  00000000  00018c8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000a51d  00000000  00000000  0001b3bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000258dc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000006fc  00000000  00000000  00025958  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000f68 	.word	0x08000f68

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000f68 	.word	0x08000f68

08000170 <Clock_Enable>:
#warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif
#define Master_Mode

void Clock_Enable()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_EN();
 8000174:	4b0a      	ldr	r3, [pc, #40]	; (80001a0 <Clock_Enable+0x30>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a09      	ldr	r2, [pc, #36]	; (80001a0 <Clock_Enable+0x30>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 8000180:	4b07      	ldr	r3, [pc, #28]	; (80001a0 <Clock_Enable+0x30>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a06      	ldr	r2, [pc, #24]	; (80001a0 <Clock_Enable+0x30>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <Clock_Enable+0x30>)
 800018e:	699b      	ldr	r3, [r3, #24]
 8000190:	4a03      	ldr	r2, [pc, #12]	; (80001a0 <Clock_Enable+0x30>)
 8000192:	f043 0301 	orr.w	r3, r3, #1
 8000196:	6193      	str	r3, [r2, #24]
}
 8000198:	bf00      	nop
 800019a:	46bd      	mov	sp, r7
 800019c:	bc80      	pop	{r7}
 800019e:	4770      	bx	lr
 80001a0:	40021000 	.word	0x40021000

080001a4 <RecieveString>:
void RecieveString(void)
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	af00      	add	r7, sp, #0
#ifdef Master_Mode
	MCAL_USART_RecieveData(USART1,&Buffer,Disable) ;
 80001a8:	2201      	movs	r2, #1
 80001aa:	490d      	ldr	r1, [pc, #52]	; (80001e0 <RecieveString+0x3c>)
 80001ac:	480d      	ldr	r0, [pc, #52]	; (80001e4 <RecieveString+0x40>)
 80001ae:	f000 fe05 	bl	8000dbc <MCAL_USART_RecieveData>
	MCAL_USART_SendData(USART1,&Buffer,Enable) ;
 80001b2:	2200      	movs	r2, #0
 80001b4:	490a      	ldr	r1, [pc, #40]	; (80001e0 <RecieveString+0x3c>)
 80001b6:	480b      	ldr	r0, [pc, #44]	; (80001e4 <RecieveString+0x40>)
 80001b8:	f000 fde4 	bl	8000d84 <MCAL_USART_SendData>
	MCAL_GPIO_Write_PIN(GPIOA,GPIO_PIN_4, LOW);
 80001bc:	2200      	movs	r2, #0
 80001be:	2110      	movs	r1, #16
 80001c0:	4809      	ldr	r0, [pc, #36]	; (80001e8 <RecieveString+0x44>)
 80001c2:	f000 faa7 	bl	8000714 <MCAL_GPIO_Write_PIN>
	MCAL_SPI_TX_RX(SPI1, &Buffer, Enable);
 80001c6:	2200      	movs	r2, #0
 80001c8:	4905      	ldr	r1, [pc, #20]	; (80001e0 <RecieveString+0x3c>)
 80001ca:	4808      	ldr	r0, [pc, #32]	; (80001ec <RecieveString+0x48>)
 80001cc:	f000 fba0 	bl	8000910 <MCAL_SPI_TX_RX>
	MCAL_GPIO_Write_PIN(GPIOA,GPIO_PIN_4, HIGH);
 80001d0:	2201      	movs	r2, #1
 80001d2:	2110      	movs	r1, #16
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <RecieveString+0x44>)
 80001d6:	f000 fa9d 	bl	8000714 <MCAL_GPIO_Write_PIN>
#endif
}
 80001da:	bf00      	nop
 80001dc:	bd80      	pop	{r7, pc}
 80001de:	bf00      	nop
 80001e0:	20000028 	.word	0x20000028
 80001e4:	40013800 	.word	0x40013800
 80001e8:	40010800 	.word	0x40010800
 80001ec:	40013000 	.word	0x40013000

080001f0 <main>:

int main ()
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b08c      	sub	sp, #48	; 0x30
 80001f4:	af00      	add	r7, sp, #0
	GPIO_PinCongif_t PinConfig ;
	USART_Conig_t Usart_Config ;
	SPI_ConFig_t Spi_ConFig ;

	Clock_Enable();
 80001f6:	f7ff ffbb 	bl	8000170 <Clock_Enable>

	Usart_Config.BaudRate       = 	 USART_BaudRate_9600 ;
 80001fa:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80001fe:	61fb      	str	r3, [r7, #28]
	Usart_Config.HWFlowCtl 		=    USART_HWFlowCtl_NONE ;
 8000200:	2300      	movs	r3, #0
 8000202:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	Usart_Config.IRQ_Enable	    =	 USART_IRQ_Enable_RXNEIE;
 8000206:	2320      	movs	r3, #32
 8000208:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	Usart_Config.P_IRQ_CallBack =	 RecieveString ;
 800020c:	4b23      	ldr	r3, [pc, #140]	; (800029c <main+0xac>)
 800020e:	62bb      	str	r3, [r7, #40]	; 0x28
	Usart_Config.Parity 		=	 USART_Parity_NONE ;
 8000210:	2300      	movs	r3, #0
 8000212:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	Usart_Config.PayLoad_Length =    USART_PayLoad_Length8B ;
 8000216:	2300      	movs	r3, #0
 8000218:	f887 3020 	strb.w	r3, [r7, #32]
	Usart_Config.StopBits 		=	 USART_StopBits_One ;
 800021c:	2300      	movs	r3, #0
 800021e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	Usart_Config.USART_MODE 	=	 USART_MODE_TX_RX ;
 8000222:	230c      	movs	r3, #12
 8000224:	763b      	strb	r3, [r7, #24]
	MCAL_USART_Init(USART1,&Usart_Config) ;
 8000226:	f107 0318 	add.w	r3, r7, #24
 800022a:	4619      	mov	r1, r3
 800022c:	481c      	ldr	r0, [pc, #112]	; (80002a0 <main+0xb0>)
 800022e:	f000 fd07 	bl	8000c40 <MCAL_USART_Init>
	MCAL_USART_GPIO_Set_Pins(USART1);
 8000232:	481b      	ldr	r0, [pc, #108]	; (80002a0 <main+0xb0>)
 8000234:	f000 fdf0 	bl	8000e18 <MCAL_USART_GPIO_Set_Pins>

	Spi_ConFig.CLKPhase = SPI_CLKPhase_2ndEDGE_first_data_capture_edge ;
 8000238:	2301      	movs	r3, #1
 800023a:	817b      	strh	r3, [r7, #10]
	Spi_ConFig.CLKPolarity = SPI_CLKPolarity_High_when_idle ;
 800023c:	2302      	movs	r3, #2
 800023e:	813b      	strh	r3, [r7, #8]
	Spi_ConFig.Data_Size = SPI_Data_Size_8BIT ;
 8000240:	2300      	movs	r3, #0
 8000242:	80fb      	strh	r3, [r7, #6]
	Spi_ConFig.Communication_Mode = SPI_Communication_Mode_2LINES ;
 8000244:	2300      	movs	r3, #0
 8000246:	807b      	strh	r3, [r7, #2]
	Spi_ConFig.SPI_BAUDRATEPrescaler = SPI_BAUDRATEPrescaler_8 ;
 8000248:	2310      	movs	r3, #16
 800024a:	81fb      	strh	r3, [r7, #14]
	Spi_ConFig.frame_format = SPI_frame_format_MSB_transmitted_first ;
 800024c:	2300      	movs	r3, #0
 800024e:	80bb      	strh	r3, [r7, #4]

#ifdef	Master_Mode
	Spi_ConFig.Device_Mode = SPI_Device_Mode_Master ;
 8000250:	2304      	movs	r3, #4
 8000252:	803b      	strh	r3, [r7, #0]
	Spi_ConFig.IRQ_Enable = SPI_IRQ_Enable_NONE ;
 8000254:	2300      	movs	r3, #0
 8000256:	823b      	strh	r3, [r7, #16]
	Spi_ConFig.NSS = SPI_NSS_Soft_NSSInternalSoft_set ;
 8000258:	f44f 7340 	mov.w	r3, #768	; 0x300
 800025c:	81bb      	strh	r3, [r7, #12]
	Spi_ConFig.P_IRQ_CallBack = NULL ;
 800025e:	2300      	movs	r3, #0
 8000260:	617b      	str	r3, [r7, #20]

	PinConfig.GPIO_PinNumber = GPIO_PIN_4 ;
 8000262:	2310      	movs	r3, #16
 8000264:	85bb      	strh	r3, [r7, #44]	; 0x2c
	PinConfig.GPIO_MODE = GPIO_Mode_OUTPUT_PP ;
 8000266:	2304      	movs	r3, #4
 8000268:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	PinConfig.GPIO_OutPut_Speed = GPIO_SPEED_10M ;
 800026c:	2301      	movs	r3, #1
 800026e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	MCAL_GPIO_INIT(GPIOA, &PinConfig);
 8000272:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000276:	4619      	mov	r1, r3
 8000278:	480a      	ldr	r0, [pc, #40]	; (80002a4 <main+0xb4>)
 800027a:	f000 f9c7 	bl	800060c <MCAL_GPIO_INIT>
	MCAL_GPIO_Write_PIN(GPIOA,GPIO_PIN_4, HIGH);
 800027e:	2201      	movs	r2, #1
 8000280:	2110      	movs	r1, #16
 8000282:	4808      	ldr	r0, [pc, #32]	; (80002a4 <main+0xb4>)
 8000284:	f000 fa46 	bl	8000714 <MCAL_GPIO_Write_PIN>
#endif

	MCAL_SPI_INIT(SPI1, &Spi_ConFig);
 8000288:	463b      	mov	r3, r7
 800028a:	4619      	mov	r1, r3
 800028c:	4806      	ldr	r0, [pc, #24]	; (80002a8 <main+0xb8>)
 800028e:	f000 fab3 	bl	80007f8 <MCAL_SPI_INIT>
	MCAL_SPI_GPIO_Set_Pins(SPI1);
 8000292:	4805      	ldr	r0, [pc, #20]	; (80002a8 <main+0xb8>)
 8000294:	f000 fb66 	bl	8000964 <MCAL_SPI_GPIO_Set_Pins>

	while(1)
 8000298:	e7fe      	b.n	8000298 <main+0xa8>
 800029a:	bf00      	nop
 800029c:	080001a5 	.word	0x080001a5
 80002a0:	40013800 	.word	0x40013800
 80002a4:	40010800 	.word	0x40010800
 80002a8:	40013000 	.word	0x40013000

080002ac <Reset_Handler>:
 80002ac:	480d      	ldr	r0, [pc, #52]	; (80002e4 <LoopForever+0x2>)
 80002ae:	4685      	mov	sp, r0
 80002b0:	f3af 8000 	nop.w
 80002b4:	480c      	ldr	r0, [pc, #48]	; (80002e8 <LoopForever+0x6>)
 80002b6:	490d      	ldr	r1, [pc, #52]	; (80002ec <LoopForever+0xa>)
 80002b8:	4a0d      	ldr	r2, [pc, #52]	; (80002f0 <LoopForever+0xe>)
 80002ba:	2300      	movs	r3, #0
 80002bc:	e002      	b.n	80002c4 <LoopCopyDataInit>

080002be <CopyDataInit>:
 80002be:	58d4      	ldr	r4, [r2, r3]
 80002c0:	50c4      	str	r4, [r0, r3]
 80002c2:	3304      	adds	r3, #4

080002c4 <LoopCopyDataInit>:
 80002c4:	18c4      	adds	r4, r0, r3
 80002c6:	428c      	cmp	r4, r1
 80002c8:	d3f9      	bcc.n	80002be <CopyDataInit>
 80002ca:	4a0a      	ldr	r2, [pc, #40]	; (80002f4 <LoopForever+0x12>)
 80002cc:	4c0a      	ldr	r4, [pc, #40]	; (80002f8 <LoopForever+0x16>)
 80002ce:	2300      	movs	r3, #0
 80002d0:	e001      	b.n	80002d6 <LoopFillZerobss>

080002d2 <FillZerobss>:
 80002d2:	6013      	str	r3, [r2, #0]
 80002d4:	3204      	adds	r2, #4

080002d6 <LoopFillZerobss>:
 80002d6:	42a2      	cmp	r2, r4
 80002d8:	d3fb      	bcc.n	80002d2 <FillZerobss>
 80002da:	f000 fe21 	bl	8000f20 <__libc_init_array>
 80002de:	f7ff ff87 	bl	80001f0 <main>

080002e2 <LoopForever>:
 80002e2:	e7fe      	b.n	80002e2 <LoopForever>
 80002e4:	20002800 	.word	0x20002800
 80002e8:	20000000 	.word	0x20000000
 80002ec:	20000000 	.word	0x20000000
 80002f0:	08000fa0 	.word	0x08000fa0
 80002f4:	20000000 	.word	0x20000000
 80002f8:	20000068 	.word	0x20000068

080002fc <ADC1_2_IRQHandler>:
 80002fc:	e7fe      	b.n	80002fc <ADC1_2_IRQHandler>
	...

08000300 <EXTI0_IRQHandler>:
////**=====================     ISR FUNCTIONS      =============================
////**==========================================================================
////**==========================================================================

void EXTI0_IRQHandler(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
	// must clear PR By Writing one on Bit
	EXTI->PR |= (1<<EXTI0);
 8000304:	4b05      	ldr	r3, [pc, #20]	; (800031c <EXTI0_IRQHandler+0x1c>)
 8000306:	695b      	ldr	r3, [r3, #20]
 8000308:	4a04      	ldr	r2, [pc, #16]	; (800031c <EXTI0_IRQHandler+0x1c>)
 800030a:	f043 0301 	orr.w	r3, r3, #1
 800030e:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[EXTI0]();
 8000310:	4b03      	ldr	r3, [pc, #12]	; (8000320 <EXTI0_IRQHandler+0x20>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	4798      	blx	r3
}
 8000316:	bf00      	nop
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	40010400 	.word	0x40010400
 8000320:	2000002c 	.word	0x2000002c

08000324 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
	// must clear PR By Writing one on Bit
	EXTI->PR |= (1<<EXTI1);
 8000328:	4b05      	ldr	r3, [pc, #20]	; (8000340 <EXTI1_IRQHandler+0x1c>)
 800032a:	695b      	ldr	r3, [r3, #20]
 800032c:	4a04      	ldr	r2, [pc, #16]	; (8000340 <EXTI1_IRQHandler+0x1c>)
 800032e:	f043 0302 	orr.w	r3, r3, #2
 8000332:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[EXTI1]();
 8000334:	4b03      	ldr	r3, [pc, #12]	; (8000344 <EXTI1_IRQHandler+0x20>)
 8000336:	685b      	ldr	r3, [r3, #4]
 8000338:	4798      	blx	r3

}
 800033a:	bf00      	nop
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	40010400 	.word	0x40010400
 8000344:	2000002c 	.word	0x2000002c

08000348 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
	// must clear PR By Writing one on Bit
	EXTI->PR |= (1<<EXTI2);
 800034c:	4b05      	ldr	r3, [pc, #20]	; (8000364 <EXTI2_IRQHandler+0x1c>)
 800034e:	695b      	ldr	r3, [r3, #20]
 8000350:	4a04      	ldr	r2, [pc, #16]	; (8000364 <EXTI2_IRQHandler+0x1c>)
 8000352:	f043 0304 	orr.w	r3, r3, #4
 8000356:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[EXTI2]();
 8000358:	4b03      	ldr	r3, [pc, #12]	; (8000368 <EXTI2_IRQHandler+0x20>)
 800035a:	689b      	ldr	r3, [r3, #8]
 800035c:	4798      	blx	r3
}
 800035e:	bf00      	nop
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	40010400 	.word	0x40010400
 8000368:	2000002c 	.word	0x2000002c

0800036c <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
	// must clear PR By Writing one on Bit
	EXTI->PR |= (1<<EXTI3);
 8000370:	4b05      	ldr	r3, [pc, #20]	; (8000388 <EXTI3_IRQHandler+0x1c>)
 8000372:	695b      	ldr	r3, [r3, #20]
 8000374:	4a04      	ldr	r2, [pc, #16]	; (8000388 <EXTI3_IRQHandler+0x1c>)
 8000376:	f043 0308 	orr.w	r3, r3, #8
 800037a:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[EXTI13]();
 800037c:	4b03      	ldr	r3, [pc, #12]	; (800038c <EXTI3_IRQHandler+0x20>)
 800037e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000380:	4798      	blx	r3
}
 8000382:	bf00      	nop
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	40010400 	.word	0x40010400
 800038c:	2000002c 	.word	0x2000002c

08000390 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
	// must clear PR By Writing one on Bit
	EXTI->PR |= (1<<EXTI4);
 8000394:	4b05      	ldr	r3, [pc, #20]	; (80003ac <EXTI4_IRQHandler+0x1c>)
 8000396:	695b      	ldr	r3, [r3, #20]
 8000398:	4a04      	ldr	r2, [pc, #16]	; (80003ac <EXTI4_IRQHandler+0x1c>)
 800039a:	f043 0310 	orr.w	r3, r3, #16
 800039e:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[EXTI4]();
 80003a0:	4b03      	ldr	r3, [pc, #12]	; (80003b0 <EXTI4_IRQHandler+0x20>)
 80003a2:	691b      	ldr	r3, [r3, #16]
 80003a4:	4798      	blx	r3
}
 80003a6:	bf00      	nop
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	40010400 	.word	0x40010400
 80003b0:	2000002c 	.word	0x2000002c

080003b4 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
	// must clear PR By Writing one on Bit
	if (EXTI->PR & 1<<EXTI5){EXTI->PR |= 1<<EXTI5;GP_IRQ_CallBack[EXTI5]();}
 80003b8:	4b26      	ldr	r3, [pc, #152]	; (8000454 <EXTI9_5_IRQHandler+0xa0>)
 80003ba:	695b      	ldr	r3, [r3, #20]
 80003bc:	f003 0320 	and.w	r3, r3, #32
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d008      	beq.n	80003d6 <EXTI9_5_IRQHandler+0x22>
 80003c4:	4b23      	ldr	r3, [pc, #140]	; (8000454 <EXTI9_5_IRQHandler+0xa0>)
 80003c6:	695b      	ldr	r3, [r3, #20]
 80003c8:	4a22      	ldr	r2, [pc, #136]	; (8000454 <EXTI9_5_IRQHandler+0xa0>)
 80003ca:	f043 0320 	orr.w	r3, r3, #32
 80003ce:	6153      	str	r3, [r2, #20]
 80003d0:	4b21      	ldr	r3, [pc, #132]	; (8000458 <EXTI9_5_IRQHandler+0xa4>)
 80003d2:	695b      	ldr	r3, [r3, #20]
 80003d4:	4798      	blx	r3
	if (EXTI->PR & 1<<EXTI6){EXTI->PR |= 1<<EXTI6;GP_IRQ_CallBack[EXTI6]();}
 80003d6:	4b1f      	ldr	r3, [pc, #124]	; (8000454 <EXTI9_5_IRQHandler+0xa0>)
 80003d8:	695b      	ldr	r3, [r3, #20]
 80003da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d008      	beq.n	80003f4 <EXTI9_5_IRQHandler+0x40>
 80003e2:	4b1c      	ldr	r3, [pc, #112]	; (8000454 <EXTI9_5_IRQHandler+0xa0>)
 80003e4:	695b      	ldr	r3, [r3, #20]
 80003e6:	4a1b      	ldr	r2, [pc, #108]	; (8000454 <EXTI9_5_IRQHandler+0xa0>)
 80003e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003ec:	6153      	str	r3, [r2, #20]
 80003ee:	4b1a      	ldr	r3, [pc, #104]	; (8000458 <EXTI9_5_IRQHandler+0xa4>)
 80003f0:	699b      	ldr	r3, [r3, #24]
 80003f2:	4798      	blx	r3
	if (EXTI->PR & 1<<EXTI7){EXTI->PR |= 1<<EXTI7;GP_IRQ_CallBack[EXTI7]();}
 80003f4:	4b17      	ldr	r3, [pc, #92]	; (8000454 <EXTI9_5_IRQHandler+0xa0>)
 80003f6:	695b      	ldr	r3, [r3, #20]
 80003f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d008      	beq.n	8000412 <EXTI9_5_IRQHandler+0x5e>
 8000400:	4b14      	ldr	r3, [pc, #80]	; (8000454 <EXTI9_5_IRQHandler+0xa0>)
 8000402:	695b      	ldr	r3, [r3, #20]
 8000404:	4a13      	ldr	r2, [pc, #76]	; (8000454 <EXTI9_5_IRQHandler+0xa0>)
 8000406:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800040a:	6153      	str	r3, [r2, #20]
 800040c:	4b12      	ldr	r3, [pc, #72]	; (8000458 <EXTI9_5_IRQHandler+0xa4>)
 800040e:	69db      	ldr	r3, [r3, #28]
 8000410:	4798      	blx	r3
	if (EXTI->PR & 1<<EXTI8){EXTI->PR |= 1<<EXTI8;GP_IRQ_CallBack[EXTI8]();}
 8000412:	4b10      	ldr	r3, [pc, #64]	; (8000454 <EXTI9_5_IRQHandler+0xa0>)
 8000414:	695b      	ldr	r3, [r3, #20]
 8000416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800041a:	2b00      	cmp	r3, #0
 800041c:	d008      	beq.n	8000430 <EXTI9_5_IRQHandler+0x7c>
 800041e:	4b0d      	ldr	r3, [pc, #52]	; (8000454 <EXTI9_5_IRQHandler+0xa0>)
 8000420:	695b      	ldr	r3, [r3, #20]
 8000422:	4a0c      	ldr	r2, [pc, #48]	; (8000454 <EXTI9_5_IRQHandler+0xa0>)
 8000424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000428:	6153      	str	r3, [r2, #20]
 800042a:	4b0b      	ldr	r3, [pc, #44]	; (8000458 <EXTI9_5_IRQHandler+0xa4>)
 800042c:	6a1b      	ldr	r3, [r3, #32]
 800042e:	4798      	blx	r3
	if (EXTI->PR & 1<<EXTI9){EXTI->PR |= 1<<EXTI9;GP_IRQ_CallBack[EXTI9]();}
 8000430:	4b08      	ldr	r3, [pc, #32]	; (8000454 <EXTI9_5_IRQHandler+0xa0>)
 8000432:	695b      	ldr	r3, [r3, #20]
 8000434:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000438:	2b00      	cmp	r3, #0
 800043a:	d008      	beq.n	800044e <EXTI9_5_IRQHandler+0x9a>
 800043c:	4b05      	ldr	r3, [pc, #20]	; (8000454 <EXTI9_5_IRQHandler+0xa0>)
 800043e:	695b      	ldr	r3, [r3, #20]
 8000440:	4a04      	ldr	r2, [pc, #16]	; (8000454 <EXTI9_5_IRQHandler+0xa0>)
 8000442:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000446:	6153      	str	r3, [r2, #20]
 8000448:	4b03      	ldr	r3, [pc, #12]	; (8000458 <EXTI9_5_IRQHandler+0xa4>)
 800044a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800044c:	4798      	blx	r3
}
 800044e:	bf00      	nop
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	40010400 	.word	0x40010400
 8000458:	2000002c 	.word	0x2000002c

0800045c <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
	// must clear PR By Writing one on Bit
	if (EXTI->PR & 1<<EXTI10){EXTI->PR |= 1<<EXTI10;GP_IRQ_CallBack[EXTI10]();}
 8000460:	4b2d      	ldr	r3, [pc, #180]	; (8000518 <EXTI15_10_IRQHandler+0xbc>)
 8000462:	695b      	ldr	r3, [r3, #20]
 8000464:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000468:	2b00      	cmp	r3, #0
 800046a:	d008      	beq.n	800047e <EXTI15_10_IRQHandler+0x22>
 800046c:	4b2a      	ldr	r3, [pc, #168]	; (8000518 <EXTI15_10_IRQHandler+0xbc>)
 800046e:	695b      	ldr	r3, [r3, #20]
 8000470:	4a29      	ldr	r2, [pc, #164]	; (8000518 <EXTI15_10_IRQHandler+0xbc>)
 8000472:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000476:	6153      	str	r3, [r2, #20]
 8000478:	4b28      	ldr	r3, [pc, #160]	; (800051c <EXTI15_10_IRQHandler+0xc0>)
 800047a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800047c:	4798      	blx	r3
	if (EXTI->PR & 1<<EXTI11){EXTI->PR |= 1<<EXTI11;GP_IRQ_CallBack[EXTI11]();}
 800047e:	4b26      	ldr	r3, [pc, #152]	; (8000518 <EXTI15_10_IRQHandler+0xbc>)
 8000480:	695b      	ldr	r3, [r3, #20]
 8000482:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000486:	2b00      	cmp	r3, #0
 8000488:	d008      	beq.n	800049c <EXTI15_10_IRQHandler+0x40>
 800048a:	4b23      	ldr	r3, [pc, #140]	; (8000518 <EXTI15_10_IRQHandler+0xbc>)
 800048c:	695b      	ldr	r3, [r3, #20]
 800048e:	4a22      	ldr	r2, [pc, #136]	; (8000518 <EXTI15_10_IRQHandler+0xbc>)
 8000490:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000494:	6153      	str	r3, [r2, #20]
 8000496:	4b21      	ldr	r3, [pc, #132]	; (800051c <EXTI15_10_IRQHandler+0xc0>)
 8000498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800049a:	4798      	blx	r3
	if (EXTI->PR & 1<<EXTI12){EXTI->PR |= 1<<EXTI12;GP_IRQ_CallBack[EXTI12]();}
 800049c:	4b1e      	ldr	r3, [pc, #120]	; (8000518 <EXTI15_10_IRQHandler+0xbc>)
 800049e:	695b      	ldr	r3, [r3, #20]
 80004a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d008      	beq.n	80004ba <EXTI15_10_IRQHandler+0x5e>
 80004a8:	4b1b      	ldr	r3, [pc, #108]	; (8000518 <EXTI15_10_IRQHandler+0xbc>)
 80004aa:	695b      	ldr	r3, [r3, #20]
 80004ac:	4a1a      	ldr	r2, [pc, #104]	; (8000518 <EXTI15_10_IRQHandler+0xbc>)
 80004ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80004b2:	6153      	str	r3, [r2, #20]
 80004b4:	4b19      	ldr	r3, [pc, #100]	; (800051c <EXTI15_10_IRQHandler+0xc0>)
 80004b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004b8:	4798      	blx	r3
	if (EXTI->PR & 1<<EXTI13){EXTI->PR |= 1<<EXTI13;GP_IRQ_CallBack[EXTI13]();}
 80004ba:	4b17      	ldr	r3, [pc, #92]	; (8000518 <EXTI15_10_IRQHandler+0xbc>)
 80004bc:	695b      	ldr	r3, [r3, #20]
 80004be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d008      	beq.n	80004d8 <EXTI15_10_IRQHandler+0x7c>
 80004c6:	4b14      	ldr	r3, [pc, #80]	; (8000518 <EXTI15_10_IRQHandler+0xbc>)
 80004c8:	695b      	ldr	r3, [r3, #20]
 80004ca:	4a13      	ldr	r2, [pc, #76]	; (8000518 <EXTI15_10_IRQHandler+0xbc>)
 80004cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004d0:	6153      	str	r3, [r2, #20]
 80004d2:	4b12      	ldr	r3, [pc, #72]	; (800051c <EXTI15_10_IRQHandler+0xc0>)
 80004d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004d6:	4798      	blx	r3
	if (EXTI->PR & 1<<EXTI14){EXTI->PR |= 1<<EXTI14;GP_IRQ_CallBack[EXTI14]();}
 80004d8:	4b0f      	ldr	r3, [pc, #60]	; (8000518 <EXTI15_10_IRQHandler+0xbc>)
 80004da:	695b      	ldr	r3, [r3, #20]
 80004dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d008      	beq.n	80004f6 <EXTI15_10_IRQHandler+0x9a>
 80004e4:	4b0c      	ldr	r3, [pc, #48]	; (8000518 <EXTI15_10_IRQHandler+0xbc>)
 80004e6:	695b      	ldr	r3, [r3, #20]
 80004e8:	4a0b      	ldr	r2, [pc, #44]	; (8000518 <EXTI15_10_IRQHandler+0xbc>)
 80004ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004ee:	6153      	str	r3, [r2, #20]
 80004f0:	4b0a      	ldr	r3, [pc, #40]	; (800051c <EXTI15_10_IRQHandler+0xc0>)
 80004f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004f4:	4798      	blx	r3
	if (EXTI->PR & 1<<EXTI15){EXTI->PR |= 1<<EXTI15;GP_IRQ_CallBack[EXTI15]();}
 80004f6:	4b08      	ldr	r3, [pc, #32]	; (8000518 <EXTI15_10_IRQHandler+0xbc>)
 80004f8:	695b      	ldr	r3, [r3, #20]
 80004fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d008      	beq.n	8000514 <EXTI15_10_IRQHandler+0xb8>
 8000502:	4b05      	ldr	r3, [pc, #20]	; (8000518 <EXTI15_10_IRQHandler+0xbc>)
 8000504:	695b      	ldr	r3, [r3, #20]
 8000506:	4a04      	ldr	r2, [pc, #16]	; (8000518 <EXTI15_10_IRQHandler+0xbc>)
 8000508:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800050c:	6153      	str	r3, [r2, #20]
 800050e:	4b03      	ldr	r3, [pc, #12]	; (800051c <EXTI15_10_IRQHandler+0xc0>)
 8000510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000512:	4798      	blx	r3

}
 8000514:	bf00      	nop
 8000516:	bd80      	pop	{r7, pc}
 8000518:	40010400 	.word	0x40010400
 800051c:	2000002c 	.word	0x2000002c

08000520 <Get_CRLH_Position>:
 * 			Note							-NONE																														*
 ********************************************************************************************************************/
#include "GPIO.h"

static uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000520:	b480      	push	{r7}
 8000522:	b085      	sub	sp, #20
 8000524:	af00      	add	r7, sp, #0
 8000526:	4603      	mov	r3, r0
 8000528:	80fb      	strh	r3, [r7, #6]
	uint16_t Loc_Pin_Number = 0 ;
 800052a:	2300      	movs	r3, #0
 800052c:	81fb      	strh	r3, [r7, #14]
	switch(PinNumber)
 800052e:	88fb      	ldrh	r3, [r7, #6]
 8000530:	2b80      	cmp	r3, #128	; 0x80
 8000532:	d049      	beq.n	80005c8 <Get_CRLH_Position+0xa8>
 8000534:	2b80      	cmp	r3, #128	; 0x80
 8000536:	dc11      	bgt.n	800055c <Get_CRLH_Position+0x3c>
 8000538:	2b08      	cmp	r3, #8
 800053a:	d039      	beq.n	80005b0 <Get_CRLH_Position+0x90>
 800053c:	2b08      	cmp	r3, #8
 800053e:	dc06      	bgt.n	800054e <Get_CRLH_Position+0x2e>
 8000540:	2b02      	cmp	r3, #2
 8000542:	d02f      	beq.n	80005a4 <Get_CRLH_Position+0x84>
 8000544:	2b04      	cmp	r3, #4
 8000546:	d030      	beq.n	80005aa <Get_CRLH_Position+0x8a>
 8000548:	2b01      	cmp	r3, #1
 800054a:	d028      	beq.n	800059e <Get_CRLH_Position+0x7e>
 800054c:	e057      	b.n	80005fe <Get_CRLH_Position+0xde>
 800054e:	2b20      	cmp	r3, #32
 8000550:	d034      	beq.n	80005bc <Get_CRLH_Position+0x9c>
 8000552:	2b40      	cmp	r3, #64	; 0x40
 8000554:	d035      	beq.n	80005c2 <Get_CRLH_Position+0xa2>
 8000556:	2b10      	cmp	r3, #16
 8000558:	d02d      	beq.n	80005b6 <Get_CRLH_Position+0x96>
 800055a:	e050      	b.n	80005fe <Get_CRLH_Position+0xde>
 800055c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000560:	d03e      	beq.n	80005e0 <Get_CRLH_Position+0xc0>
 8000562:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000566:	dc09      	bgt.n	800057c <Get_CRLH_Position+0x5c>
 8000568:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800056c:	d032      	beq.n	80005d4 <Get_CRLH_Position+0xb4>
 800056e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000572:	d032      	beq.n	80005da <Get_CRLH_Position+0xba>
 8000574:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000578:	d029      	beq.n	80005ce <Get_CRLH_Position+0xae>
 800057a:	e040      	b.n	80005fe <Get_CRLH_Position+0xde>
 800057c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000580:	d034      	beq.n	80005ec <Get_CRLH_Position+0xcc>
 8000582:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000586:	dc03      	bgt.n	8000590 <Get_CRLH_Position+0x70>
 8000588:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800058c:	d02b      	beq.n	80005e6 <Get_CRLH_Position+0xc6>
 800058e:	e036      	b.n	80005fe <Get_CRLH_Position+0xde>
 8000590:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000594:	d02d      	beq.n	80005f2 <Get_CRLH_Position+0xd2>
 8000596:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800059a:	d02d      	beq.n	80005f8 <Get_CRLH_Position+0xd8>
 800059c:	e02f      	b.n	80005fe <Get_CRLH_Position+0xde>
	{
	case GPIO_PIN_0 :
		Loc_Pin_Number = 0 ;
 800059e:	2300      	movs	r3, #0
 80005a0:	81fb      	strh	r3, [r7, #14]
		break ;
 80005a2:	e02c      	b.n	80005fe <Get_CRLH_Position+0xde>
	case GPIO_PIN_1 :
		Loc_Pin_Number = 4 ;
 80005a4:	2304      	movs	r3, #4
 80005a6:	81fb      	strh	r3, [r7, #14]
		break ;
 80005a8:	e029      	b.n	80005fe <Get_CRLH_Position+0xde>
	case GPIO_PIN_2 :
		Loc_Pin_Number = 8 ;
 80005aa:	2308      	movs	r3, #8
 80005ac:	81fb      	strh	r3, [r7, #14]
		break ;
 80005ae:	e026      	b.n	80005fe <Get_CRLH_Position+0xde>
	case GPIO_PIN_3 :
		Loc_Pin_Number = 12 ;
 80005b0:	230c      	movs	r3, #12
 80005b2:	81fb      	strh	r3, [r7, #14]
		break ;
 80005b4:	e023      	b.n	80005fe <Get_CRLH_Position+0xde>
	case GPIO_PIN_4 :
		Loc_Pin_Number = 16 ;
 80005b6:	2310      	movs	r3, #16
 80005b8:	81fb      	strh	r3, [r7, #14]
		break ;
 80005ba:	e020      	b.n	80005fe <Get_CRLH_Position+0xde>
	case GPIO_PIN_5 :
		Loc_Pin_Number = 20 ;
 80005bc:	2314      	movs	r3, #20
 80005be:	81fb      	strh	r3, [r7, #14]
		break ;
 80005c0:	e01d      	b.n	80005fe <Get_CRLH_Position+0xde>
	case GPIO_PIN_6 :
		Loc_Pin_Number = 24 ;
 80005c2:	2318      	movs	r3, #24
 80005c4:	81fb      	strh	r3, [r7, #14]
		break ;
 80005c6:	e01a      	b.n	80005fe <Get_CRLH_Position+0xde>
	case GPIO_PIN_7 :
		Loc_Pin_Number = 28 ;
 80005c8:	231c      	movs	r3, #28
 80005ca:	81fb      	strh	r3, [r7, #14]
		break ;
 80005cc:	e017      	b.n	80005fe <Get_CRLH_Position+0xde>
	case GPIO_PIN_8 :
		Loc_Pin_Number = 0 ;
 80005ce:	2300      	movs	r3, #0
 80005d0:	81fb      	strh	r3, [r7, #14]
		break ;
 80005d2:	e014      	b.n	80005fe <Get_CRLH_Position+0xde>
	case GPIO_PIN_9 :
		Loc_Pin_Number = 4 ;
 80005d4:	2304      	movs	r3, #4
 80005d6:	81fb      	strh	r3, [r7, #14]
		break ;
 80005d8:	e011      	b.n	80005fe <Get_CRLH_Position+0xde>
	case GPIO_PIN_10 :
		Loc_Pin_Number = 8 ;
 80005da:	2308      	movs	r3, #8
 80005dc:	81fb      	strh	r3, [r7, #14]
		break ;
 80005de:	e00e      	b.n	80005fe <Get_CRLH_Position+0xde>
	case GPIO_PIN_11 :
		Loc_Pin_Number = 12 ;
 80005e0:	230c      	movs	r3, #12
 80005e2:	81fb      	strh	r3, [r7, #14]
		break ;
 80005e4:	e00b      	b.n	80005fe <Get_CRLH_Position+0xde>
	case GPIO_PIN_12 :
		Loc_Pin_Number = 16 ;
 80005e6:	2310      	movs	r3, #16
 80005e8:	81fb      	strh	r3, [r7, #14]
		break ;
 80005ea:	e008      	b.n	80005fe <Get_CRLH_Position+0xde>
	case GPIO_PIN_13 :
		Loc_Pin_Number = 20 ;
 80005ec:	2314      	movs	r3, #20
 80005ee:	81fb      	strh	r3, [r7, #14]
		break ;
 80005f0:	e005      	b.n	80005fe <Get_CRLH_Position+0xde>
	case GPIO_PIN_14 :
		Loc_Pin_Number = 24 ;
 80005f2:	2318      	movs	r3, #24
 80005f4:	81fb      	strh	r3, [r7, #14]
		break ;
 80005f6:	e002      	b.n	80005fe <Get_CRLH_Position+0xde>
	case GPIO_PIN_15 :
		Loc_Pin_Number = 28 ;
 80005f8:	231c      	movs	r3, #28
 80005fa:	81fb      	strh	r3, [r7, #14]
		break ;
 80005fc:	bf00      	nop
	}
	return Loc_Pin_Number ;
 80005fe:	89fb      	ldrh	r3, [r7, #14]
 8000600:	b2db      	uxtb	r3, r3
}
 8000602:	4618      	mov	r0, r3
 8000604:	3714      	adds	r7, #20
 8000606:	46bd      	mov	sp, r7
 8000608:	bc80      	pop	{r7}
 800060a:	4770      	bx	lr

0800060c <MCAL_GPIO_INIT>:
 * 												-contain the configratoiin of GPIO PIN
 * 			@retval						-NONE																														*
 * 			Note							--stm32f103c6 has GPIO A : E BUT LQFP48 has A ,B 	,part of c , d pins																														*
 ********************************************************************************************************************/
void MCAL_GPIO_INIT(GPIO_Typedef * GPIOX,GPIO_PinCongif_t* pinconfig)
{
 800060c:	b590      	push	{r4, r7, lr}
 800060e:	b085      	sub	sp, #20
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	6039      	str	r1, [r7, #0]
	volatile uint32_t* Loc_Config_Regester = NULL ;
 8000616:	2300      	movs	r3, #0
 8000618:	60bb      	str	r3, [r7, #8]
	uint8_t	 Loc_Pin_Congif	=	0 ;
 800061a:	2300      	movs	r3, #0
 800061c:	73fb      	strb	r3, [r7, #15]
	Loc_Config_Regester = (pinconfig->GPIO_PinNumber<GPIO_PIN_8)? 	&GPIOX->CRL	:	&GPIOX->CRH 	 ;
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	881b      	ldrh	r3, [r3, #0]
 8000622:	2bff      	cmp	r3, #255	; 0xff
 8000624:	d801      	bhi.n	800062a <MCAL_GPIO_INIT+0x1e>
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	e001      	b.n	800062e <MCAL_GPIO_INIT+0x22>
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	3304      	adds	r3, #4
 800062e:	60bb      	str	r3, [r7, #8]
	*(Loc_Config_Regester) &=~(0x0f<<(Get_CRLH_Position(pinconfig->GPIO_PinNumber)));
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	881b      	ldrh	r3, [r3, #0]
 8000634:	4618      	mov	r0, r3
 8000636:	f7ff ff73 	bl	8000520 <Get_CRLH_Position>
 800063a:	4603      	mov	r3, r0
 800063c:	461a      	mov	r2, r3
 800063e:	230f      	movs	r3, #15
 8000640:	4093      	lsls	r3, r2
 8000642:	43da      	mvns	r2, r3
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	401a      	ands	r2, r3
 800064a:	68bb      	ldr	r3, [r7, #8]
 800064c:	601a      	str	r2, [r3, #0]
	if (pinconfig->GPIO_MODE==GPIO_Mode_OUTPUT_OD || pinconfig->GPIO_MODE==GPIO_Mode_OUTPUT_PP||\
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	789b      	ldrb	r3, [r3, #2]
 8000652:	2b05      	cmp	r3, #5
 8000654:	d00b      	beq.n	800066e <MCAL_GPIO_INIT+0x62>
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	789b      	ldrb	r3, [r3, #2]
 800065a:	2b04      	cmp	r3, #4
 800065c:	d007      	beq.n	800066e <MCAL_GPIO_INIT+0x62>
			pinconfig->GPIO_MODE==GPIO_Mode_OUTPUT_AF_OD ||pinconfig->GPIO_MODE==GPIO_Mode_OUTPUT_AF_PP)
 800065e:	683b      	ldr	r3, [r7, #0]
 8000660:	789b      	ldrb	r3, [r3, #2]
	if (pinconfig->GPIO_MODE==GPIO_Mode_OUTPUT_OD || pinconfig->GPIO_MODE==GPIO_Mode_OUTPUT_PP||\
 8000662:	2b07      	cmp	r3, #7
 8000664:	d003      	beq.n	800066e <MCAL_GPIO_INIT+0x62>
			pinconfig->GPIO_MODE==GPIO_Mode_OUTPUT_AF_OD ||pinconfig->GPIO_MODE==GPIO_Mode_OUTPUT_AF_PP)
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	789b      	ldrb	r3, [r3, #2]
 800066a:	2b06      	cmp	r3, #6
 800066c:	d10e      	bne.n	800068c <MCAL_GPIO_INIT+0x80>
	{
		Loc_Pin_Congif = ((((pinconfig->GPIO_MODE-4)<<2) | (pinconfig->GPIO_OutPut_Speed))&0x0f) ;
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	789b      	ldrb	r3, [r3, #2]
 8000672:	3b04      	subs	r3, #4
 8000674:	009b      	lsls	r3, r3, #2
 8000676:	b25a      	sxtb	r2, r3
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	78db      	ldrb	r3, [r3, #3]
 800067c:	b25b      	sxtb	r3, r3
 800067e:	4313      	orrs	r3, r2
 8000680:	b25b      	sxtb	r3, r3
 8000682:	b2db      	uxtb	r3, r3
 8000684:	f003 030f 	and.w	r3, r3, #15
 8000688:	73fb      	strb	r3, [r7, #15]
 800068a:	e031      	b.n	80006f0 <MCAL_GPIO_INIT+0xe4>
	}
	else
	{
		if((pinconfig->GPIO_MODE==GPIO_Mode_INPUT_FLO)||(pinconfig->GPIO_MODE==GPIO_Mode_Analog))
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	789b      	ldrb	r3, [r3, #2]
 8000690:	2b01      	cmp	r3, #1
 8000692:	d003      	beq.n	800069c <MCAL_GPIO_INIT+0x90>
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	789b      	ldrb	r3, [r3, #2]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d107      	bne.n	80006ac <MCAL_GPIO_INIT+0xa0>
		{
			Loc_Pin_Congif = ((((pinconfig->GPIO_MODE)<<2) |0x0)&0x0f) ;
 800069c:	683b      	ldr	r3, [r7, #0]
 800069e:	789b      	ldrb	r3, [r3, #2]
 80006a0:	009b      	lsls	r3, r3, #2
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	f003 030f 	and.w	r3, r3, #15
 80006a8:	73fb      	strb	r3, [r7, #15]
 80006aa:	e021      	b.n	80006f0 <MCAL_GPIO_INIT+0xe4>
		}
		else if (pinconfig->GPIO_MODE==GPIO_Mode_AF_INPUT)
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	789b      	ldrb	r3, [r3, #2]
 80006b0:	2b08      	cmp	r3, #8
 80006b2:	d102      	bne.n	80006ba <MCAL_GPIO_INIT+0xae>
		{
			Loc_Pin_Congif = (((GPIO_Mode_INPUT_FLO<<2) |0x0)&0x0f) ;
 80006b4:	2304      	movs	r3, #4
 80006b6:	73fb      	strb	r3, [r7, #15]
 80006b8:	e01a      	b.n	80006f0 <MCAL_GPIO_INIT+0xe4>
		}
		else
		{
			Loc_Pin_Congif =(( (pinconfig->GPIO_MODE<< 2) |0x0)&0x0F) ;
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	789b      	ldrb	r3, [r3, #2]
 80006be:	009b      	lsls	r3, r3, #2
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	f003 030f 	and.w	r3, r3, #15
 80006c6:	73fb      	strb	r3, [r7, #15]
			if (pinconfig->GPIO_MODE == GPIO_Mode_INPUT_PU)
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	789b      	ldrb	r3, [r3, #2]
 80006cc:	2b02      	cmp	r3, #2
 80006ce:	d107      	bne.n	80006e0 <MCAL_GPIO_INIT+0xd4>
			{
				GPIOX->ODR |= pinconfig->GPIO_PinNumber ;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	68db      	ldr	r3, [r3, #12]
 80006d4:	683a      	ldr	r2, [r7, #0]
 80006d6:	8812      	ldrh	r2, [r2, #0]
 80006d8:	431a      	orrs	r2, r3
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	e007      	b.n	80006f0 <MCAL_GPIO_INIT+0xe4>
			}
			else
			{
				GPIOX->ODR &=~ (pinconfig->GPIO_PinNumber) ;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	68db      	ldr	r3, [r3, #12]
 80006e4:	683a      	ldr	r2, [r7, #0]
 80006e6:	8812      	ldrh	r2, [r2, #0]
 80006e8:	43d2      	mvns	r2, r2
 80006ea:	401a      	ands	r2, r3
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	60da      	str	r2, [r3, #12]
			}
		}
	}
	(*Loc_Config_Regester) |= ((Loc_Pin_Congif)<<Get_CRLH_Position(pinconfig->GPIO_PinNumber)) ;
 80006f0:	7bfc      	ldrb	r4, [r7, #15]
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	881b      	ldrh	r3, [r3, #0]
 80006f6:	4618      	mov	r0, r3
 80006f8:	f7ff ff12 	bl	8000520 <Get_CRLH_Position>
 80006fc:	4603      	mov	r3, r0
 80006fe:	fa04 f203 	lsl.w	r2, r4, r3
 8000702:	68bb      	ldr	r3, [r7, #8]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	431a      	orrs	r2, r3
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	601a      	str	r2, [r3, #0]

}
 800070c:	bf00      	nop
 800070e:	3714      	adds	r7, #20
 8000710:	46bd      	mov	sp, r7
 8000712:	bd90      	pop	{r4, r7, pc}

08000714 <MCAL_GPIO_Write_PIN>:
 * 			@param [in]				-value : PIN VALUE																												*
 * 			@retval					- NONE																																*																									*
 * 			Note							-NONE																																	*
 ********************************************************************************************************************/
void MCAL_GPIO_Write_PIN(GPIO_Typedef * GPIOX,uint16_t Pin_Number,uint8_t value)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
 800071c:	460b      	mov	r3, r1
 800071e:	807b      	strh	r3, [r7, #2]
 8000720:	4613      	mov	r3, r2
 8000722:	707b      	strb	r3, [r7, #1]
	if (value!=LOW)
 8000724:	787b      	ldrb	r3, [r7, #1]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d003      	beq.n	8000732 <MCAL_GPIO_Write_PIN+0x1e>
	{
		//GPIOX->ODR |= (uint32_t)Pin_Number ;
		GPIOX->BSRR = (uint32_t)Pin_Number ;
 800072a:	887a      	ldrh	r2, [r7, #2]
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	611a      	str	r2, [r3, #16]
	}else
	{
		//	GPIOX->ODR &= ~((uint32_t)Pin_Number) ;
		GPIOX->BRR = (uint32_t)Pin_Number ;
	}
}
 8000730:	e002      	b.n	8000738 <MCAL_GPIO_Write_PIN+0x24>
		GPIOX->BRR = (uint32_t)Pin_Number ;
 8000732:	887a      	ldrh	r2, [r7, #2]
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	615a      	str	r2, [r3, #20]
}
 8000738:	bf00      	nop
 800073a:	370c      	adds	r7, #12
 800073c:	46bd      	mov	sp, r7
 800073e:	bc80      	pop	{r7}
 8000740:	4770      	bx	lr
	...

08000744 <MCAL_RCC_GetSYSCLK>:
// 1110: SYSCLK divided by 256
// 1111: SYSCLK divided by 512
const uint8_t AHBprescTablep[16U] ={0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};

uint32_t MCAL_RCC_GetSYSCLK()
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
	switch((RCC->CFGR>>2)&0b11)
 8000748:	4b0a      	ldr	r3, [pc, #40]	; (8000774 <MCAL_RCC_GetSYSCLK+0x30>)
 800074a:	685b      	ldr	r3, [r3, #4]
 800074c:	089b      	lsrs	r3, r3, #2
 800074e:	f003 0303 	and.w	r3, r3, #3
 8000752:	2b01      	cmp	r3, #1
 8000754:	d006      	beq.n	8000764 <MCAL_RCC_GetSYSCLK+0x20>
 8000756:	2b01      	cmp	r3, #1
 8000758:	d302      	bcc.n	8000760 <MCAL_RCC_GetSYSCLK+0x1c>
 800075a:	2b02      	cmp	r3, #2
 800075c:	d004      	beq.n	8000768 <MCAL_RCC_GetSYSCLK+0x24>
 800075e:	e005      	b.n	800076c <MCAL_RCC_GetSYSCLK+0x28>
	{
	case 0 :
		return HSI_CLK ;
 8000760:	4b05      	ldr	r3, [pc, #20]	; (8000778 <MCAL_RCC_GetSYSCLK+0x34>)
 8000762:	e003      	b.n	800076c <MCAL_RCC_GetSYSCLK+0x28>
		break ;
	case 1 :
		return HSE_CLK ;
 8000764:	4b05      	ldr	r3, [pc, #20]	; (800077c <MCAL_RCC_GetSYSCLK+0x38>)
 8000766:	e001      	b.n	800076c <MCAL_RCC_GetSYSCLK+0x28>
		break ;
	case 2 :
		return 16000000 ;
 8000768:	4b04      	ldr	r3, [pc, #16]	; (800077c <MCAL_RCC_GetSYSCLK+0x38>)
 800076a:	e7ff      	b.n	800076c <MCAL_RCC_GetSYSCLK+0x28>
		break ;
	}
}
 800076c:	4618      	mov	r0, r3
 800076e:	46bd      	mov	sp, r7
 8000770:	bc80      	pop	{r7}
 8000772:	4770      	bx	lr
 8000774:	40021000 	.word	0x40021000
 8000778:	007a1200 	.word	0x007a1200
 800077c:	00f42400 	.word	0x00f42400

08000780 <MCAL_RCC_GetHCLK>:
uint32_t MCAL_RCC_GetHCLK()
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
	/* Get SYSCLK source and Compute HCLK frequency ---------------------------*/
	return (MCAL_RCC_GetSYSCLK() >>AHBprescTablep[(RCC->CFGR>>4)&0xF]) ;	//the first shift is Dividing
 8000784:	f7ff ffde 	bl	8000744 <MCAL_RCC_GetSYSCLK>
 8000788:	4601      	mov	r1, r0
 800078a:	4b05      	ldr	r3, [pc, #20]	; (80007a0 <MCAL_RCC_GetHCLK+0x20>)
 800078c:	685b      	ldr	r3, [r3, #4]
 800078e:	091b      	lsrs	r3, r3, #4
 8000790:	f003 030f 	and.w	r3, r3, #15
 8000794:	4a03      	ldr	r2, [pc, #12]	; (80007a4 <MCAL_RCC_GetHCLK+0x24>)
 8000796:	5cd3      	ldrb	r3, [r2, r3]
 8000798:	fa21 f303 	lsr.w	r3, r1, r3

}
 800079c:	4618      	mov	r0, r3
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40021000 	.word	0x40021000
 80007a4:	08000f88 	.word	0x08000f88

080007a8 <MCAL_RCC_GetPCLK1>:
uint32_t MCAL_RCC_GetPCLK1()
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (MCAL_RCC_GetHCLK() >>APBprescTablep[(RCC->CFGR>>8)&0b111]) ;	//the first shift is Dividing
 80007ac:	f7ff ffe8 	bl	8000780 <MCAL_RCC_GetHCLK>
 80007b0:	4601      	mov	r1, r0
 80007b2:	4b05      	ldr	r3, [pc, #20]	; (80007c8 <MCAL_RCC_GetPCLK1+0x20>)
 80007b4:	685b      	ldr	r3, [r3, #4]
 80007b6:	0a1b      	lsrs	r3, r3, #8
 80007b8:	f003 0307 	and.w	r3, r3, #7
 80007bc:	4a03      	ldr	r2, [pc, #12]	; (80007cc <MCAL_RCC_GetPCLK1+0x24>)
 80007be:	5cd3      	ldrb	r3, [r2, r3]
 80007c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	40021000 	.word	0x40021000
 80007cc:	08000f80 	.word	0x08000f80

080007d0 <MCAL_RCC_GetPCLK2>:
uint32_t MCAL_RCC_GetPCLK2()
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
	return (MCAL_RCC_GetHCLK() >>APBprescTablep[(RCC->CFGR>>11)&0b111]) ;		//the first shift is Dividing
 80007d4:	f7ff ffd4 	bl	8000780 <MCAL_RCC_GetHCLK>
 80007d8:	4601      	mov	r1, r0
 80007da:	4b05      	ldr	r3, [pc, #20]	; (80007f0 <MCAL_RCC_GetPCLK2+0x20>)
 80007dc:	685b      	ldr	r3, [r3, #4]
 80007de:	0adb      	lsrs	r3, r3, #11
 80007e0:	f003 0307 	and.w	r3, r3, #7
 80007e4:	4a03      	ldr	r2, [pc, #12]	; (80007f4 <MCAL_RCC_GetPCLK2+0x24>)
 80007e6:	5cd3      	ldrb	r3, [r2, r3]
 80007e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	40021000 	.word	0x40021000
 80007f4:	08000f80 	.word	0x08000f80

080007f8 <MCAL_SPI_INIT>:
 * @retval           -none
 * Note              -support for SPI Full duplex Master and slave only
 * ========================================================================*/

void MCAL_SPI_INIT(SPI_Typedef * SPIx , SPI_ConFig_t* SPI_confg)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b085      	sub	sp, #20
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	6039      	str	r1, [r7, #0]
	//safty for Registers
	uint16_t tempreg_CR1 =0 ;
 8000802:	2300      	movs	r3, #0
 8000804:	81fb      	strh	r3, [r7, #14]
	uint16_t tempreg_CR2 =0 ;
 8000806:	2300      	movs	r3, #0
 8000808:	81bb      	strh	r3, [r7, #12]

	if(SPIx ==SPI1)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	4a3b      	ldr	r2, [pc, #236]	; (80008fc <MCAL_SPI_INIT+0x104>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d109      	bne.n	8000826 <MCAL_SPI_INIT+0x2e>
	{
		Global_SPI_Config[SPI1_Index] = SPI_confg ;
 8000812:	4a3b      	ldr	r2, [pc, #236]	; (8000900 <MCAL_SPI_INIT+0x108>)
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	6013      	str	r3, [r2, #0]
		RCC_SPI1_CLK_EN();
 8000818:	4b3a      	ldr	r3, [pc, #232]	; (8000904 <MCAL_SPI_INIT+0x10c>)
 800081a:	699b      	ldr	r3, [r3, #24]
 800081c:	4a39      	ldr	r2, [pc, #228]	; (8000904 <MCAL_SPI_INIT+0x10c>)
 800081e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000822:	6193      	str	r3, [r2, #24]
 8000824:	e00c      	b.n	8000840 <MCAL_SPI_INIT+0x48>

	}
	else if(SPIx ==SPI2)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	4a37      	ldr	r2, [pc, #220]	; (8000908 <MCAL_SPI_INIT+0x110>)
 800082a:	4293      	cmp	r3, r2
 800082c:	d108      	bne.n	8000840 <MCAL_SPI_INIT+0x48>
	{
		Global_SPI_Config[SPI2_Index] = SPI_confg ;
 800082e:	4a34      	ldr	r2, [pc, #208]	; (8000900 <MCAL_SPI_INIT+0x108>)
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	6053      	str	r3, [r2, #4]
		RCC_SPI2_CLK_EN();
 8000834:	4b33      	ldr	r3, [pc, #204]	; (8000904 <MCAL_SPI_INIT+0x10c>)
 8000836:	69db      	ldr	r3, [r3, #28]
 8000838:	4a32      	ldr	r2, [pc, #200]	; (8000904 <MCAL_SPI_INIT+0x10c>)
 800083a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800083e:	61d3      	str	r3, [r2, #28]
	}

	//Enable SPI CR1:Bit6 SPE
	tempreg_CR1 = (0x1U <<6);
 8000840:	2340      	movs	r3, #64	; 0x40
 8000842:	81fb      	strh	r3, [r7, #14]

	//Master 0r slave
	tempreg_CR1 |= SPI_confg->Device_Mode;
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	881a      	ldrh	r2, [r3, #0]
 8000848:	89fb      	ldrh	r3, [r7, #14]
 800084a:	4313      	orrs	r3, r2
 800084c:	81fb      	strh	r3, [r7, #14]

	//SPI Communication mode
	tempreg_CR1 |= SPI_confg->Communication_Mode;
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	885a      	ldrh	r2, [r3, #2]
 8000852:	89fb      	ldrh	r3, [r7, #14]
 8000854:	4313      	orrs	r3, r2
 8000856:	81fb      	strh	r3, [r7, #14]

	//SPI Frame format
	tempreg_CR1 |= SPI_confg->frame_format;
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	889a      	ldrh	r2, [r3, #4]
 800085c:	89fb      	ldrh	r3, [r7, #14]
 800085e:	4313      	orrs	r3, r2
 8000860:	81fb      	strh	r3, [r7, #14]

	//SPI Data size
	tempreg_CR1 |= SPI_confg->Data_Size;
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	88da      	ldrh	r2, [r3, #6]
 8000866:	89fb      	ldrh	r3, [r7, #14]
 8000868:	4313      	orrs	r3, r2
 800086a:	81fb      	strh	r3, [r7, #14]

	//SPI CLOCK POLARITY
	tempreg_CR1 |= SPI_confg->CLKPolarity;
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	891a      	ldrh	r2, [r3, #8]
 8000870:	89fb      	ldrh	r3, [r7, #14]
 8000872:	4313      	orrs	r3, r2
 8000874:	81fb      	strh	r3, [r7, #14]

	//SPI CLOCK PHASE
	tempreg_CR1 |= SPI_confg->CLKPhase;
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	895a      	ldrh	r2, [r3, #10]
 800087a:	89fb      	ldrh	r3, [r7, #14]
 800087c:	4313      	orrs	r3, r2
 800087e:	81fb      	strh	r3, [r7, #14]

	//===================================NSS=================
	if(SPI_confg->NSS == SPI_NSS_Hard_Master_SS_output_enable)
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	899b      	ldrh	r3, [r3, #12]
 8000884:	2b04      	cmp	r3, #4
 8000886:	d105      	bne.n	8000894 <MCAL_SPI_INIT+0x9c>
	{
		tempreg_CR2 |= SPI_confg->NSS;
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	899a      	ldrh	r2, [r3, #12]
 800088c:	89bb      	ldrh	r3, [r7, #12]
 800088e:	4313      	orrs	r3, r2
 8000890:	81bb      	strh	r3, [r7, #12]
 8000892:	e004      	b.n	800089e <MCAL_SPI_INIT+0xa6>
	{
		tempreg_CR2 &= SPI_confg->NSS;   // ~(0x1U<<2)   //SPI_CR2 bit2
	}
	else
	{
		tempreg_CR1 |= SPI_confg->NSS;
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	899a      	ldrh	r2, [r3, #12]
 8000898:	89fb      	ldrh	r3, [r7, #14]
 800089a:	4313      	orrs	r3, r2
 800089c:	81fb      	strh	r3, [r7, #14]
	}

	//baud rate
	tempreg_CR1 |= SPI_confg->SPI_BAUDRATEPrescaler;
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	89da      	ldrh	r2, [r3, #14]
 80008a2:	89fb      	ldrh	r3, [r7, #14]
 80008a4:	4313      	orrs	r3, r2
 80008a6:	81fb      	strh	r3, [r7, #14]

	//IRQ
	if(SPI_confg ->IRQ_Enable != SPI_IRQ_Enable_NONE)
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	8a1b      	ldrh	r3, [r3, #16]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d019      	beq.n	80008e4 <MCAL_SPI_INIT+0xec>
	{
		// SPI_IRQ Enable
		tempreg_CR2 |= SPI_confg->IRQ_Enable;
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	8a1a      	ldrh	r2, [r3, #16]
 80008b4:	89bb      	ldrh	r3, [r7, #12]
 80008b6:	4313      	orrs	r3, r2
 80008b8:	81bb      	strh	r3, [r7, #12]
		if(SPIx == SPI1)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	4a0f      	ldr	r2, [pc, #60]	; (80008fc <MCAL_SPI_INIT+0x104>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d106      	bne.n	80008d0 <MCAL_SPI_INIT+0xd8>
		{
			NVIC_IRQ35_SPI1_Enable ;
 80008c2:	4b12      	ldr	r3, [pc, #72]	; (800090c <MCAL_SPI_INIT+0x114>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4a11      	ldr	r2, [pc, #68]	; (800090c <MCAL_SPI_INIT+0x114>)
 80008c8:	f043 0308 	orr.w	r3, r3, #8
 80008cc:	6013      	str	r3, [r2, #0]
 80008ce:	e009      	b.n	80008e4 <MCAL_SPI_INIT+0xec>
		}
		else if(SPIx == SPI2)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	4a0d      	ldr	r2, [pc, #52]	; (8000908 <MCAL_SPI_INIT+0x110>)
 80008d4:	4293      	cmp	r3, r2
 80008d6:	d105      	bne.n	80008e4 <MCAL_SPI_INIT+0xec>
		{
			NVIC_IRQ36_SPI2_Enable ;
 80008d8:	4b0c      	ldr	r3, [pc, #48]	; (800090c <MCAL_SPI_INIT+0x114>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a0b      	ldr	r2, [pc, #44]	; (800090c <MCAL_SPI_INIT+0x114>)
 80008de:	f043 0310 	orr.w	r3, r3, #16
 80008e2:	6013      	str	r3, [r2, #0]
		}
	}

	SPIx->CR1 = tempreg_CR1 ;
 80008e4:	89fa      	ldrh	r2, [r7, #14]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	601a      	str	r2, [r3, #0]
	SPIx->CR2 = tempreg_CR2 ;
 80008ea:	89ba      	ldrh	r2, [r7, #12]
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	605a      	str	r2, [r3, #4]
}
 80008f0:	bf00      	nop
 80008f2:	3714      	adds	r7, #20
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bc80      	pop	{r7}
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	40013000 	.word	0x40013000
 8000900:	2000001c 	.word	0x2000001c
 8000904:	40021000 	.word	0x40021000
 8000908:	40003800 	.word	0x40003800
 800090c:	e000e104 	.word	0xe000e104

08000910 <MCAL_SPI_TX_RX>:
 *param[in]          -PollingEn enable or disable the polling
 * @retval           -none
 * Note              -none
 *===================================================================*/
void MCAL_SPI_TX_RX(SPI_Typedef * SPIx , uint16_t* pTxBuffer , Polling_mechanism_t PollingEn)
{
 8000910:	b480      	push	{r7}
 8000912:	b085      	sub	sp, #20
 8000914:	af00      	add	r7, sp, #0
 8000916:	60f8      	str	r0, [r7, #12]
 8000918:	60b9      	str	r1, [r7, #8]
 800091a:	4613      	mov	r3, r2
 800091c:	71fb      	strb	r3, [r7, #7]

	if(PollingEn == Enable)
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d106      	bne.n	8000932 <MCAL_SPI_TX_RX+0x22>
	{
		while(! ((SPIx->SR) & SPI_SR_TXE)); //wait until the TX buffer be empty
 8000924:	bf00      	nop
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	689b      	ldr	r3, [r3, #8]
 800092a:	f003 0302 	and.w	r3, r3, #2
 800092e:	2b00      	cmp	r3, #0
 8000930:	d0f9      	beq.n	8000926 <MCAL_SPI_TX_RX+0x16>
	}
	SPIx->DR = *pTxBuffer;
 8000932:	68bb      	ldr	r3, [r7, #8]
 8000934:	881b      	ldrh	r3, [r3, #0]
 8000936:	461a      	mov	r2, r3
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	60da      	str	r2, [r3, #12]

	if(PollingEn == Enable)
 800093c:	79fb      	ldrb	r3, [r7, #7]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d106      	bne.n	8000950 <MCAL_SPI_TX_RX+0x40>
	{
		while(! ((SPIx->SR) & SPI_SR_RXNE)); //wait until the RX buffer be not empty
 8000942:	bf00      	nop
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	689b      	ldr	r3, [r3, #8]
 8000948:	f003 0301 	and.w	r3, r3, #1
 800094c:	2b00      	cmp	r3, #0
 800094e:	d0f9      	beq.n	8000944 <MCAL_SPI_TX_RX+0x34>
	}
	*pTxBuffer = SPIx->DR;
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	68db      	ldr	r3, [r3, #12]
 8000954:	b29a      	uxth	r2, r3
 8000956:	68bb      	ldr	r3, [r7, #8]
 8000958:	801a      	strh	r2, [r3, #0]
}
 800095a:	bf00      	nop
 800095c:	3714      	adds	r7, #20
 800095e:	46bd      	mov	sp, r7
 8000960:	bc80      	pop	{r7}
 8000962:	4770      	bx	lr

08000964 <MCAL_SPI_GPIO_Set_Pins>:
 * @retval           -none
 * Note              -should enable the corresponding ALT &GPIO in RCC CLOCK AND called after MCAL_SPI_INIT()
 *===========================================================================================================*/

void MCAL_SPI_GPIO_Set_Pins (SPI_Typedef * SPIx)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
	GPIO_PinCongif_t pincfg;
	if (SPIx == SPI1)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	4a81      	ldr	r2, [pc, #516]	; (8000b74 <MCAL_SPI_GPIO_Set_Pins+0x210>)
 8000970:	4293      	cmp	r3, r2
 8000972:	d177      	bne.n	8000a64 <MCAL_SPI_GPIO_Set_Pins+0x100>
		//PA5 :SPI1_SCK
		//PA6 :SPI1_MISO
		//PA7 :SPI1_MOSI
		//from recommendation table in GPIO chapter

		if(Global_SPI_Config[SPI1_Index]->Device_Mode ==SPI_Device_Mode_Master)
 8000974:	4b80      	ldr	r3, [pc, #512]	; (8000b78 <MCAL_SPI_GPIO_Set_Pins+0x214>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	881b      	ldrh	r3, [r3, #0]
 800097a:	2b04      	cmp	r3, #4
 800097c:	d142      	bne.n	8000a04 <MCAL_SPI_GPIO_Set_Pins+0xa0>
		{
			//PA4 :SPI1_NSS

			switch(Global_SPI_Config[SPI1_Index]->NSS)
 800097e:	4b7e      	ldr	r3, [pc, #504]	; (8000b78 <MCAL_SPI_GPIO_Set_Pins+0x214>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	899b      	ldrh	r3, [r3, #12]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d002      	beq.n	800098e <MCAL_SPI_GPIO_Set_Pins+0x2a>
 8000988:	2b04      	cmp	r3, #4
 800098a:	d00b      	beq.n	80009a4 <MCAL_SPI_GPIO_Set_Pins+0x40>
 800098c:	e017      	b.n	80009be <MCAL_SPI_GPIO_Set_Pins+0x5a>
			{
			case SPI_NSS_Hard_Master_For_Case_output_disable : //NSS input to sense multi master
				//Hardware master input floating
				pincfg.GPIO_PinNumber = GPIO_PIN_4;
 800098e:	2310      	movs	r3, #16
 8000990:	81bb      	strh	r3, [r7, #12]
				pincfg.GPIO_MODE = GPIO_Mode_INPUT_FLO;
 8000992:	2301      	movs	r3, #1
 8000994:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_INIT(GPIOA,&pincfg);
 8000996:	f107 030c 	add.w	r3, r7, #12
 800099a:	4619      	mov	r1, r3
 800099c:	4877      	ldr	r0, [pc, #476]	; (8000b7c <MCAL_SPI_GPIO_Set_Pins+0x218>)
 800099e:	f7ff fe35 	bl	800060c <MCAL_GPIO_INIT>
				break;
 80009a2:	e00c      	b.n	80009be <MCAL_SPI_GPIO_Set_Pins+0x5a>

			case SPI_NSS_Hard_Master_SS_output_enable :
				//Hardware master ALternative output
				pincfg.GPIO_PinNumber = GPIO_PIN_4;
 80009a4:	2310      	movs	r3, #16
 80009a6:	81bb      	strh	r3, [r7, #12]
				pincfg.GPIO_MODE = GPIO_Mode_OUTPUT_AF_PP;
 80009a8:	2306      	movs	r3, #6
 80009aa:	73bb      	strb	r3, [r7, #14]
				pincfg.GPIO_OutPut_Speed = GPIO_SPEED_10M;
 80009ac:	2301      	movs	r3, #1
 80009ae:	73fb      	strb	r3, [r7, #15]
				MCAL_GPIO_INIT(GPIOA,&pincfg);
 80009b0:	f107 030c 	add.w	r3, r7, #12
 80009b4:	4619      	mov	r1, r3
 80009b6:	4871      	ldr	r0, [pc, #452]	; (8000b7c <MCAL_SPI_GPIO_Set_Pins+0x218>)
 80009b8:	f7ff fe28 	bl	800060c <MCAL_GPIO_INIT>
				break;
 80009bc:	bf00      	nop

			}
			//PA5 :SPI1_SCK
			//Master output alternative function push pull
			pincfg.GPIO_PinNumber = GPIO_PIN_5;
 80009be:	2320      	movs	r3, #32
 80009c0:	81bb      	strh	r3, [r7, #12]
			pincfg.GPIO_MODE = GPIO_Mode_OUTPUT_AF_PP;
 80009c2:	2306      	movs	r3, #6
 80009c4:	73bb      	strb	r3, [r7, #14]
			pincfg.GPIO_OutPut_Speed = GPIO_SPEED_10M;
 80009c6:	2301      	movs	r3, #1
 80009c8:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_INIT(GPIOA,&pincfg);
 80009ca:	f107 030c 	add.w	r3, r7, #12
 80009ce:	4619      	mov	r1, r3
 80009d0:	486a      	ldr	r0, [pc, #424]	; (8000b7c <MCAL_SPI_GPIO_Set_Pins+0x218>)
 80009d2:	f7ff fe1b 	bl	800060c <MCAL_GPIO_INIT>

			//PA6 :SPI1_MISO
			//Master input floating in case of FULL Duplex
			pincfg.GPIO_PinNumber = GPIO_PIN_6;
 80009d6:	2340      	movs	r3, #64	; 0x40
 80009d8:	81bb      	strh	r3, [r7, #12]
			pincfg.GPIO_MODE = GPIO_Mode_INPUT_FLO;
 80009da:	2301      	movs	r3, #1
 80009dc:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_INIT(GPIOA,&pincfg);
 80009de:	f107 030c 	add.w	r3, r7, #12
 80009e2:	4619      	mov	r1, r3
 80009e4:	4865      	ldr	r0, [pc, #404]	; (8000b7c <MCAL_SPI_GPIO_Set_Pins+0x218>)
 80009e6:	f7ff fe11 	bl	800060c <MCAL_GPIO_INIT>

			//PA7 :SPI1_MOSI
			//Master ouput alternative function PP in case of FULL Duplex

			pincfg.GPIO_PinNumber = GPIO_PIN_7;
 80009ea:	2380      	movs	r3, #128	; 0x80
 80009ec:	81bb      	strh	r3, [r7, #12]
			pincfg.GPIO_MODE = GPIO_Mode_OUTPUT_AF_PP;
 80009ee:	2306      	movs	r3, #6
 80009f0:	73bb      	strb	r3, [r7, #14]
			pincfg.GPIO_OutPut_Speed = GPIO_SPEED_10M;
 80009f2:	2301      	movs	r3, #1
 80009f4:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_INIT(GPIOA,&pincfg);
 80009f6:	f107 030c 	add.w	r3, r7, #12
 80009fa:	4619      	mov	r1, r3
 80009fc:	485f      	ldr	r0, [pc, #380]	; (8000b7c <MCAL_SPI_GPIO_Set_Pins+0x218>)
 80009fe:	f7ff fe05 	bl	800060c <MCAL_GPIO_INIT>
			MCAL_GPIO_INIT(GPIOB,&pincfg);

		}

	}
}
 8000a02:	e0b3      	b.n	8000b6c <MCAL_SPI_GPIO_Set_Pins+0x208>
			if(Global_SPI_Config[SPI1_Index]->NSS == SPI_NSS_Hard_Slave) //in case of sw there is no gpio configuration
 8000a04:	4b5c      	ldr	r3, [pc, #368]	; (8000b78 <MCAL_SPI_GPIO_Set_Pins+0x214>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	899b      	ldrh	r3, [r3, #12]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d109      	bne.n	8000a22 <MCAL_SPI_GPIO_Set_Pins+0xbe>
				pincfg.GPIO_PinNumber = GPIO_PIN_4;
 8000a0e:	2310      	movs	r3, #16
 8000a10:	81bb      	strh	r3, [r7, #12]
				pincfg.GPIO_MODE = GPIO_Mode_INPUT_FLO;
 8000a12:	2301      	movs	r3, #1
 8000a14:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_INIT(GPIOA,&pincfg);
 8000a16:	f107 030c 	add.w	r3, r7, #12
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4857      	ldr	r0, [pc, #348]	; (8000b7c <MCAL_SPI_GPIO_Set_Pins+0x218>)
 8000a1e:	f7ff fdf5 	bl	800060c <MCAL_GPIO_INIT>
			pincfg.GPIO_PinNumber = GPIO_PIN_5;
 8000a22:	2320      	movs	r3, #32
 8000a24:	81bb      	strh	r3, [r7, #12]
			pincfg.GPIO_MODE = GPIO_Mode_INPUT_FLO;
 8000a26:	2301      	movs	r3, #1
 8000a28:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_INIT(GPIOA,&pincfg);
 8000a2a:	f107 030c 	add.w	r3, r7, #12
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4852      	ldr	r0, [pc, #328]	; (8000b7c <MCAL_SPI_GPIO_Set_Pins+0x218>)
 8000a32:	f7ff fdeb 	bl	800060c <MCAL_GPIO_INIT>
			pincfg.GPIO_PinNumber = GPIO_PIN_6;
 8000a36:	2340      	movs	r3, #64	; 0x40
 8000a38:	81bb      	strh	r3, [r7, #12]
			pincfg.GPIO_MODE = GPIO_Mode_OUTPUT_AF_PP;
 8000a3a:	2306      	movs	r3, #6
 8000a3c:	73bb      	strb	r3, [r7, #14]
			pincfg.GPIO_OutPut_Speed = GPIO_SPEED_10M;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_INIT(GPIOA,&pincfg);
 8000a42:	f107 030c 	add.w	r3, r7, #12
 8000a46:	4619      	mov	r1, r3
 8000a48:	484c      	ldr	r0, [pc, #304]	; (8000b7c <MCAL_SPI_GPIO_Set_Pins+0x218>)
 8000a4a:	f7ff fddf 	bl	800060c <MCAL_GPIO_INIT>
			pincfg.GPIO_PinNumber = GPIO_PIN_7;
 8000a4e:	2380      	movs	r3, #128	; 0x80
 8000a50:	81bb      	strh	r3, [r7, #12]
			pincfg.GPIO_MODE = GPIO_Mode_INPUT_FLO;
 8000a52:	2301      	movs	r3, #1
 8000a54:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_INIT(GPIOA,&pincfg);
 8000a56:	f107 030c 	add.w	r3, r7, #12
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4847      	ldr	r0, [pc, #284]	; (8000b7c <MCAL_SPI_GPIO_Set_Pins+0x218>)
 8000a5e:	f7ff fdd5 	bl	800060c <MCAL_GPIO_INIT>
}
 8000a62:	e083      	b.n	8000b6c <MCAL_SPI_GPIO_Set_Pins+0x208>
	else if (SPIx == SPI2)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	4a46      	ldr	r2, [pc, #280]	; (8000b80 <MCAL_SPI_GPIO_Set_Pins+0x21c>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d17f      	bne.n	8000b6c <MCAL_SPI_GPIO_Set_Pins+0x208>
		if(Global_SPI_Config[SPI2_Index]->Device_Mode ==SPI_Device_Mode_Master)
 8000a6c:	4b42      	ldr	r3, [pc, #264]	; (8000b78 <MCAL_SPI_GPIO_Set_Pins+0x214>)
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	881b      	ldrh	r3, [r3, #0]
 8000a72:	2b04      	cmp	r3, #4
 8000a74:	d147      	bne.n	8000b06 <MCAL_SPI_GPIO_Set_Pins+0x1a2>
			switch(Global_SPI_Config[SPI2_Index]->NSS)
 8000a76:	4b40      	ldr	r3, [pc, #256]	; (8000b78 <MCAL_SPI_GPIO_Set_Pins+0x214>)
 8000a78:	685b      	ldr	r3, [r3, #4]
 8000a7a:	899b      	ldrh	r3, [r3, #12]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d002      	beq.n	8000a86 <MCAL_SPI_GPIO_Set_Pins+0x122>
 8000a80:	2b04      	cmp	r3, #4
 8000a82:	d00c      	beq.n	8000a9e <MCAL_SPI_GPIO_Set_Pins+0x13a>
 8000a84:	e019      	b.n	8000aba <MCAL_SPI_GPIO_Set_Pins+0x156>
				pincfg.GPIO_PinNumber = GPIO_PIN_12;
 8000a86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a8a:	81bb      	strh	r3, [r7, #12]
				pincfg.GPIO_MODE = GPIO_Mode_INPUT_FLO;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_INIT(GPIOB,&pincfg);
 8000a90:	f107 030c 	add.w	r3, r7, #12
 8000a94:	4619      	mov	r1, r3
 8000a96:	483b      	ldr	r0, [pc, #236]	; (8000b84 <MCAL_SPI_GPIO_Set_Pins+0x220>)
 8000a98:	f7ff fdb8 	bl	800060c <MCAL_GPIO_INIT>
				break;
 8000a9c:	e00d      	b.n	8000aba <MCAL_SPI_GPIO_Set_Pins+0x156>
				pincfg.GPIO_PinNumber = GPIO_PIN_12;
 8000a9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aa2:	81bb      	strh	r3, [r7, #12]
				pincfg.GPIO_MODE = GPIO_Mode_OUTPUT_AF_PP;
 8000aa4:	2306      	movs	r3, #6
 8000aa6:	73bb      	strb	r3, [r7, #14]
				pincfg.GPIO_OutPut_Speed = GPIO_SPEED_10M;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	73fb      	strb	r3, [r7, #15]
				MCAL_GPIO_INIT(GPIOB,&pincfg);
 8000aac:	f107 030c 	add.w	r3, r7, #12
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4834      	ldr	r0, [pc, #208]	; (8000b84 <MCAL_SPI_GPIO_Set_Pins+0x220>)
 8000ab4:	f7ff fdaa 	bl	800060c <MCAL_GPIO_INIT>
				break;
 8000ab8:	bf00      	nop
			pincfg.GPIO_PinNumber = GPIO_PIN_13;
 8000aba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000abe:	81bb      	strh	r3, [r7, #12]
			pincfg.GPIO_MODE = GPIO_Mode_OUTPUT_AF_PP;
 8000ac0:	2306      	movs	r3, #6
 8000ac2:	73bb      	strb	r3, [r7, #14]
			pincfg.GPIO_OutPut_Speed = GPIO_SPEED_10M;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_INIT(GPIOB,&pincfg);
 8000ac8:	f107 030c 	add.w	r3, r7, #12
 8000acc:	4619      	mov	r1, r3
 8000ace:	482d      	ldr	r0, [pc, #180]	; (8000b84 <MCAL_SPI_GPIO_Set_Pins+0x220>)
 8000ad0:	f7ff fd9c 	bl	800060c <MCAL_GPIO_INIT>
			pincfg.GPIO_PinNumber = GPIO_PIN_14;
 8000ad4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ad8:	81bb      	strh	r3, [r7, #12]
			pincfg.GPIO_MODE = GPIO_Mode_INPUT_FLO;
 8000ada:	2301      	movs	r3, #1
 8000adc:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_INIT(GPIOB,&pincfg);
 8000ade:	f107 030c 	add.w	r3, r7, #12
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4827      	ldr	r0, [pc, #156]	; (8000b84 <MCAL_SPI_GPIO_Set_Pins+0x220>)
 8000ae6:	f7ff fd91 	bl	800060c <MCAL_GPIO_INIT>
			pincfg.GPIO_PinNumber = GPIO_PIN_15;
 8000aea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000aee:	81bb      	strh	r3, [r7, #12]
			pincfg.GPIO_MODE = GPIO_Mode_OUTPUT_AF_PP;
 8000af0:	2306      	movs	r3, #6
 8000af2:	73bb      	strb	r3, [r7, #14]
			pincfg.GPIO_OutPut_Speed = GPIO_SPEED_10M;
 8000af4:	2301      	movs	r3, #1
 8000af6:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_INIT(GPIOB,&pincfg);
 8000af8:	f107 030c 	add.w	r3, r7, #12
 8000afc:	4619      	mov	r1, r3
 8000afe:	4821      	ldr	r0, [pc, #132]	; (8000b84 <MCAL_SPI_GPIO_Set_Pins+0x220>)
 8000b00:	f7ff fd84 	bl	800060c <MCAL_GPIO_INIT>
}
 8000b04:	e032      	b.n	8000b6c <MCAL_SPI_GPIO_Set_Pins+0x208>
			if(Global_SPI_Config[SPI2_Index]->NSS == SPI_NSS_Hard_Slave) //in case of sw there is no gpio configuration
 8000b06:	4b1c      	ldr	r3, [pc, #112]	; (8000b78 <MCAL_SPI_GPIO_Set_Pins+0x214>)
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	899b      	ldrh	r3, [r3, #12]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d10a      	bne.n	8000b26 <MCAL_SPI_GPIO_Set_Pins+0x1c2>
				pincfg.GPIO_PinNumber = GPIO_PIN_12;
 8000b10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b14:	81bb      	strh	r3, [r7, #12]
				pincfg.GPIO_MODE = GPIO_Mode_INPUT_FLO;
 8000b16:	2301      	movs	r3, #1
 8000b18:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_INIT(GPIOB,&pincfg);
 8000b1a:	f107 030c 	add.w	r3, r7, #12
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4818      	ldr	r0, [pc, #96]	; (8000b84 <MCAL_SPI_GPIO_Set_Pins+0x220>)
 8000b22:	f7ff fd73 	bl	800060c <MCAL_GPIO_INIT>
			pincfg.GPIO_PinNumber = GPIO_PIN_13;
 8000b26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b2a:	81bb      	strh	r3, [r7, #12]
			pincfg.GPIO_MODE = GPIO_Mode_INPUT_FLO;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_INIT(GPIOB,&pincfg);
 8000b30:	f107 030c 	add.w	r3, r7, #12
 8000b34:	4619      	mov	r1, r3
 8000b36:	4813      	ldr	r0, [pc, #76]	; (8000b84 <MCAL_SPI_GPIO_Set_Pins+0x220>)
 8000b38:	f7ff fd68 	bl	800060c <MCAL_GPIO_INIT>
			pincfg.GPIO_PinNumber = GPIO_PIN_14;
 8000b3c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b40:	81bb      	strh	r3, [r7, #12]
			pincfg.GPIO_MODE = GPIO_Mode_OUTPUT_AF_PP;
 8000b42:	2306      	movs	r3, #6
 8000b44:	73bb      	strb	r3, [r7, #14]
			pincfg.GPIO_OutPut_Speed = GPIO_SPEED_10M;
 8000b46:	2301      	movs	r3, #1
 8000b48:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_INIT(GPIOB,&pincfg);
 8000b4a:	f107 030c 	add.w	r3, r7, #12
 8000b4e:	4619      	mov	r1, r3
 8000b50:	480c      	ldr	r0, [pc, #48]	; (8000b84 <MCAL_SPI_GPIO_Set_Pins+0x220>)
 8000b52:	f7ff fd5b 	bl	800060c <MCAL_GPIO_INIT>
			pincfg.GPIO_PinNumber = GPIO_PIN_15;
 8000b56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b5a:	81bb      	strh	r3, [r7, #12]
			pincfg.GPIO_MODE = GPIO_Mode_INPUT_FLO;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_INIT(GPIOB,&pincfg);
 8000b60:	f107 030c 	add.w	r3, r7, #12
 8000b64:	4619      	mov	r1, r3
 8000b66:	4807      	ldr	r0, [pc, #28]	; (8000b84 <MCAL_SPI_GPIO_Set_Pins+0x220>)
 8000b68:	f7ff fd50 	bl	800060c <MCAL_GPIO_INIT>
}
 8000b6c:	bf00      	nop
 8000b6e:	3710      	adds	r7, #16
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40013000 	.word	0x40013000
 8000b78:	2000001c 	.word	0x2000001c
 8000b7c:	40010800 	.word	0x40010800
 8000b80:	40003800 	.word	0x40003800
 8000b84:	40010c00 	.word	0x40010c00

08000b88 <SPI1_IRQHandler>:
 * 										IRQ
 * =============================================================================
 */

void SPI1_IRQHandler (void)  /* SPI1 global interrupt*/
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src;

	irq_src.TXE = ((SPI1->SR & (1<<1)) >> 1);
 8000b8e:	4b13      	ldr	r3, [pc, #76]	; (8000bdc <SPI1_IRQHandler+0x54>)
 8000b90:	689b      	ldr	r3, [r3, #8]
 8000b92:	085b      	lsrs	r3, r3, #1
 8000b94:	f003 0301 	and.w	r3, r3, #1
 8000b98:	b2da      	uxtb	r2, r3
 8000b9a:	793b      	ldrb	r3, [r7, #4]
 8000b9c:	f362 0300 	bfi	r3, r2, #0, #1
 8000ba0:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ((SPI1->SR & (1<<0)) >> 0);
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <SPI1_IRQHandler+0x54>)
 8000ba4:	689b      	ldr	r3, [r3, #8]
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	b2da      	uxtb	r2, r3
 8000bac:	793b      	ldrb	r3, [r7, #4]
 8000bae:	f362 0341 	bfi	r3, r2, #1, #1
 8000bb2:	713b      	strb	r3, [r7, #4]
	irq_src.ERR = ((SPI1->SR & (1<<4)) >> 4);
 8000bb4:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <SPI1_IRQHandler+0x54>)
 8000bb6:	689b      	ldr	r3, [r3, #8]
 8000bb8:	091b      	lsrs	r3, r3, #4
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	b2da      	uxtb	r2, r3
 8000bc0:	793b      	ldrb	r3, [r7, #4]
 8000bc2:	f362 0382 	bfi	r3, r2, #2, #1
 8000bc6:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[SPI1_Index]->P_IRQ_CallBack (irq_src);
 8000bc8:	4b05      	ldr	r3, [pc, #20]	; (8000be0 <SPI1_IRQHandler+0x58>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	695b      	ldr	r3, [r3, #20]
 8000bce:	7938      	ldrb	r0, [r7, #4]
 8000bd0:	4798      	blx	r3

}
 8000bd2:	bf00      	nop
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40013000 	.word	0x40013000
 8000be0:	2000001c 	.word	0x2000001c

08000be4 <SPI2_IRQHandler>:

void SPI2_IRQHandler (void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src;

	irq_src.TXE = ((SPI2->SR & (1<<1)) >> 1);
 8000bea:	4b13      	ldr	r3, [pc, #76]	; (8000c38 <SPI2_IRQHandler+0x54>)
 8000bec:	689b      	ldr	r3, [r3, #8]
 8000bee:	085b      	lsrs	r3, r3, #1
 8000bf0:	f003 0301 	and.w	r3, r3, #1
 8000bf4:	b2da      	uxtb	r2, r3
 8000bf6:	793b      	ldrb	r3, [r7, #4]
 8000bf8:	f362 0300 	bfi	r3, r2, #0, #1
 8000bfc:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ((SPI2->SR & (1<<0)) >> 0);
 8000bfe:	4b0e      	ldr	r3, [pc, #56]	; (8000c38 <SPI2_IRQHandler+0x54>)
 8000c00:	689b      	ldr	r3, [r3, #8]
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	b2da      	uxtb	r2, r3
 8000c08:	793b      	ldrb	r3, [r7, #4]
 8000c0a:	f362 0341 	bfi	r3, r2, #1, #1
 8000c0e:	713b      	strb	r3, [r7, #4]
	irq_src.ERR = ((SPI2->SR & (1<<4)) >> 4);
 8000c10:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <SPI2_IRQHandler+0x54>)
 8000c12:	689b      	ldr	r3, [r3, #8]
 8000c14:	091b      	lsrs	r3, r3, #4
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	b2da      	uxtb	r2, r3
 8000c1c:	793b      	ldrb	r3, [r7, #4]
 8000c1e:	f362 0382 	bfi	r3, r2, #2, #1
 8000c22:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[SPI2_Index]->P_IRQ_CallBack (irq_src);
 8000c24:	4b05      	ldr	r3, [pc, #20]	; (8000c3c <SPI2_IRQHandler+0x58>)
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	695b      	ldr	r3, [r3, #20]
 8000c2a:	7938      	ldrb	r0, [r7, #4]
 8000c2c:	4798      	blx	r3
}
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40003800 	.word	0x40003800
 8000c3c:	2000001c 	.word	0x2000001c

08000c40 <MCAL_USART_Init>:
 *	param[in]          -USART_Config :all the uart configuration
 * 	@retval           -none
 * 	Note              -support for now ASynch mode and clock 8 HZ
 ********************************************************************************************************************/
void MCAL_USART_Init(USART_Typedef* USARTX , USART_Conig_t* USART_Config)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	6039      	str	r1, [r7, #0]
	uint32_t PCLK , BRR ;
	Global_Usart_ConFig = USART_Config ;
 8000c4a:	4a48      	ldr	r2, [pc, #288]	; (8000d6c <MCAL_USART_Init+0x12c>)
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	6013      	str	r3, [r2, #0]

	//enable the clock for given USART Peripheral
	if (USARTX == USART1)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	4a47      	ldr	r2, [pc, #284]	; (8000d70 <MCAL_USART_Init+0x130>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d106      	bne.n	8000c66 <MCAL_USART_Init+0x26>
	{
		RCC_USART1_CLK_EN();
 8000c58:	4b46      	ldr	r3, [pc, #280]	; (8000d74 <MCAL_USART_Init+0x134>)
 8000c5a:	699b      	ldr	r3, [r3, #24]
 8000c5c:	4a45      	ldr	r2, [pc, #276]	; (8000d74 <MCAL_USART_Init+0x134>)
 8000c5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c62:	6193      	str	r3, [r2, #24]
 8000c64:	e014      	b.n	8000c90 <MCAL_USART_Init+0x50>
	}
	else if (USARTX == USART2)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4a43      	ldr	r2, [pc, #268]	; (8000d78 <MCAL_USART_Init+0x138>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d106      	bne.n	8000c7c <MCAL_USART_Init+0x3c>
	{
		RCC_USART2_CLK_EN();
 8000c6e:	4b41      	ldr	r3, [pc, #260]	; (8000d74 <MCAL_USART_Init+0x134>)
 8000c70:	69db      	ldr	r3, [r3, #28]
 8000c72:	4a40      	ldr	r2, [pc, #256]	; (8000d74 <MCAL_USART_Init+0x134>)
 8000c74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c78:	61d3      	str	r3, [r2, #28]
 8000c7a:	e009      	b.n	8000c90 <MCAL_USART_Init+0x50>
	}
	else if (USARTX == USART3)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	4a3f      	ldr	r2, [pc, #252]	; (8000d7c <MCAL_USART_Init+0x13c>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d105      	bne.n	8000c90 <MCAL_USART_Init+0x50>
	{
		RCC_USART3_CLK_EN();
 8000c84:	4b3b      	ldr	r3, [pc, #236]	; (8000d74 <MCAL_USART_Init+0x134>)
 8000c86:	69db      	ldr	r3, [r3, #28]
 8000c88:	4a3a      	ldr	r2, [pc, #232]	; (8000d74 <MCAL_USART_Init+0x134>)
 8000c8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c8e:	61d3      	str	r3, [r2, #28]
	}

	USARTX->CR1 |= (1<<13) ;							//Enable USART Module	USART_CR1  Bit 13 UE: USART enable
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	60da      	str	r2, [r3, #12]
	USARTX->CR1 |= USART_Config->USART_MODE ;			//Enable USART Tx and Rx engines according to the USART_Mode configuration item
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	683a      	ldr	r2, [r7, #0]
 8000ca2:	7812      	ldrb	r2, [r2, #0]
 8000ca4:	431a      	orrs	r2, r3
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	60da      	str	r2, [r3, #12]
	//	USART_CR1 Bit 3 TE: Transmitter enable & Bit 2 RE: Receiver enable

	USARTX->CR1 |= USART_Config->PayLoad_Length ;		// enable Payload width 	USARTx->CR1  Bit 12 M: Word length
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	68db      	ldr	r3, [r3, #12]
 8000cae:	683a      	ldr	r2, [r7, #0]
 8000cb0:	7a12      	ldrb	r2, [r2, #8]
 8000cb2:	431a      	orrs	r2, r3
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	60da      	str	r2, [r3, #12]

	USARTX->CR1 |= USART_Config->Parity ;				//Configuration of parity control bit fields
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	683a      	ldr	r2, [r7, #0]
 8000cbe:	7a52      	ldrb	r2, [r2, #9]
 8000cc0:	431a      	orrs	r2, r3
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	60da      	str	r2, [r3, #12]
	// USARTx->CR1 	Bit 10 PCE: Parity control enable     Bit 9 PS: Parity selection

	USARTX->CR2 |= USART_Config->StopBits ;				//configure stop bits	USART_CR2  Bits 13:12 STOP: STOP bits
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	691b      	ldr	r3, [r3, #16]
 8000cca:	683a      	ldr	r2, [r7, #0]
 8000ccc:	7a92      	ldrb	r2, [r2, #10]
 8000cce:	431a      	orrs	r2, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	611a      	str	r2, [r3, #16]
	USARTX->CR3 |= USART_Config->HWFlowCtl ;			//USART hardware flow control	USART_CR3  Bit 9 CTSE: CTS enable   Bit 8 RTSE: RTS enable
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	695b      	ldr	r3, [r3, #20]
 8000cd8:	683a      	ldr	r2, [r7, #0]
 8000cda:	7ad2      	ldrb	r2, [r2, #11]
 8000cdc:	431a      	orrs	r2, r3
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	615a      	str	r2, [r3, #20]

	//Configure baud rate
	//PCLK2 For USART1
	//PCLK1 for USART2 ,3
	if(USARTX == USART1)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4a22      	ldr	r2, [pc, #136]	; (8000d70 <MCAL_USART_Init+0x130>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d103      	bne.n	8000cf2 <MCAL_USART_Init+0xb2>
	{
		PCLK = MCAL_RCC_GetPCLK2();
 8000cea:	f7ff fd71 	bl	80007d0 <MCAL_RCC_GetPCLK2>
 8000cee:	60f8      	str	r0, [r7, #12]
 8000cf0:	e002      	b.n	8000cf8 <MCAL_USART_Init+0xb8>
	}
	else
	{
		PCLK = MCAL_RCC_GetPCLK1();
 8000cf2:	f7ff fd59 	bl	80007a8 <MCAL_RCC_GetPCLK1>
 8000cf6:	60f8      	str	r0, [r7, #12]
	}
	BRR = USART_BRR_Register(PCLK,USART_Config->BaudRate);
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	011b      	lsls	r3, r3, #4
 8000cfe:	68fa      	ldr	r2, [r7, #12]
 8000d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d04:	011b      	lsls	r3, r3, #4
 8000d06:	60bb      	str	r3, [r7, #8]
	USARTX->BRR = BRR ;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	68ba      	ldr	r2, [r7, #8]
 8000d0c:	609a      	str	r2, [r3, #8]

	if (USART_Config->IRQ_Enable != USART_IRQ_Enable_NONE)
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	7b1b      	ldrb	r3, [r3, #12]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d026      	beq.n	8000d64 <MCAL_USART_Init+0x124>
	{
		USARTX->CR1 |= USART_Config->IRQ_Enable ;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	68db      	ldr	r3, [r3, #12]
 8000d1a:	683a      	ldr	r2, [r7, #0]
 8000d1c:	7b12      	ldrb	r2, [r2, #12]
 8000d1e:	431a      	orrs	r2, r3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	60da      	str	r2, [r3, #12]
		//enable NVIC for USART IRQ
		if (USARTX == USART1)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	4a12      	ldr	r2, [pc, #72]	; (8000d70 <MCAL_USART_Init+0x130>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d106      	bne.n	8000d3a <MCAL_USART_Init+0xfa>
		{
			NVIC_IRQ37_USART1_Enable ;
 8000d2c:	4b14      	ldr	r3, [pc, #80]	; (8000d80 <MCAL_USART_Init+0x140>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a13      	ldr	r2, [pc, #76]	; (8000d80 <MCAL_USART_Init+0x140>)
 8000d32:	f043 0320 	orr.w	r3, r3, #32
 8000d36:	6013      	str	r3, [r2, #0]
		else if (USARTX == USART3)
		{
			NVIC_IRQ39_USART3_Enable ;
		}
	}
}
 8000d38:	e014      	b.n	8000d64 <MCAL_USART_Init+0x124>
		else if (USARTX == USART2)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4a0e      	ldr	r2, [pc, #56]	; (8000d78 <MCAL_USART_Init+0x138>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d106      	bne.n	8000d50 <MCAL_USART_Init+0x110>
			NVIC_IRQ38_USART2_Enable ;
 8000d42:	4b0f      	ldr	r3, [pc, #60]	; (8000d80 <MCAL_USART_Init+0x140>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a0e      	ldr	r2, [pc, #56]	; (8000d80 <MCAL_USART_Init+0x140>)
 8000d48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d4c:	6013      	str	r3, [r2, #0]
}
 8000d4e:	e009      	b.n	8000d64 <MCAL_USART_Init+0x124>
		else if (USARTX == USART3)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	4a0a      	ldr	r2, [pc, #40]	; (8000d7c <MCAL_USART_Init+0x13c>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d105      	bne.n	8000d64 <MCAL_USART_Init+0x124>
			NVIC_IRQ39_USART3_Enable ;
 8000d58:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <MCAL_USART_Init+0x140>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a08      	ldr	r2, [pc, #32]	; (8000d80 <MCAL_USART_Init+0x140>)
 8000d5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d62:	6013      	str	r3, [r2, #0]
}
 8000d64:	bf00      	nop
 8000d66:	3710      	adds	r7, #16
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20000024 	.word	0x20000024
 8000d70:	40013800 	.word	0x40013800
 8000d74:	40021000 	.word	0x40021000
 8000d78:	40004400 	.word	0x40004400
 8000d7c:	40004800 	.word	0x40004800
 8000d80:	e000e104 	.word	0xe000e104

08000d84 <MCAL_USART_SendData>:
 *							because it is replaced by the parity.
 *  						When receiving with the parity enabled, the value read in the MSB bit is the received parity
 *
 ********************************************************************************************************************/
void MCAL_USART_SendData(USART_Typedef* USARTX , uint16_t *PtxBuffer ,Polling_mechanism_t PollingEn )
{
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	4613      	mov	r3, r2
 8000d90:	71fb      	strb	r3, [r7, #7]
	//wait until TXE is set
	if(PollingEn==Enable)
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d106      	bne.n	8000da6 <MCAL_USART_SendData+0x22>
		while(!(USARTX->SR &(1<<7)));
 8000d98:	bf00      	nop
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d0f9      	beq.n	8000d9a <MCAL_USART_SendData+0x16>
	{
		USARTX->DR = (*PtxBuffer&(uint16_t)0x01FF);
	}
	else
	{
		USARTX->DR = (*PtxBuffer&(uint8_t)0xFF);
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	881b      	ldrh	r3, [r3, #0]
 8000daa:	b2da      	uxtb	r2, r3
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	605a      	str	r2, [r3, #4]
	}

}
 8000db0:	bf00      	nop
 8000db2:	3714      	adds	r7, #20
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bc80      	pop	{r7}
 8000db8:	4770      	bx	lr
	...

08000dbc <MCAL_USART_RecieveData>:
 *		param[in]          -PollingEn enable or disable the polling
 * 		@retval           -none
 * 		Note              -none																										*
 ********************************************************************************************************************/
void MCAL_USART_RecieveData(USART_Typedef* USARTX , uint16_t *PtxBuffer ,Polling_mechanism_t PollingEn )
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	4613      	mov	r3, r2
 8000dc8:	71fb      	strb	r3, [r7, #7]
	//wait until RXNE is set
	if (PollingEn == Enable)
 8000dca:	79fb      	ldrb	r3, [r7, #7]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d106      	bne.n	8000dde <MCAL_USART_RecieveData+0x22>
	{
		while(!(USARTX->SR&(1<<5)));
 8000dd0:	bf00      	nop
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f003 0320 	and.w	r3, r3, #32
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d0f9      	beq.n	8000dd2 <MCAL_USART_RecieveData+0x16>
			*((uint16_t*)PtxBuffer) =( USARTX->DR & (uint8_t)0xFF);
		}
	}
	else //8 bit data
	{
		if(Global_Usart_ConFig->Parity == USART_Parity_NONE)
 8000dde:	4b0d      	ldr	r3, [pc, #52]	; (8000e14 <MCAL_USART_RecieveData+0x58>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	7a5b      	ldrb	r3, [r3, #9]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d107      	bne.n	8000df8 <MCAL_USART_RecieveData+0x3c>
		{
			//no parity so all 9bits are data
			*((uint16_t*)PtxBuffer) = (USARTX->DR   & (uint8_t)0xFF);
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	b29b      	uxth	r3, r3
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	b29a      	uxth	r2, r3
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	801a      	strh	r2, [r3, #0]
		}else{
			//if parity is used so 8bit is data and the last one is parity
			*((uint16_t*)PtxBuffer) =( USARTX->DR & (uint8_t)0x7F);
		}
	}
}
 8000df6:	e007      	b.n	8000e08 <MCAL_USART_RecieveData+0x4c>
			*((uint16_t*)PtxBuffer) =( USARTX->DR & (uint8_t)0x7F);
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	b29b      	uxth	r3, r3
 8000dfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e02:	b29a      	uxth	r2, r3
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	801a      	strh	r2, [r3, #0]
}
 8000e08:	bf00      	nop
 8000e0a:	3714      	adds	r7, #20
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bc80      	pop	{r7}
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	20000024 	.word	0x20000024

08000e18 <MCAL_USART_GPIO_Set_Pins>:
 *		param[in]         -USARTX :where x can be 1,2,3 depending on device used
 * 		@retval           -none
 * 		Note              -should enable the corresponding ALT &GPIO in RCC CLOCK AND called after MCAL_UART_INIT()																													*
 ********************************************************************************************************************/
void MCAL_USART_GPIO_Set_Pins(USART_Typedef* USARTX )
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
	GPIO_PinCongif_t pincfg;
	if(USARTX == USART1)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	4a2b      	ldr	r2, [pc, #172]	; (8000ed0 <MCAL_USART_GPIO_Set_Pins+0xb8>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d118      	bne.n	8000e5a <MCAL_USART_GPIO_Set_Pins+0x42>
		//PA10 RX
		//PA11 CTS
		//PA12 RTS

		//PA9 TX
		pincfg.GPIO_PinNumber = GPIO_PIN_9 ;
 8000e28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e2c:	81bb      	strh	r3, [r7, #12]
		pincfg.GPIO_MODE = GPIO_Mode_OUTPUT_AF_PP;
 8000e2e:	2306      	movs	r3, #6
 8000e30:	73bb      	strb	r3, [r7, #14]
		pincfg.GPIO_OutPut_Speed = GPIO_SPEED_10M;
 8000e32:	2301      	movs	r3, #1
 8000e34:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_INIT(GPIOA, &pincfg) ;
 8000e36:	f107 030c 	add.w	r3, r7, #12
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4825      	ldr	r0, [pc, #148]	; (8000ed4 <MCAL_USART_GPIO_Set_Pins+0xbc>)
 8000e3e:	f7ff fbe5 	bl	800060c <MCAL_GPIO_INIT>

		//PA10 RX
		pincfg.GPIO_PinNumber = GPIO_PIN_10 ;
 8000e42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e46:	81bb      	strh	r3, [r7, #12]
		pincfg.GPIO_MODE = GPIO_Mode_AF_INPUT;
 8000e48:	2308      	movs	r3, #8
 8000e4a:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_INIT(GPIOA, &pincfg) ;
 8000e4c:	f107 030c 	add.w	r3, r7, #12
 8000e50:	4619      	mov	r1, r3
 8000e52:	4820      	ldr	r0, [pc, #128]	; (8000ed4 <MCAL_USART_GPIO_Set_Pins+0xbc>)
 8000e54:	f7ff fbda 	bl	800060c <MCAL_GPIO_INIT>
			pincfg.GPIO_OutPut_Speed = GPIO_SPEED_10M;
			MCAL_GPIO_INIT(GPIOA, &pincfg) ;
		}

	}
}
 8000e58:	e036      	b.n	8000ec8 <MCAL_USART_GPIO_Set_Pins+0xb0>
	else if(USARTX == USART2)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4a1e      	ldr	r2, [pc, #120]	; (8000ed8 <MCAL_USART_GPIO_Set_Pins+0xc0>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d116      	bne.n	8000e90 <MCAL_USART_GPIO_Set_Pins+0x78>
		pincfg.GPIO_PinNumber = GPIO_PIN_2 ;
 8000e62:	2304      	movs	r3, #4
 8000e64:	81bb      	strh	r3, [r7, #12]
		pincfg.GPIO_MODE = GPIO_Mode_OUTPUT_AF_PP;
 8000e66:	2306      	movs	r3, #6
 8000e68:	73bb      	strb	r3, [r7, #14]
		pincfg.GPIO_OutPut_Speed = GPIO_SPEED_10M;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_INIT(GPIOA, &pincfg) ;
 8000e6e:	f107 030c 	add.w	r3, r7, #12
 8000e72:	4619      	mov	r1, r3
 8000e74:	4817      	ldr	r0, [pc, #92]	; (8000ed4 <MCAL_USART_GPIO_Set_Pins+0xbc>)
 8000e76:	f7ff fbc9 	bl	800060c <MCAL_GPIO_INIT>
		pincfg.GPIO_PinNumber = GPIO_PIN_3 ;
 8000e7a:	2308      	movs	r3, #8
 8000e7c:	81bb      	strh	r3, [r7, #12]
		pincfg.GPIO_MODE = GPIO_Mode_AF_INPUT;
 8000e7e:	2308      	movs	r3, #8
 8000e80:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_INIT(GPIOA, &pincfg) ;
 8000e82:	f107 030c 	add.w	r3, r7, #12
 8000e86:	4619      	mov	r1, r3
 8000e88:	4812      	ldr	r0, [pc, #72]	; (8000ed4 <MCAL_USART_GPIO_Set_Pins+0xbc>)
 8000e8a:	f7ff fbbf 	bl	800060c <MCAL_GPIO_INIT>
}
 8000e8e:	e01b      	b.n	8000ec8 <MCAL_USART_GPIO_Set_Pins+0xb0>
	else if(USARTX == USART3)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	4a12      	ldr	r2, [pc, #72]	; (8000edc <MCAL_USART_GPIO_Set_Pins+0xc4>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d117      	bne.n	8000ec8 <MCAL_USART_GPIO_Set_Pins+0xb0>
		pincfg.GPIO_PinNumber = GPIO_PIN_10 ;
 8000e98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e9c:	81bb      	strh	r3, [r7, #12]
		pincfg.GPIO_MODE = GPIO_Mode_OUTPUT_AF_PP;
 8000e9e:	2306      	movs	r3, #6
 8000ea0:	73bb      	strb	r3, [r7, #14]
		pincfg.GPIO_OutPut_Speed = GPIO_SPEED_10M;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_INIT(GPIOB, &pincfg) ;
 8000ea6:	f107 030c 	add.w	r3, r7, #12
 8000eaa:	4619      	mov	r1, r3
 8000eac:	480c      	ldr	r0, [pc, #48]	; (8000ee0 <MCAL_USART_GPIO_Set_Pins+0xc8>)
 8000eae:	f7ff fbad 	bl	800060c <MCAL_GPIO_INIT>
		pincfg.GPIO_PinNumber = GPIO_PIN_11 ;
 8000eb2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000eb6:	81bb      	strh	r3, [r7, #12]
		pincfg.GPIO_MODE = GPIO_Mode_AF_INPUT;
 8000eb8:	2308      	movs	r3, #8
 8000eba:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_INIT(GPIOB, &pincfg) ;
 8000ebc:	f107 030c 	add.w	r3, r7, #12
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4807      	ldr	r0, [pc, #28]	; (8000ee0 <MCAL_USART_GPIO_Set_Pins+0xc8>)
 8000ec4:	f7ff fba2 	bl	800060c <MCAL_GPIO_INIT>
}
 8000ec8:	bf00      	nop
 8000eca:	3710      	adds	r7, #16
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	40013800 	.word	0x40013800
 8000ed4:	40010800 	.word	0x40010800
 8000ed8:	40004400 	.word	0x40004400
 8000edc:	40004800 	.word	0x40004800
 8000ee0:	40010c00 	.word	0x40010c00

08000ee4 <USART1_IRQHandler>:



//ISR
void USART1_IRQHandler(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
	Global_Usart_ConFig->P_IRQ_CallBack();
 8000ee8:	4b02      	ldr	r3, [pc, #8]	; (8000ef4 <USART1_IRQHandler+0x10>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	691b      	ldr	r3, [r3, #16]
 8000eee:	4798      	blx	r3
}
 8000ef0:	bf00      	nop
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	20000024 	.word	0x20000024

08000ef8 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
	Global_Usart_ConFig->P_IRQ_CallBack();
 8000efc:	4b02      	ldr	r3, [pc, #8]	; (8000f08 <USART2_IRQHandler+0x10>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	691b      	ldr	r3, [r3, #16]
 8000f02:	4798      	blx	r3
}
 8000f04:	bf00      	nop
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20000024 	.word	0x20000024

08000f0c <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
	Global_Usart_ConFig->P_IRQ_CallBack();
 8000f10:	4b02      	ldr	r3, [pc, #8]	; (8000f1c <USART3_IRQHandler+0x10>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	691b      	ldr	r3, [r3, #16]
 8000f16:	4798      	blx	r3
}
 8000f18:	bf00      	nop
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000024 	.word	0x20000024

08000f20 <__libc_init_array>:
 8000f20:	b570      	push	{r4, r5, r6, lr}
 8000f22:	2500      	movs	r5, #0
 8000f24:	4e0c      	ldr	r6, [pc, #48]	; (8000f58 <__libc_init_array+0x38>)
 8000f26:	4c0d      	ldr	r4, [pc, #52]	; (8000f5c <__libc_init_array+0x3c>)
 8000f28:	1ba4      	subs	r4, r4, r6
 8000f2a:	10a4      	asrs	r4, r4, #2
 8000f2c:	42a5      	cmp	r5, r4
 8000f2e:	d109      	bne.n	8000f44 <__libc_init_array+0x24>
 8000f30:	f000 f81a 	bl	8000f68 <_init>
 8000f34:	2500      	movs	r5, #0
 8000f36:	4e0a      	ldr	r6, [pc, #40]	; (8000f60 <__libc_init_array+0x40>)
 8000f38:	4c0a      	ldr	r4, [pc, #40]	; (8000f64 <__libc_init_array+0x44>)
 8000f3a:	1ba4      	subs	r4, r4, r6
 8000f3c:	10a4      	asrs	r4, r4, #2
 8000f3e:	42a5      	cmp	r5, r4
 8000f40:	d105      	bne.n	8000f4e <__libc_init_array+0x2e>
 8000f42:	bd70      	pop	{r4, r5, r6, pc}
 8000f44:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f48:	4798      	blx	r3
 8000f4a:	3501      	adds	r5, #1
 8000f4c:	e7ee      	b.n	8000f2c <__libc_init_array+0xc>
 8000f4e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f52:	4798      	blx	r3
 8000f54:	3501      	adds	r5, #1
 8000f56:	e7f2      	b.n	8000f3e <__libc_init_array+0x1e>
 8000f58:	08000f98 	.word	0x08000f98
 8000f5c:	08000f98 	.word	0x08000f98
 8000f60:	08000f98 	.word	0x08000f98
 8000f64:	08000f9c 	.word	0x08000f9c

08000f68 <_init>:
 8000f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f6a:	bf00      	nop
 8000f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f6e:	bc08      	pop	{r3}
 8000f70:	469e      	mov	lr, r3
 8000f72:	4770      	bx	lr

08000f74 <_fini>:
 8000f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f76:	bf00      	nop
 8000f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f7a:	bc08      	pop	{r3}
 8000f7c:	469e      	mov	lr, r3
 8000f7e:	4770      	bx	lr
