
drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000009e4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000b14  08000b14  00010b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000b2c  08000b2c  00010b34  2**0
                  CONTENTS
  4 .ARM          00000000  08000b2c  08000b2c  00010b34  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b2c  08000b34  00010b34  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b2c  08000b2c  00010b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000b30  08000b30  00010b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010b34  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  20000000  08000b34  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000068  08000b34  00020068  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010b34  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004fdc  00000000  00000000  00010b5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000bc3  00000000  00000000  00015b39  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000d34  00000000  00000000  000166fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000228  00000000  00000000  00017430  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001c0  00000000  00000000  00017658  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000caf  00000000  00000000  00017818  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000027a5  00000000  00000000  000184c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000bdb4  00000000  00000000  0001ac6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00026a20  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000006e0  00000000  00000000  00026a9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000afc 	.word	0x08000afc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000afc 	.word	0x08000afc

08000170 <Clock_Enable>:
#include "SPI.h"
#include "LCD.h"
#include "I2C.h"

void Clock_Enable()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_EN();
 8000174:	4b0a      	ldr	r3, [pc, #40]	; (80001a0 <Clock_Enable+0x30>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a09      	ldr	r2, [pc, #36]	; (80001a0 <Clock_Enable+0x30>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 8000180:	4b07      	ldr	r3, [pc, #28]	; (80001a0 <Clock_Enable+0x30>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a06      	ldr	r2, [pc, #24]	; (80001a0 <Clock_Enable+0x30>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <Clock_Enable+0x30>)
 800018e:	699b      	ldr	r3, [r3, #24]
 8000190:	4a03      	ldr	r2, [pc, #12]	; (80001a0 <Clock_Enable+0x30>)
 8000192:	f043 0301 	orr.w	r3, r3, #1
 8000196:	6193      	str	r3, [r2, #24]
}
 8000198:	bf00      	nop
 800019a:	46bd      	mov	sp, r7
 800019c:	bc80      	pop	{r7}
 800019e:	4770      	bx	lr
 80001a0:	40021000 	.word	0x40021000

080001a4 <main>:
//Global Variable
uint16_t ch ;


int main(void)
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b086      	sub	sp, #24
 80001a8:	af00      	add	r7, sp, #0
	USART_Conig_t config ;
	Clock_Enable() ;
 80001aa:	f7ff ffe1 	bl	8000170 <Clock_Enable>
	config.BaudRate = USART_BaudRate_9600;
 80001ae:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80001b2:	60bb      	str	r3, [r7, #8]
	config.HWFlowCtl = USART_HWFlowCtl_NONE;
 80001b4:	2300      	movs	r3, #0
 80001b6:	73fb      	strb	r3, [r7, #15]
	config.IRQ_Enable = USART_IRQ_Enable_NONE;
 80001b8:	2300      	movs	r3, #0
 80001ba:	743b      	strb	r3, [r7, #16]
	config.P_IRQ_CallBack = NULL ;
 80001bc:	2300      	movs	r3, #0
 80001be:	617b      	str	r3, [r7, #20]
	config.Parity = USART_Parity_NONE;
 80001c0:	2300      	movs	r3, #0
 80001c2:	737b      	strb	r3, [r7, #13]
	config.PayLoad_Length = USART_PayLoad_Length8B ;
 80001c4:	2300      	movs	r3, #0
 80001c6:	733b      	strb	r3, [r7, #12]
	config.StopBits = USART_StopBits_One ;
 80001c8:	2300      	movs	r3, #0
 80001ca:	73bb      	strb	r3, [r7, #14]
	config.USART_MODE = USART_MODE_TX_RX;
 80001cc:	230c      	movs	r3, #12
 80001ce:	713b      	strb	r3, [r7, #4]

	MCAL_USART_Init(USART1 , &config);
 80001d0:	1d3b      	adds	r3, r7, #4
 80001d2:	4619      	mov	r1, r3
 80001d4:	4808      	ldr	r0, [pc, #32]	; (80001f8 <main+0x54>)
 80001d6:	f000 fafd 	bl	80007d4 <MCAL_USART_Init>
	MCAL_USART_GPIO_Set_Pins(USART1);
 80001da:	4807      	ldr	r0, [pc, #28]	; (80001f8 <main+0x54>)
 80001dc:	f000 fbe6 	bl	80009ac <MCAL_USART_GPIO_Set_Pins>
	while (1)
	{
		MCAL_USART_RecieveData(USART1, &ch , Enable );
 80001e0:	2200      	movs	r2, #0
 80001e2:	4906      	ldr	r1, [pc, #24]	; (80001fc <main+0x58>)
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <main+0x54>)
 80001e6:	f000 fbb3 	bl	8000950 <MCAL_USART_RecieveData>
		MCAL_USART_SendData(USART1  , &ch , Enable );
 80001ea:	2200      	movs	r2, #0
 80001ec:	4903      	ldr	r1, [pc, #12]	; (80001fc <main+0x58>)
 80001ee:	4802      	ldr	r0, [pc, #8]	; (80001f8 <main+0x54>)
 80001f0:	f000 fb92 	bl	8000918 <MCAL_USART_SendData>
		MCAL_USART_RecieveData(USART1, &ch , Enable );
 80001f4:	e7f4      	b.n	80001e0 <main+0x3c>
 80001f6:	bf00      	nop
 80001f8:	40013800 	.word	0x40013800
 80001fc:	20000028 	.word	0x20000028

08000200 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000200:	480d      	ldr	r0, [pc, #52]	; (8000238 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000202:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000204:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000208:	480c      	ldr	r0, [pc, #48]	; (800023c <LoopForever+0x6>)
  ldr r1, =_edata
 800020a:	490d      	ldr	r1, [pc, #52]	; (8000240 <LoopForever+0xa>)
  ldr r2, =_sidata
 800020c:	4a0d      	ldr	r2, [pc, #52]	; (8000244 <LoopForever+0xe>)
  movs r3, #0
 800020e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000210:	e002      	b.n	8000218 <LoopCopyDataInit>

08000212 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000212:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000214:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000216:	3304      	adds	r3, #4

08000218 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000218:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800021a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800021c:	d3f9      	bcc.n	8000212 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800021e:	4a0a      	ldr	r2, [pc, #40]	; (8000248 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000220:	4c0a      	ldr	r4, [pc, #40]	; (800024c <LoopForever+0x16>)
  movs r3, #0
 8000222:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000224:	e001      	b.n	800022a <LoopFillZerobss>

08000226 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000226:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000228:	3204      	adds	r2, #4

0800022a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800022a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800022c:	d3fb      	bcc.n	8000226 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800022e:	f000 fc41 	bl	8000ab4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000232:	f7ff ffb7 	bl	80001a4 <main>

08000236 <LoopForever>:

LoopForever:
    b LoopForever
 8000236:	e7fe      	b.n	8000236 <LoopForever>
  ldr   r0, =_estack
 8000238:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 800023c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000240:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000244:	08000b34 	.word	0x08000b34
  ldr r2, =_sbss
 8000248:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800024c:	20000068 	.word	0x20000068

08000250 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000250:	e7fe      	b.n	8000250 <ADC1_2_IRQHandler>
	...

08000254 <EXTI0_IRQHandler>:
////**=====================     ISR FUNCTIONS      =============================
////**==========================================================================
////**==========================================================================

void EXTI0_IRQHandler(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
	// must clear PR By Writing one on Bit
	EXTI->PR |= (1<<EXTI0);
 8000258:	4b05      	ldr	r3, [pc, #20]	; (8000270 <EXTI0_IRQHandler+0x1c>)
 800025a:	695b      	ldr	r3, [r3, #20]
 800025c:	4a04      	ldr	r2, [pc, #16]	; (8000270 <EXTI0_IRQHandler+0x1c>)
 800025e:	f043 0301 	orr.w	r3, r3, #1
 8000262:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[EXTI0]();
 8000264:	4b03      	ldr	r3, [pc, #12]	; (8000274 <EXTI0_IRQHandler+0x20>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	4798      	blx	r3
}
 800026a:	bf00      	nop
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	40010400 	.word	0x40010400
 8000274:	2000002c 	.word	0x2000002c

08000278 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
	// must clear PR By Writing one on Bit
	EXTI->PR |= (1<<EXTI1);
 800027c:	4b05      	ldr	r3, [pc, #20]	; (8000294 <EXTI1_IRQHandler+0x1c>)
 800027e:	695b      	ldr	r3, [r3, #20]
 8000280:	4a04      	ldr	r2, [pc, #16]	; (8000294 <EXTI1_IRQHandler+0x1c>)
 8000282:	f043 0302 	orr.w	r3, r3, #2
 8000286:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[EXTI1]();
 8000288:	4b03      	ldr	r3, [pc, #12]	; (8000298 <EXTI1_IRQHandler+0x20>)
 800028a:	685b      	ldr	r3, [r3, #4]
 800028c:	4798      	blx	r3

}
 800028e:	bf00      	nop
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	40010400 	.word	0x40010400
 8000298:	2000002c 	.word	0x2000002c

0800029c <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
	// must clear PR By Writing one on Bit
	EXTI->PR |= (1<<EXTI2);
 80002a0:	4b05      	ldr	r3, [pc, #20]	; (80002b8 <EXTI2_IRQHandler+0x1c>)
 80002a2:	695b      	ldr	r3, [r3, #20]
 80002a4:	4a04      	ldr	r2, [pc, #16]	; (80002b8 <EXTI2_IRQHandler+0x1c>)
 80002a6:	f043 0304 	orr.w	r3, r3, #4
 80002aa:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[EXTI2]();
 80002ac:	4b03      	ldr	r3, [pc, #12]	; (80002bc <EXTI2_IRQHandler+0x20>)
 80002ae:	689b      	ldr	r3, [r3, #8]
 80002b0:	4798      	blx	r3
}
 80002b2:	bf00      	nop
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	40010400 	.word	0x40010400
 80002bc:	2000002c 	.word	0x2000002c

080002c0 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	// must clear PR By Writing one on Bit
	EXTI->PR |= (1<<EXTI3);
 80002c4:	4b05      	ldr	r3, [pc, #20]	; (80002dc <EXTI3_IRQHandler+0x1c>)
 80002c6:	695b      	ldr	r3, [r3, #20]
 80002c8:	4a04      	ldr	r2, [pc, #16]	; (80002dc <EXTI3_IRQHandler+0x1c>)
 80002ca:	f043 0308 	orr.w	r3, r3, #8
 80002ce:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[EXTI13]();
 80002d0:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <EXTI3_IRQHandler+0x20>)
 80002d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80002d4:	4798      	blx	r3
}
 80002d6:	bf00      	nop
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	40010400 	.word	0x40010400
 80002e0:	2000002c 	.word	0x2000002c

080002e4 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
	// must clear PR By Writing one on Bit
	EXTI->PR |= (1<<EXTI4);
 80002e8:	4b05      	ldr	r3, [pc, #20]	; (8000300 <EXTI4_IRQHandler+0x1c>)
 80002ea:	695b      	ldr	r3, [r3, #20]
 80002ec:	4a04      	ldr	r2, [pc, #16]	; (8000300 <EXTI4_IRQHandler+0x1c>)
 80002ee:	f043 0310 	orr.w	r3, r3, #16
 80002f2:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[EXTI4]();
 80002f4:	4b03      	ldr	r3, [pc, #12]	; (8000304 <EXTI4_IRQHandler+0x20>)
 80002f6:	691b      	ldr	r3, [r3, #16]
 80002f8:	4798      	blx	r3
}
 80002fa:	bf00      	nop
 80002fc:	bd80      	pop	{r7, pc}
 80002fe:	bf00      	nop
 8000300:	40010400 	.word	0x40010400
 8000304:	2000002c 	.word	0x2000002c

08000308 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
	// must clear PR By Writing one on Bit
	if (EXTI->PR & 1<<EXTI5){EXTI->PR |= 1<<EXTI5;GP_IRQ_CallBack[EXTI5]();}
 800030c:	4b26      	ldr	r3, [pc, #152]	; (80003a8 <EXTI9_5_IRQHandler+0xa0>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	f003 0320 	and.w	r3, r3, #32
 8000314:	2b00      	cmp	r3, #0
 8000316:	d008      	beq.n	800032a <EXTI9_5_IRQHandler+0x22>
 8000318:	4b23      	ldr	r3, [pc, #140]	; (80003a8 <EXTI9_5_IRQHandler+0xa0>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	4a22      	ldr	r2, [pc, #136]	; (80003a8 <EXTI9_5_IRQHandler+0xa0>)
 800031e:	f043 0320 	orr.w	r3, r3, #32
 8000322:	6153      	str	r3, [r2, #20]
 8000324:	4b21      	ldr	r3, [pc, #132]	; (80003ac <EXTI9_5_IRQHandler+0xa4>)
 8000326:	695b      	ldr	r3, [r3, #20]
 8000328:	4798      	blx	r3
	if (EXTI->PR & 1<<EXTI6){EXTI->PR |= 1<<EXTI6;GP_IRQ_CallBack[EXTI6]();}
 800032a:	4b1f      	ldr	r3, [pc, #124]	; (80003a8 <EXTI9_5_IRQHandler+0xa0>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000332:	2b00      	cmp	r3, #0
 8000334:	d008      	beq.n	8000348 <EXTI9_5_IRQHandler+0x40>
 8000336:	4b1c      	ldr	r3, [pc, #112]	; (80003a8 <EXTI9_5_IRQHandler+0xa0>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	4a1b      	ldr	r2, [pc, #108]	; (80003a8 <EXTI9_5_IRQHandler+0xa0>)
 800033c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000340:	6153      	str	r3, [r2, #20]
 8000342:	4b1a      	ldr	r3, [pc, #104]	; (80003ac <EXTI9_5_IRQHandler+0xa4>)
 8000344:	699b      	ldr	r3, [r3, #24]
 8000346:	4798      	blx	r3
	if (EXTI->PR & 1<<EXTI7){EXTI->PR |= 1<<EXTI7;GP_IRQ_CallBack[EXTI7]();}
 8000348:	4b17      	ldr	r3, [pc, #92]	; (80003a8 <EXTI9_5_IRQHandler+0xa0>)
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000350:	2b00      	cmp	r3, #0
 8000352:	d008      	beq.n	8000366 <EXTI9_5_IRQHandler+0x5e>
 8000354:	4b14      	ldr	r3, [pc, #80]	; (80003a8 <EXTI9_5_IRQHandler+0xa0>)
 8000356:	695b      	ldr	r3, [r3, #20]
 8000358:	4a13      	ldr	r2, [pc, #76]	; (80003a8 <EXTI9_5_IRQHandler+0xa0>)
 800035a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800035e:	6153      	str	r3, [r2, #20]
 8000360:	4b12      	ldr	r3, [pc, #72]	; (80003ac <EXTI9_5_IRQHandler+0xa4>)
 8000362:	69db      	ldr	r3, [r3, #28]
 8000364:	4798      	blx	r3
	if (EXTI->PR & 1<<EXTI8){EXTI->PR |= 1<<EXTI8;GP_IRQ_CallBack[EXTI8]();}
 8000366:	4b10      	ldr	r3, [pc, #64]	; (80003a8 <EXTI9_5_IRQHandler+0xa0>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800036e:	2b00      	cmp	r3, #0
 8000370:	d008      	beq.n	8000384 <EXTI9_5_IRQHandler+0x7c>
 8000372:	4b0d      	ldr	r3, [pc, #52]	; (80003a8 <EXTI9_5_IRQHandler+0xa0>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	4a0c      	ldr	r2, [pc, #48]	; (80003a8 <EXTI9_5_IRQHandler+0xa0>)
 8000378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800037c:	6153      	str	r3, [r2, #20]
 800037e:	4b0b      	ldr	r3, [pc, #44]	; (80003ac <EXTI9_5_IRQHandler+0xa4>)
 8000380:	6a1b      	ldr	r3, [r3, #32]
 8000382:	4798      	blx	r3
	if (EXTI->PR & 1<<EXTI9){EXTI->PR |= 1<<EXTI9;GP_IRQ_CallBack[EXTI9]();}
 8000384:	4b08      	ldr	r3, [pc, #32]	; (80003a8 <EXTI9_5_IRQHandler+0xa0>)
 8000386:	695b      	ldr	r3, [r3, #20]
 8000388:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800038c:	2b00      	cmp	r3, #0
 800038e:	d008      	beq.n	80003a2 <EXTI9_5_IRQHandler+0x9a>
 8000390:	4b05      	ldr	r3, [pc, #20]	; (80003a8 <EXTI9_5_IRQHandler+0xa0>)
 8000392:	695b      	ldr	r3, [r3, #20]
 8000394:	4a04      	ldr	r2, [pc, #16]	; (80003a8 <EXTI9_5_IRQHandler+0xa0>)
 8000396:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800039a:	6153      	str	r3, [r2, #20]
 800039c:	4b03      	ldr	r3, [pc, #12]	; (80003ac <EXTI9_5_IRQHandler+0xa4>)
 800039e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a0:	4798      	blx	r3
}
 80003a2:	bf00      	nop
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	40010400 	.word	0x40010400
 80003ac:	2000002c 	.word	0x2000002c

080003b0 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
	// must clear PR By Writing one on Bit
	if (EXTI->PR & 1<<EXTI10){EXTI->PR |= 1<<EXTI10;GP_IRQ_CallBack[EXTI10]();}
 80003b4:	4b2d      	ldr	r3, [pc, #180]	; (800046c <EXTI15_10_IRQHandler+0xbc>)
 80003b6:	695b      	ldr	r3, [r3, #20]
 80003b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d008      	beq.n	80003d2 <EXTI15_10_IRQHandler+0x22>
 80003c0:	4b2a      	ldr	r3, [pc, #168]	; (800046c <EXTI15_10_IRQHandler+0xbc>)
 80003c2:	695b      	ldr	r3, [r3, #20]
 80003c4:	4a29      	ldr	r2, [pc, #164]	; (800046c <EXTI15_10_IRQHandler+0xbc>)
 80003c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003ca:	6153      	str	r3, [r2, #20]
 80003cc:	4b28      	ldr	r3, [pc, #160]	; (8000470 <EXTI15_10_IRQHandler+0xc0>)
 80003ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003d0:	4798      	blx	r3
	if (EXTI->PR & 1<<EXTI11){EXTI->PR |= 1<<EXTI11;GP_IRQ_CallBack[EXTI11]();}
 80003d2:	4b26      	ldr	r3, [pc, #152]	; (800046c <EXTI15_10_IRQHandler+0xbc>)
 80003d4:	695b      	ldr	r3, [r3, #20]
 80003d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d008      	beq.n	80003f0 <EXTI15_10_IRQHandler+0x40>
 80003de:	4b23      	ldr	r3, [pc, #140]	; (800046c <EXTI15_10_IRQHandler+0xbc>)
 80003e0:	695b      	ldr	r3, [r3, #20]
 80003e2:	4a22      	ldr	r2, [pc, #136]	; (800046c <EXTI15_10_IRQHandler+0xbc>)
 80003e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80003e8:	6153      	str	r3, [r2, #20]
 80003ea:	4b21      	ldr	r3, [pc, #132]	; (8000470 <EXTI15_10_IRQHandler+0xc0>)
 80003ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003ee:	4798      	blx	r3
	if (EXTI->PR & 1<<EXTI12){EXTI->PR |= 1<<EXTI12;GP_IRQ_CallBack[EXTI12]();}
 80003f0:	4b1e      	ldr	r3, [pc, #120]	; (800046c <EXTI15_10_IRQHandler+0xbc>)
 80003f2:	695b      	ldr	r3, [r3, #20]
 80003f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d008      	beq.n	800040e <EXTI15_10_IRQHandler+0x5e>
 80003fc:	4b1b      	ldr	r3, [pc, #108]	; (800046c <EXTI15_10_IRQHandler+0xbc>)
 80003fe:	695b      	ldr	r3, [r3, #20]
 8000400:	4a1a      	ldr	r2, [pc, #104]	; (800046c <EXTI15_10_IRQHandler+0xbc>)
 8000402:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000406:	6153      	str	r3, [r2, #20]
 8000408:	4b19      	ldr	r3, [pc, #100]	; (8000470 <EXTI15_10_IRQHandler+0xc0>)
 800040a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800040c:	4798      	blx	r3
	if (EXTI->PR & 1<<EXTI13){EXTI->PR |= 1<<EXTI13;GP_IRQ_CallBack[EXTI13]();}
 800040e:	4b17      	ldr	r3, [pc, #92]	; (800046c <EXTI15_10_IRQHandler+0xbc>)
 8000410:	695b      	ldr	r3, [r3, #20]
 8000412:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000416:	2b00      	cmp	r3, #0
 8000418:	d008      	beq.n	800042c <EXTI15_10_IRQHandler+0x7c>
 800041a:	4b14      	ldr	r3, [pc, #80]	; (800046c <EXTI15_10_IRQHandler+0xbc>)
 800041c:	695b      	ldr	r3, [r3, #20]
 800041e:	4a13      	ldr	r2, [pc, #76]	; (800046c <EXTI15_10_IRQHandler+0xbc>)
 8000420:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000424:	6153      	str	r3, [r2, #20]
 8000426:	4b12      	ldr	r3, [pc, #72]	; (8000470 <EXTI15_10_IRQHandler+0xc0>)
 8000428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800042a:	4798      	blx	r3
	if (EXTI->PR & 1<<EXTI14){EXTI->PR |= 1<<EXTI14;GP_IRQ_CallBack[EXTI14]();}
 800042c:	4b0f      	ldr	r3, [pc, #60]	; (800046c <EXTI15_10_IRQHandler+0xbc>)
 800042e:	695b      	ldr	r3, [r3, #20]
 8000430:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000434:	2b00      	cmp	r3, #0
 8000436:	d008      	beq.n	800044a <EXTI15_10_IRQHandler+0x9a>
 8000438:	4b0c      	ldr	r3, [pc, #48]	; (800046c <EXTI15_10_IRQHandler+0xbc>)
 800043a:	695b      	ldr	r3, [r3, #20]
 800043c:	4a0b      	ldr	r2, [pc, #44]	; (800046c <EXTI15_10_IRQHandler+0xbc>)
 800043e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000442:	6153      	str	r3, [r2, #20]
 8000444:	4b0a      	ldr	r3, [pc, #40]	; (8000470 <EXTI15_10_IRQHandler+0xc0>)
 8000446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000448:	4798      	blx	r3
	if (EXTI->PR & 1<<EXTI15){EXTI->PR |= 1<<EXTI15;GP_IRQ_CallBack[EXTI15]();}
 800044a:	4b08      	ldr	r3, [pc, #32]	; (800046c <EXTI15_10_IRQHandler+0xbc>)
 800044c:	695b      	ldr	r3, [r3, #20]
 800044e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000452:	2b00      	cmp	r3, #0
 8000454:	d008      	beq.n	8000468 <EXTI15_10_IRQHandler+0xb8>
 8000456:	4b05      	ldr	r3, [pc, #20]	; (800046c <EXTI15_10_IRQHandler+0xbc>)
 8000458:	695b      	ldr	r3, [r3, #20]
 800045a:	4a04      	ldr	r2, [pc, #16]	; (800046c <EXTI15_10_IRQHandler+0xbc>)
 800045c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000460:	6153      	str	r3, [r2, #20]
 8000462:	4b03      	ldr	r3, [pc, #12]	; (8000470 <EXTI15_10_IRQHandler+0xc0>)
 8000464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000466:	4798      	blx	r3

}
 8000468:	bf00      	nop
 800046a:	bd80      	pop	{r7, pc}
 800046c:	40010400 	.word	0x40010400
 8000470:	2000002c 	.word	0x2000002c

08000474 <Get_CRLH_Position>:
 * 			Note							-NONE																														*
 ********************************************************************************************************************/
#include "GPIO.h"

static uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000474:	b480      	push	{r7}
 8000476:	b085      	sub	sp, #20
 8000478:	af00      	add	r7, sp, #0
 800047a:	4603      	mov	r3, r0
 800047c:	80fb      	strh	r3, [r7, #6]
	uint16_t Loc_Pin_Number = 0 ;
 800047e:	2300      	movs	r3, #0
 8000480:	81fb      	strh	r3, [r7, #14]
	switch(PinNumber)
 8000482:	88fb      	ldrh	r3, [r7, #6]
 8000484:	2b80      	cmp	r3, #128	; 0x80
 8000486:	d049      	beq.n	800051c <Get_CRLH_Position+0xa8>
 8000488:	2b80      	cmp	r3, #128	; 0x80
 800048a:	dc11      	bgt.n	80004b0 <Get_CRLH_Position+0x3c>
 800048c:	2b08      	cmp	r3, #8
 800048e:	d039      	beq.n	8000504 <Get_CRLH_Position+0x90>
 8000490:	2b08      	cmp	r3, #8
 8000492:	dc06      	bgt.n	80004a2 <Get_CRLH_Position+0x2e>
 8000494:	2b02      	cmp	r3, #2
 8000496:	d02f      	beq.n	80004f8 <Get_CRLH_Position+0x84>
 8000498:	2b04      	cmp	r3, #4
 800049a:	d030      	beq.n	80004fe <Get_CRLH_Position+0x8a>
 800049c:	2b01      	cmp	r3, #1
 800049e:	d028      	beq.n	80004f2 <Get_CRLH_Position+0x7e>
 80004a0:	e057      	b.n	8000552 <Get_CRLH_Position+0xde>
 80004a2:	2b20      	cmp	r3, #32
 80004a4:	d034      	beq.n	8000510 <Get_CRLH_Position+0x9c>
 80004a6:	2b40      	cmp	r3, #64	; 0x40
 80004a8:	d035      	beq.n	8000516 <Get_CRLH_Position+0xa2>
 80004aa:	2b10      	cmp	r3, #16
 80004ac:	d02d      	beq.n	800050a <Get_CRLH_Position+0x96>
 80004ae:	e050      	b.n	8000552 <Get_CRLH_Position+0xde>
 80004b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80004b4:	d03e      	beq.n	8000534 <Get_CRLH_Position+0xc0>
 80004b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80004ba:	dc09      	bgt.n	80004d0 <Get_CRLH_Position+0x5c>
 80004bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80004c0:	d032      	beq.n	8000528 <Get_CRLH_Position+0xb4>
 80004c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80004c6:	d032      	beq.n	800052e <Get_CRLH_Position+0xba>
 80004c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80004cc:	d029      	beq.n	8000522 <Get_CRLH_Position+0xae>
 80004ce:	e040      	b.n	8000552 <Get_CRLH_Position+0xde>
 80004d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80004d4:	d034      	beq.n	8000540 <Get_CRLH_Position+0xcc>
 80004d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80004da:	dc03      	bgt.n	80004e4 <Get_CRLH_Position+0x70>
 80004dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80004e0:	d02b      	beq.n	800053a <Get_CRLH_Position+0xc6>
 80004e2:	e036      	b.n	8000552 <Get_CRLH_Position+0xde>
 80004e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80004e8:	d02d      	beq.n	8000546 <Get_CRLH_Position+0xd2>
 80004ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80004ee:	d02d      	beq.n	800054c <Get_CRLH_Position+0xd8>
 80004f0:	e02f      	b.n	8000552 <Get_CRLH_Position+0xde>
	{
	case GPIO_PIN_0 :
		Loc_Pin_Number = 0 ;
 80004f2:	2300      	movs	r3, #0
 80004f4:	81fb      	strh	r3, [r7, #14]
		break ;
 80004f6:	e02c      	b.n	8000552 <Get_CRLH_Position+0xde>
	case GPIO_PIN_1 :
		Loc_Pin_Number = 4 ;
 80004f8:	2304      	movs	r3, #4
 80004fa:	81fb      	strh	r3, [r7, #14]
		break ;
 80004fc:	e029      	b.n	8000552 <Get_CRLH_Position+0xde>
	case GPIO_PIN_2 :
		Loc_Pin_Number = 8 ;
 80004fe:	2308      	movs	r3, #8
 8000500:	81fb      	strh	r3, [r7, #14]
		break ;
 8000502:	e026      	b.n	8000552 <Get_CRLH_Position+0xde>
	case GPIO_PIN_3 :
		Loc_Pin_Number = 12 ;
 8000504:	230c      	movs	r3, #12
 8000506:	81fb      	strh	r3, [r7, #14]
		break ;
 8000508:	e023      	b.n	8000552 <Get_CRLH_Position+0xde>
	case GPIO_PIN_4 :
		Loc_Pin_Number = 16 ;
 800050a:	2310      	movs	r3, #16
 800050c:	81fb      	strh	r3, [r7, #14]
		break ;
 800050e:	e020      	b.n	8000552 <Get_CRLH_Position+0xde>
	case GPIO_PIN_5 :
		Loc_Pin_Number = 20 ;
 8000510:	2314      	movs	r3, #20
 8000512:	81fb      	strh	r3, [r7, #14]
		break ;
 8000514:	e01d      	b.n	8000552 <Get_CRLH_Position+0xde>
	case GPIO_PIN_6 :
		Loc_Pin_Number = 24 ;
 8000516:	2318      	movs	r3, #24
 8000518:	81fb      	strh	r3, [r7, #14]
		break ;
 800051a:	e01a      	b.n	8000552 <Get_CRLH_Position+0xde>
	case GPIO_PIN_7 :
		Loc_Pin_Number = 28 ;
 800051c:	231c      	movs	r3, #28
 800051e:	81fb      	strh	r3, [r7, #14]
		break ;
 8000520:	e017      	b.n	8000552 <Get_CRLH_Position+0xde>
	case GPIO_PIN_8 :
		Loc_Pin_Number = 0 ;
 8000522:	2300      	movs	r3, #0
 8000524:	81fb      	strh	r3, [r7, #14]
		break ;
 8000526:	e014      	b.n	8000552 <Get_CRLH_Position+0xde>
	case GPIO_PIN_9 :
		Loc_Pin_Number = 4 ;
 8000528:	2304      	movs	r3, #4
 800052a:	81fb      	strh	r3, [r7, #14]
		break ;
 800052c:	e011      	b.n	8000552 <Get_CRLH_Position+0xde>
	case GPIO_PIN_10 :
		Loc_Pin_Number = 8 ;
 800052e:	2308      	movs	r3, #8
 8000530:	81fb      	strh	r3, [r7, #14]
		break ;
 8000532:	e00e      	b.n	8000552 <Get_CRLH_Position+0xde>
	case GPIO_PIN_11 :
		Loc_Pin_Number = 12 ;
 8000534:	230c      	movs	r3, #12
 8000536:	81fb      	strh	r3, [r7, #14]
		break ;
 8000538:	e00b      	b.n	8000552 <Get_CRLH_Position+0xde>
	case GPIO_PIN_12 :
		Loc_Pin_Number = 16 ;
 800053a:	2310      	movs	r3, #16
 800053c:	81fb      	strh	r3, [r7, #14]
		break ;
 800053e:	e008      	b.n	8000552 <Get_CRLH_Position+0xde>
	case GPIO_PIN_13 :
		Loc_Pin_Number = 20 ;
 8000540:	2314      	movs	r3, #20
 8000542:	81fb      	strh	r3, [r7, #14]
		break ;
 8000544:	e005      	b.n	8000552 <Get_CRLH_Position+0xde>
	case GPIO_PIN_14 :
		Loc_Pin_Number = 24 ;
 8000546:	2318      	movs	r3, #24
 8000548:	81fb      	strh	r3, [r7, #14]
		break ;
 800054a:	e002      	b.n	8000552 <Get_CRLH_Position+0xde>
	case GPIO_PIN_15 :
		Loc_Pin_Number = 28 ;
 800054c:	231c      	movs	r3, #28
 800054e:	81fb      	strh	r3, [r7, #14]
		break ;
 8000550:	bf00      	nop
	}
	return Loc_Pin_Number ;
 8000552:	89fb      	ldrh	r3, [r7, #14]
 8000554:	b2db      	uxtb	r3, r3
}
 8000556:	4618      	mov	r0, r3
 8000558:	3714      	adds	r7, #20
 800055a:	46bd      	mov	sp, r7
 800055c:	bc80      	pop	{r7}
 800055e:	4770      	bx	lr

08000560 <MCAL_GPIO_INIT>:
 * 												-contain the configratoiin of GPIO PIN
 * 			@retval						-NONE																														*
 * 			Note							--stm32f103c6 has GPIO A : E BUT LQFP48 has A ,B 	,part of c , d pins																														*
 ********************************************************************************************************************/
void MCAL_GPIO_INIT(GPIO_Typedef * GPIOX,GPIO_PinCongif_t* pinconfig)
{
 8000560:	b590      	push	{r4, r7, lr}
 8000562:	b085      	sub	sp, #20
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
 8000568:	6039      	str	r1, [r7, #0]
	volatile uint32_t* Loc_Config_Regester = NULL ;
 800056a:	2300      	movs	r3, #0
 800056c:	60bb      	str	r3, [r7, #8]
	uint8_t	 Loc_Pin_Congif	=	0 ;
 800056e:	2300      	movs	r3, #0
 8000570:	73fb      	strb	r3, [r7, #15]
	Loc_Config_Regester = (pinconfig->GPIO_PinNumber<GPIO_PIN_8)? 	&GPIOX->CRL	:	&GPIOX->CRH 	 ;
 8000572:	683b      	ldr	r3, [r7, #0]
 8000574:	881b      	ldrh	r3, [r3, #0]
 8000576:	2bff      	cmp	r3, #255	; 0xff
 8000578:	d801      	bhi.n	800057e <MCAL_GPIO_INIT+0x1e>
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	e001      	b.n	8000582 <MCAL_GPIO_INIT+0x22>
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	3304      	adds	r3, #4
 8000582:	60bb      	str	r3, [r7, #8]
	*(Loc_Config_Regester) &=~(0xf<<(Get_CRLH_Position(pinconfig->GPIO_PinNumber)));
 8000584:	683b      	ldr	r3, [r7, #0]
 8000586:	881b      	ldrh	r3, [r3, #0]
 8000588:	4618      	mov	r0, r3
 800058a:	f7ff ff73 	bl	8000474 <Get_CRLH_Position>
 800058e:	4603      	mov	r3, r0
 8000590:	461a      	mov	r2, r3
 8000592:	230f      	movs	r3, #15
 8000594:	4093      	lsls	r3, r2
 8000596:	43da      	mvns	r2, r3
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	401a      	ands	r2, r3
 800059e:	68bb      	ldr	r3, [r7, #8]
 80005a0:	601a      	str	r2, [r3, #0]
	if (pinconfig->GPIO_MODE==GPIO_Mode_OUTPUT_OD || pinconfig->GPIO_MODE==GPIO_Mode_OUTPUT_PP||\
 80005a2:	683b      	ldr	r3, [r7, #0]
 80005a4:	789b      	ldrb	r3, [r3, #2]
 80005a6:	2b05      	cmp	r3, #5
 80005a8:	d00b      	beq.n	80005c2 <MCAL_GPIO_INIT+0x62>
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	789b      	ldrb	r3, [r3, #2]
 80005ae:	2b04      	cmp	r3, #4
 80005b0:	d007      	beq.n	80005c2 <MCAL_GPIO_INIT+0x62>
			pinconfig->GPIO_MODE==GPIO_Mode_OUTPUT_AF_OD ||pinconfig->GPIO_MODE==GPIO_Mode_OUTPUT_AF_PP)
 80005b2:	683b      	ldr	r3, [r7, #0]
 80005b4:	789b      	ldrb	r3, [r3, #2]
	if (pinconfig->GPIO_MODE==GPIO_Mode_OUTPUT_OD || pinconfig->GPIO_MODE==GPIO_Mode_OUTPUT_PP||\
 80005b6:	2b07      	cmp	r3, #7
 80005b8:	d003      	beq.n	80005c2 <MCAL_GPIO_INIT+0x62>
			pinconfig->GPIO_MODE==GPIO_Mode_OUTPUT_AF_OD ||pinconfig->GPIO_MODE==GPIO_Mode_OUTPUT_AF_PP)
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	789b      	ldrb	r3, [r3, #2]
 80005be:	2b06      	cmp	r3, #6
 80005c0:	d10e      	bne.n	80005e0 <MCAL_GPIO_INIT+0x80>
	{
		Loc_Pin_Congif = ((((pinconfig->GPIO_MODE-4)<<2) | (pinconfig->GPIO_OutPut_Speed))&0x0f) ;
 80005c2:	683b      	ldr	r3, [r7, #0]
 80005c4:	789b      	ldrb	r3, [r3, #2]
 80005c6:	3b04      	subs	r3, #4
 80005c8:	009b      	lsls	r3, r3, #2
 80005ca:	b25a      	sxtb	r2, r3
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	78db      	ldrb	r3, [r3, #3]
 80005d0:	b25b      	sxtb	r3, r3
 80005d2:	4313      	orrs	r3, r2
 80005d4:	b25b      	sxtb	r3, r3
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	f003 030f 	and.w	r3, r3, #15
 80005dc:	73fb      	strb	r3, [r7, #15]
 80005de:	e031      	b.n	8000644 <MCAL_GPIO_INIT+0xe4>
	}
	else
	{
		if((pinconfig->GPIO_MODE==GPIO_Mode_INPUT_FLO)||(pinconfig->GPIO_MODE==GPIO_Mode_Analog))
 80005e0:	683b      	ldr	r3, [r7, #0]
 80005e2:	789b      	ldrb	r3, [r3, #2]
 80005e4:	2b01      	cmp	r3, #1
 80005e6:	d003      	beq.n	80005f0 <MCAL_GPIO_INIT+0x90>
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	789b      	ldrb	r3, [r3, #2]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d107      	bne.n	8000600 <MCAL_GPIO_INIT+0xa0>
		{
			Loc_Pin_Congif = ((((pinconfig->GPIO_MODE)<<2) |0x0)&0x0f) ;
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	789b      	ldrb	r3, [r3, #2]
 80005f4:	009b      	lsls	r3, r3, #2
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	f003 030f 	and.w	r3, r3, #15
 80005fc:	73fb      	strb	r3, [r7, #15]
 80005fe:	e021      	b.n	8000644 <MCAL_GPIO_INIT+0xe4>
		}
		else if (pinconfig->GPIO_MODE==GPIO_Mode_AF_INPUT)
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	789b      	ldrb	r3, [r3, #2]
 8000604:	2b08      	cmp	r3, #8
 8000606:	d102      	bne.n	800060e <MCAL_GPIO_INIT+0xae>
		{
			Loc_Pin_Congif = GPIO_Mode_AF_INPUT ;
 8000608:	2308      	movs	r3, #8
 800060a:	73fb      	strb	r3, [r7, #15]
 800060c:	e01a      	b.n	8000644 <MCAL_GPIO_INIT+0xe4>
		}
		else
		{
			Loc_Pin_Congif =(( (pinconfig->GPIO_MODE<< 2) |0x0)&0x0F) ;
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	789b      	ldrb	r3, [r3, #2]
 8000612:	009b      	lsls	r3, r3, #2
 8000614:	b2db      	uxtb	r3, r3
 8000616:	f003 030f 	and.w	r3, r3, #15
 800061a:	73fb      	strb	r3, [r7, #15]
			if (pinconfig->GPIO_MODE == GPIO_Mode_INPUT_PU)
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	789b      	ldrb	r3, [r3, #2]
 8000620:	2b02      	cmp	r3, #2
 8000622:	d107      	bne.n	8000634 <MCAL_GPIO_INIT+0xd4>
			{
				GPIOX->ODR |= pinconfig->GPIO_PinNumber ;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	68db      	ldr	r3, [r3, #12]
 8000628:	683a      	ldr	r2, [r7, #0]
 800062a:	8812      	ldrh	r2, [r2, #0]
 800062c:	431a      	orrs	r2, r3
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	e007      	b.n	8000644 <MCAL_GPIO_INIT+0xe4>
			}
			else
			{
				GPIOX->ODR &=~ (pinconfig->GPIO_PinNumber) ;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	68db      	ldr	r3, [r3, #12]
 8000638:	683a      	ldr	r2, [r7, #0]
 800063a:	8812      	ldrh	r2, [r2, #0]
 800063c:	43d2      	mvns	r2, r2
 800063e:	401a      	ands	r2, r3
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	60da      	str	r2, [r3, #12]
			}
		}
	}
	(*Loc_Config_Regester) |= ((Loc_Pin_Congif)<<Get_CRLH_Position(pinconfig->GPIO_PinNumber)) ;
 8000644:	7bfc      	ldrb	r4, [r7, #15]
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	881b      	ldrh	r3, [r3, #0]
 800064a:	4618      	mov	r0, r3
 800064c:	f7ff ff12 	bl	8000474 <Get_CRLH_Position>
 8000650:	4603      	mov	r3, r0
 8000652:	fa04 f203 	lsl.w	r2, r4, r3
 8000656:	68bb      	ldr	r3, [r7, #8]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	431a      	orrs	r2, r3
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	601a      	str	r2, [r3, #0]

}
 8000660:	bf00      	nop
 8000662:	3714      	adds	r7, #20
 8000664:	46bd      	mov	sp, r7
 8000666:	bd90      	pop	{r4, r7, pc}

08000668 <MCAL_RCC_GetSYSCLK1Freq>:
//1101: SYSCLK divided by 128
//1110: SYSCLK divided by 256
//1111: SYSCLK divided by 512
const uint8_t AHBPRrescTable[16U] = { 0,0,0,0,0,0,0,0,1,2,3,4,6,7,8,9};//shift 1 right == multiply by 2
uint32_t MCAL_RCC_GetSYSCLK1Freq(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
//	Set and cleared by hardware to indicate which clock source is used as system clock.
//	00: HSI oscillator used as system clock
//	01: HSE oscillator used as system clock
//	10: PLL used as system clock
//	11: Not applicable
switch((RCC->CFGR >> 2) &0b11)
 800066c:	4b0a      	ldr	r3, [pc, #40]	; (8000698 <MCAL_RCC_GetSYSCLK1Freq+0x30>)
 800066e:	685b      	ldr	r3, [r3, #4]
 8000670:	089b      	lsrs	r3, r3, #2
 8000672:	f003 0303 	and.w	r3, r3, #3
 8000676:	2b01      	cmp	r3, #1
 8000678:	d006      	beq.n	8000688 <MCAL_RCC_GetSYSCLK1Freq+0x20>
 800067a:	2b01      	cmp	r3, #1
 800067c:	d302      	bcc.n	8000684 <MCAL_RCC_GetSYSCLK1Freq+0x1c>
 800067e:	2b02      	cmp	r3, #2
 8000680:	d004      	beq.n	800068c <MCAL_RCC_GetSYSCLK1Freq+0x24>
 8000682:	e005      	b.n	8000690 <MCAL_RCC_GetSYSCLK1Freq+0x28>
		{
case 0:
	return HSI_RC_CLK;
 8000684:	4b05      	ldr	r3, [pc, #20]	; (800069c <MCAL_RCC_GetSYSCLK1Freq+0x34>)
 8000686:	e003      	b.n	8000690 <MCAL_RCC_GetSYSCLK1Freq+0x28>
	break;
case 1:
	//to do need to calculate it //externel
	return HSE_CLK ;
 8000688:	4b05      	ldr	r3, [pc, #20]	; (80006a0 <MCAL_RCC_GetSYSCLK1Freq+0x38>)
 800068a:	e001      	b.n	8000690 <MCAL_RCC_GetSYSCLK1Freq+0x28>
	break;
case 2:
	//to do need to calculate it
		return 16000000 ;
 800068c:	4b04      	ldr	r3, [pc, #16]	; (80006a0 <MCAL_RCC_GetSYSCLK1Freq+0x38>)
 800068e:	e7ff      	b.n	8000690 <MCAL_RCC_GetSYSCLK1Freq+0x28>

	break;

		}
}
 8000690:	4618      	mov	r0, r3
 8000692:	46bd      	mov	sp, r7
 8000694:	bc80      	pop	{r7}
 8000696:	4770      	bx	lr
 8000698:	40021000 	.word	0x40021000
 800069c:	007a1200 	.word	0x007a1200
 80006a0:	00f42400 	.word	0x00f42400

080006a4 <MCAL_RCC_GetHCLKFreq>:
uint32_t MCAL_RCC_GetHCLKFreq(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
	//Bits 7:4 HPRE[3:0]: AHB prescaler
	return (MCAL_RCC_GetSYSCLK1Freq() >> AHBPRrescTable[(RCC->CFGR >> 4) &0b1111]);
 80006a8:	f7ff ffde 	bl	8000668 <MCAL_RCC_GetSYSCLK1Freq>
 80006ac:	4601      	mov	r1, r0
 80006ae:	4b05      	ldr	r3, [pc, #20]	; (80006c4 <MCAL_RCC_GetHCLKFreq+0x20>)
 80006b0:	685b      	ldr	r3, [r3, #4]
 80006b2:	091b      	lsrs	r3, r3, #4
 80006b4:	f003 030f 	and.w	r3, r3, #15
 80006b8:	4a03      	ldr	r2, [pc, #12]	; (80006c8 <MCAL_RCC_GetHCLKFreq+0x24>)
 80006ba:	5cd3      	ldrb	r3, [r2, r3]
 80006bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	40021000 	.word	0x40021000
 80006c8:	08000b1c 	.word	0x08000b1c

080006cc <MCAL_RCC_GetPCLK1Freq>:
uint32_t MCAL_RCC_GetPCLK1Freq(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
	//	Bits 13:11 PPRE2[2:0]: APB high-speed prescaler (APB2)
	return (MCAL_RCC_GetHCLKFreq() >> APBPRrescTable[(RCC->CFGR >> 8) &0b111]);
 80006d0:	f7ff ffe8 	bl	80006a4 <MCAL_RCC_GetHCLKFreq>
 80006d4:	4601      	mov	r1, r0
 80006d6:	4b05      	ldr	r3, [pc, #20]	; (80006ec <MCAL_RCC_GetPCLK1Freq+0x20>)
 80006d8:	685b      	ldr	r3, [r3, #4]
 80006da:	0a1b      	lsrs	r3, r3, #8
 80006dc:	f003 0307 	and.w	r3, r3, #7
 80006e0:	4a03      	ldr	r2, [pc, #12]	; (80006f0 <MCAL_RCC_GetPCLK1Freq+0x24>)
 80006e2:	5cd3      	ldrb	r3, [r2, r3]
 80006e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	40021000 	.word	0x40021000
 80006f0:	08000b14 	.word	0x08000b14

080006f4 <MCAL_RCC_GetPCLK2Freq>:
uint32_t MCAL_RCC_GetPCLK2Freq(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
//	Bits 13:11 PPRE2[2:0]: APB high-speed prescaler (APB2)
	return (MCAL_RCC_GetHCLKFreq() >> APBPRrescTable[(RCC->CFGR >> 11) &0b111]);
 80006f8:	f7ff ffd4 	bl	80006a4 <MCAL_RCC_GetHCLKFreq>
 80006fc:	4601      	mov	r1, r0
 80006fe:	4b05      	ldr	r3, [pc, #20]	; (8000714 <MCAL_RCC_GetPCLK2Freq+0x20>)
 8000700:	685b      	ldr	r3, [r3, #4]
 8000702:	0adb      	lsrs	r3, r3, #11
 8000704:	f003 0307 	and.w	r3, r3, #7
 8000708:	4a03      	ldr	r2, [pc, #12]	; (8000718 <MCAL_RCC_GetPCLK2Freq+0x24>)
 800070a:	5cd3      	ldrb	r3, [r2, r3]
 800070c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000710:	4618      	mov	r0, r3
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40021000 	.word	0x40021000
 8000718:	08000b14 	.word	0x08000b14

0800071c <SPI1_IRQHandler>:
 * 										IRQ
 * =============================================================================
 */

void SPI1_IRQHandler (void)  /* SPI1 global interrupt*/
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src;

	irq_src.TXE = ((SPI1->SR & (1<<1)) >> 1);
 8000722:	4b13      	ldr	r3, [pc, #76]	; (8000770 <SPI1_IRQHandler+0x54>)
 8000724:	689b      	ldr	r3, [r3, #8]
 8000726:	085b      	lsrs	r3, r3, #1
 8000728:	f003 0301 	and.w	r3, r3, #1
 800072c:	b2da      	uxtb	r2, r3
 800072e:	793b      	ldrb	r3, [r7, #4]
 8000730:	f362 0300 	bfi	r3, r2, #0, #1
 8000734:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ((SPI1->SR & (1<<0)) >> 0);
 8000736:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <SPI1_IRQHandler+0x54>)
 8000738:	689b      	ldr	r3, [r3, #8]
 800073a:	f003 0301 	and.w	r3, r3, #1
 800073e:	b2da      	uxtb	r2, r3
 8000740:	793b      	ldrb	r3, [r7, #4]
 8000742:	f362 0341 	bfi	r3, r2, #1, #1
 8000746:	713b      	strb	r3, [r7, #4]
	irq_src.ERR = ((SPI1->SR & (1<<4)) >> 4);
 8000748:	4b09      	ldr	r3, [pc, #36]	; (8000770 <SPI1_IRQHandler+0x54>)
 800074a:	689b      	ldr	r3, [r3, #8]
 800074c:	091b      	lsrs	r3, r3, #4
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	b2da      	uxtb	r2, r3
 8000754:	793b      	ldrb	r3, [r7, #4]
 8000756:	f362 0382 	bfi	r3, r2, #2, #1
 800075a:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[SPI1_Index]->P_IRQ_CallBack (irq_src);
 800075c:	4b05      	ldr	r3, [pc, #20]	; (8000774 <SPI1_IRQHandler+0x58>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	695b      	ldr	r3, [r3, #20]
 8000762:	7938      	ldrb	r0, [r7, #4]
 8000764:	4798      	blx	r3

}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40013000 	.word	0x40013000
 8000774:	2000001c 	.word	0x2000001c

08000778 <SPI2_IRQHandler>:

void SPI2_IRQHandler (void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC irq_src;

	irq_src.TXE = ((SPI2->SR & (1<<1)) >> 1);
 800077e:	4b13      	ldr	r3, [pc, #76]	; (80007cc <SPI2_IRQHandler+0x54>)
 8000780:	689b      	ldr	r3, [r3, #8]
 8000782:	085b      	lsrs	r3, r3, #1
 8000784:	f003 0301 	and.w	r3, r3, #1
 8000788:	b2da      	uxtb	r2, r3
 800078a:	793b      	ldrb	r3, [r7, #4]
 800078c:	f362 0300 	bfi	r3, r2, #0, #1
 8000790:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ((SPI2->SR & (1<<0)) >> 0);
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <SPI2_IRQHandler+0x54>)
 8000794:	689b      	ldr	r3, [r3, #8]
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	b2da      	uxtb	r2, r3
 800079c:	793b      	ldrb	r3, [r7, #4]
 800079e:	f362 0341 	bfi	r3, r2, #1, #1
 80007a2:	713b      	strb	r3, [r7, #4]
	irq_src.ERR = ((SPI2->SR & (1<<4)) >> 4);
 80007a4:	4b09      	ldr	r3, [pc, #36]	; (80007cc <SPI2_IRQHandler+0x54>)
 80007a6:	689b      	ldr	r3, [r3, #8]
 80007a8:	091b      	lsrs	r3, r3, #4
 80007aa:	f003 0301 	and.w	r3, r3, #1
 80007ae:	b2da      	uxtb	r2, r3
 80007b0:	793b      	ldrb	r3, [r7, #4]
 80007b2:	f362 0382 	bfi	r3, r2, #2, #1
 80007b6:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[SPI2_Index]->P_IRQ_CallBack (irq_src);
 80007b8:	4b05      	ldr	r3, [pc, #20]	; (80007d0 <SPI2_IRQHandler+0x58>)
 80007ba:	685b      	ldr	r3, [r3, #4]
 80007bc:	695b      	ldr	r3, [r3, #20]
 80007be:	7938      	ldrb	r0, [r7, #4]
 80007c0:	4798      	blx	r3
}
 80007c2:	bf00      	nop
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40003800 	.word	0x40003800
 80007d0:	2000001c 	.word	0x2000001c

080007d4 <MCAL_USART_Init>:
 *	param[in]          -USART_Config :all the uart configuration
 * 	@retval           -none
 * 	Note              -support for now ASynch mode and clock 8 HZ
 ********************************************************************************************************************/
void MCAL_USART_Init(USART_Typedef* USARTX , USART_Conig_t* USART_Config)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	6039      	str	r1, [r7, #0]
	uint32_t PCLK , BRR ;
	Global_Usart_ConFig = USART_Config ;
 80007de:	4a48      	ldr	r2, [pc, #288]	; (8000900 <MCAL_USART_Init+0x12c>)
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	6013      	str	r3, [r2, #0]

	//enable the clock for given USART Peripheral
	if (USARTX == USART1)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	4a47      	ldr	r2, [pc, #284]	; (8000904 <MCAL_USART_Init+0x130>)
 80007e8:	4293      	cmp	r3, r2
 80007ea:	d106      	bne.n	80007fa <MCAL_USART_Init+0x26>
	{
		RCC_USART1_CLK_EN();
 80007ec:	4b46      	ldr	r3, [pc, #280]	; (8000908 <MCAL_USART_Init+0x134>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	4a45      	ldr	r2, [pc, #276]	; (8000908 <MCAL_USART_Init+0x134>)
 80007f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007f6:	6193      	str	r3, [r2, #24]
 80007f8:	e014      	b.n	8000824 <MCAL_USART_Init+0x50>
	}
	else if (USARTX == USART2)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	4a43      	ldr	r2, [pc, #268]	; (800090c <MCAL_USART_Init+0x138>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d106      	bne.n	8000810 <MCAL_USART_Init+0x3c>
	{
		RCC_USART2_CLK_EN();
 8000802:	4b41      	ldr	r3, [pc, #260]	; (8000908 <MCAL_USART_Init+0x134>)
 8000804:	69db      	ldr	r3, [r3, #28]
 8000806:	4a40      	ldr	r2, [pc, #256]	; (8000908 <MCAL_USART_Init+0x134>)
 8000808:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800080c:	61d3      	str	r3, [r2, #28]
 800080e:	e009      	b.n	8000824 <MCAL_USART_Init+0x50>
	}
	else if (USARTX == USART3)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	4a3f      	ldr	r2, [pc, #252]	; (8000910 <MCAL_USART_Init+0x13c>)
 8000814:	4293      	cmp	r3, r2
 8000816:	d105      	bne.n	8000824 <MCAL_USART_Init+0x50>
	{
		RCC_USART3_CLK_EN();
 8000818:	4b3b      	ldr	r3, [pc, #236]	; (8000908 <MCAL_USART_Init+0x134>)
 800081a:	69db      	ldr	r3, [r3, #28]
 800081c:	4a3a      	ldr	r2, [pc, #232]	; (8000908 <MCAL_USART_Init+0x134>)
 800081e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000822:	61d3      	str	r3, [r2, #28]
	}

	USARTX->CR1 |= (1<<13) ;							//Enable USART Module	USART_CR1  Bit 13 UE: USART enable
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	68db      	ldr	r3, [r3, #12]
 8000828:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	60da      	str	r2, [r3, #12]
	USARTX->CR1 |= USART_Config->USART_MODE ;			//Enable USART Tx and Rx engines according to the USART_Mode configuration item
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	68db      	ldr	r3, [r3, #12]
 8000834:	683a      	ldr	r2, [r7, #0]
 8000836:	7812      	ldrb	r2, [r2, #0]
 8000838:	431a      	orrs	r2, r3
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	60da      	str	r2, [r3, #12]
	//	USART_CR1 Bit 3 TE: Transmitter enable & Bit 2 RE: Receiver enable

	USARTX->CR1 |= USART_Config->PayLoad_Length ;		// enable Payload width 	USARTx->CR1  Bit 12 M: Word length
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	68db      	ldr	r3, [r3, #12]
 8000842:	683a      	ldr	r2, [r7, #0]
 8000844:	7a12      	ldrb	r2, [r2, #8]
 8000846:	431a      	orrs	r2, r3
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	60da      	str	r2, [r3, #12]

	USARTX->CR1 |= USART_Config->Parity ;				//Configuration of parity control bit fields
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	68db      	ldr	r3, [r3, #12]
 8000850:	683a      	ldr	r2, [r7, #0]
 8000852:	7a52      	ldrb	r2, [r2, #9]
 8000854:	431a      	orrs	r2, r3
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	60da      	str	r2, [r3, #12]
	// USARTx->CR1 	Bit 10 PCE: Parity control enable     Bit 9 PS: Parity selection

	USARTX->CR2 |= USART_Config->StopBits ;				//configure stop bits	USART_CR2  Bits 13:12 STOP: STOP bits
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	691b      	ldr	r3, [r3, #16]
 800085e:	683a      	ldr	r2, [r7, #0]
 8000860:	7a92      	ldrb	r2, [r2, #10]
 8000862:	431a      	orrs	r2, r3
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	611a      	str	r2, [r3, #16]
	USARTX->CR3 |= USART_Config->HWFlowCtl ;			//USART hardware flow control	USART_CR3  Bit 9 CTSE: CTS enable   Bit 8 RTSE: RTS enable
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	695b      	ldr	r3, [r3, #20]
 800086c:	683a      	ldr	r2, [r7, #0]
 800086e:	7ad2      	ldrb	r2, [r2, #11]
 8000870:	431a      	orrs	r2, r3
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	615a      	str	r2, [r3, #20]

	//Configure baud rate
	//PCLK2 For USART1
	//PCLK1 for USART2 ,3
	if(USARTX == USART1)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	4a22      	ldr	r2, [pc, #136]	; (8000904 <MCAL_USART_Init+0x130>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d103      	bne.n	8000886 <MCAL_USART_Init+0xb2>
	{
		PCLK = MCAL_RCC_GetPCLK2Freq();
 800087e:	f7ff ff39 	bl	80006f4 <MCAL_RCC_GetPCLK2Freq>
 8000882:	60f8      	str	r0, [r7, #12]
 8000884:	e002      	b.n	800088c <MCAL_USART_Init+0xb8>
	}
	else
	{
		PCLK = MCAL_RCC_GetPCLK1Freq();
 8000886:	f7ff ff21 	bl	80006cc <MCAL_RCC_GetPCLK1Freq>
 800088a:	60f8      	str	r0, [r7, #12]
	}
	BRR = USART_BRR_Register(PCLK,USART_Config->BaudRate);
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	685b      	ldr	r3, [r3, #4]
 8000890:	011b      	lsls	r3, r3, #4
 8000892:	68fa      	ldr	r2, [r7, #12]
 8000894:	fbb2 f3f3 	udiv	r3, r2, r3
 8000898:	011b      	lsls	r3, r3, #4
 800089a:	60bb      	str	r3, [r7, #8]
	USARTX->BRR = BRR ;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	68ba      	ldr	r2, [r7, #8]
 80008a0:	609a      	str	r2, [r3, #8]

	if (USART_Config->IRQ_Enable != USART_IRQ_Enable_NONE)
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	7b1b      	ldrb	r3, [r3, #12]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d026      	beq.n	80008f8 <MCAL_USART_Init+0x124>
	{
		USARTX->CR1 |= USART_Config->IRQ_Enable ;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	68db      	ldr	r3, [r3, #12]
 80008ae:	683a      	ldr	r2, [r7, #0]
 80008b0:	7b12      	ldrb	r2, [r2, #12]
 80008b2:	431a      	orrs	r2, r3
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	60da      	str	r2, [r3, #12]
		//enable NVIC for USART IRQ
		if (USARTX == USART1)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	4a12      	ldr	r2, [pc, #72]	; (8000904 <MCAL_USART_Init+0x130>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d106      	bne.n	80008ce <MCAL_USART_Init+0xfa>
		{
			NVIC_IRQ37_USART1_Enable ;
 80008c0:	4b14      	ldr	r3, [pc, #80]	; (8000914 <MCAL_USART_Init+0x140>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a13      	ldr	r2, [pc, #76]	; (8000914 <MCAL_USART_Init+0x140>)
 80008c6:	f043 0320 	orr.w	r3, r3, #32
 80008ca:	6013      	str	r3, [r2, #0]
		else if (USARTX == USART3)
		{
			NVIC_IRQ39_USART3_Enable ;
		}
	}
}
 80008cc:	e014      	b.n	80008f8 <MCAL_USART_Init+0x124>
		else if (USARTX == USART2)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	4a0e      	ldr	r2, [pc, #56]	; (800090c <MCAL_USART_Init+0x138>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d106      	bne.n	80008e4 <MCAL_USART_Init+0x110>
			NVIC_IRQ38_USART2_Enable ;
 80008d6:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <MCAL_USART_Init+0x140>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4a0e      	ldr	r2, [pc, #56]	; (8000914 <MCAL_USART_Init+0x140>)
 80008dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008e0:	6013      	str	r3, [r2, #0]
}
 80008e2:	e009      	b.n	80008f8 <MCAL_USART_Init+0x124>
		else if (USARTX == USART3)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	4a0a      	ldr	r2, [pc, #40]	; (8000910 <MCAL_USART_Init+0x13c>)
 80008e8:	4293      	cmp	r3, r2
 80008ea:	d105      	bne.n	80008f8 <MCAL_USART_Init+0x124>
			NVIC_IRQ39_USART3_Enable ;
 80008ec:	4b09      	ldr	r3, [pc, #36]	; (8000914 <MCAL_USART_Init+0x140>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a08      	ldr	r2, [pc, #32]	; (8000914 <MCAL_USART_Init+0x140>)
 80008f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008f6:	6013      	str	r3, [r2, #0]
}
 80008f8:	bf00      	nop
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	20000024 	.word	0x20000024
 8000904:	40013800 	.word	0x40013800
 8000908:	40021000 	.word	0x40021000
 800090c:	40004400 	.word	0x40004400
 8000910:	40004800 	.word	0x40004800
 8000914:	e000e104 	.word	0xe000e104

08000918 <MCAL_USART_SendData>:
 *							because it is replaced by the parity.
 *  						When receiving with the parity enabled, the value read in the MSB bit is the received parity
 *
 ********************************************************************************************************************/
void MCAL_USART_SendData(USART_Typedef* USARTX , uint16_t *PtxBuffer ,Polling_mechanism_t PollingEn )
{
 8000918:	b480      	push	{r7}
 800091a:	b085      	sub	sp, #20
 800091c:	af00      	add	r7, sp, #0
 800091e:	60f8      	str	r0, [r7, #12]
 8000920:	60b9      	str	r1, [r7, #8]
 8000922:	4613      	mov	r3, r2
 8000924:	71fb      	strb	r3, [r7, #7]
	//wait until TXE is set
	if(PollingEn==Enable)
 8000926:	79fb      	ldrb	r3, [r7, #7]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d106      	bne.n	800093a <MCAL_USART_SendData+0x22>
		while(!(USARTX->SR &(1<<7)));
 800092c:	bf00      	nop
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000936:	2b00      	cmp	r3, #0
 8000938:	d0f9      	beq.n	800092e <MCAL_USART_SendData+0x16>
	{
		USARTX->DR = (*PtxBuffer&(uint16_t)0x01FF);
	}
	else
	{
		USARTX->DR = (*PtxBuffer&(uint8_t)0xFF);
 800093a:	68bb      	ldr	r3, [r7, #8]
 800093c:	881b      	ldrh	r3, [r3, #0]
 800093e:	b2da      	uxtb	r2, r3
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	605a      	str	r2, [r3, #4]
	}

}
 8000944:	bf00      	nop
 8000946:	3714      	adds	r7, #20
 8000948:	46bd      	mov	sp, r7
 800094a:	bc80      	pop	{r7}
 800094c:	4770      	bx	lr
	...

08000950 <MCAL_USART_RecieveData>:
 *		param[in]          -PollingEn enable or disable the polling
 * 		@retval           -none
 * 		Note              -none																										*
 ********************************************************************************************************************/
void MCAL_USART_RecieveData(USART_Typedef* USARTX , uint16_t *PtxBuffer ,Polling_mechanism_t PollingEn )
{
 8000950:	b480      	push	{r7}
 8000952:	b085      	sub	sp, #20
 8000954:	af00      	add	r7, sp, #0
 8000956:	60f8      	str	r0, [r7, #12]
 8000958:	60b9      	str	r1, [r7, #8]
 800095a:	4613      	mov	r3, r2
 800095c:	71fb      	strb	r3, [r7, #7]
	//wait until RXNE is set
	if (PollingEn == Enable)
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d106      	bne.n	8000972 <MCAL_USART_RecieveData+0x22>
	{
		while(!(USARTX->SR&(1<<5)));
 8000964:	bf00      	nop
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f003 0320 	and.w	r3, r3, #32
 800096e:	2b00      	cmp	r3, #0
 8000970:	d0f9      	beq.n	8000966 <MCAL_USART_RecieveData+0x16>
			*((uint16_t*)PtxBuffer) =( USARTX->DR & (uint8_t)0xFF);
		}
	}
	else //8 bit data
	{
		if(Global_Usart_ConFig->Parity == USART_Parity_NONE)
 8000972:	4b0d      	ldr	r3, [pc, #52]	; (80009a8 <MCAL_USART_RecieveData+0x58>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	7a5b      	ldrb	r3, [r3, #9]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d107      	bne.n	800098c <MCAL_USART_RecieveData+0x3c>
		{
			//no parity so all 9bits are data
			*((uint16_t*)PtxBuffer) = (USARTX->DR   & (uint8_t)0xFF);
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	b29b      	uxth	r3, r3
 8000982:	b2db      	uxtb	r3, r3
 8000984:	b29a      	uxth	r2, r3
 8000986:	68bb      	ldr	r3, [r7, #8]
 8000988:	801a      	strh	r2, [r3, #0]
		}else{
			//if parity is used so 8bit is data and the last one is parity
			*((uint16_t*)PtxBuffer) =( USARTX->DR & (uint8_t)0x7F);
		}
	}
}
 800098a:	e007      	b.n	800099c <MCAL_USART_RecieveData+0x4c>
			*((uint16_t*)PtxBuffer) =( USARTX->DR & (uint8_t)0x7F);
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	b29b      	uxth	r3, r3
 8000992:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000996:	b29a      	uxth	r2, r3
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	801a      	strh	r2, [r3, #0]
}
 800099c:	bf00      	nop
 800099e:	3714      	adds	r7, #20
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bc80      	pop	{r7}
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	20000024 	.word	0x20000024

080009ac <MCAL_USART_GPIO_Set_Pins>:
 *		param[in]         -USARTX :where x can be 1,2,3 depending on device used
 * 		@retval           -none
 * 		Note              -should enable the corresponding ALT &GPIO in RCC CLOCK AND called after MCAL_UART_INIT()																													*
 ********************************************************************************************************************/
void MCAL_USART_GPIO_Set_Pins(USART_Typedef* USARTX )
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
	GPIO_PinCongif_t pincfg;
	if(USARTX == USART1)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	4a2b      	ldr	r2, [pc, #172]	; (8000a64 <MCAL_USART_GPIO_Set_Pins+0xb8>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d118      	bne.n	80009ee <MCAL_USART_GPIO_Set_Pins+0x42>
		//PA10 RX
		//PA11 CTS
		//PA12 RTS

		//PA9 TX
		pincfg.GPIO_PinNumber = GPIO_PIN_9 ;
 80009bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009c0:	81bb      	strh	r3, [r7, #12]
		pincfg.GPIO_MODE = GPIO_Mode_OUTPUT_AF_PP;
 80009c2:	2306      	movs	r3, #6
 80009c4:	73bb      	strb	r3, [r7, #14]
		pincfg.GPIO_OutPut_Speed = GPIO_SPEED_10M;
 80009c6:	2301      	movs	r3, #1
 80009c8:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_INIT(GPIOA, &pincfg) ;
 80009ca:	f107 030c 	add.w	r3, r7, #12
 80009ce:	4619      	mov	r1, r3
 80009d0:	4825      	ldr	r0, [pc, #148]	; (8000a68 <MCAL_USART_GPIO_Set_Pins+0xbc>)
 80009d2:	f7ff fdc5 	bl	8000560 <MCAL_GPIO_INIT>

		//PA10 RX
		pincfg.GPIO_PinNumber = GPIO_PIN_10   ;
 80009d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009da:	81bb      	strh	r3, [r7, #12]
		pincfg.GPIO_MODE = GPIO_Mode_AF_INPUT ;
 80009dc:	2308      	movs	r3, #8
 80009de:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_INIT(GPIOA, &pincfg) ;
 80009e0:	f107 030c 	add.w	r3, r7, #12
 80009e4:	4619      	mov	r1, r3
 80009e6:	4820      	ldr	r0, [pc, #128]	; (8000a68 <MCAL_USART_GPIO_Set_Pins+0xbc>)
 80009e8:	f7ff fdba 	bl	8000560 <MCAL_GPIO_INIT>
			pincfg.GPIO_OutPut_Speed = GPIO_SPEED_10M;
			MCAL_GPIO_INIT(GPIOA, &pincfg) ;
		}

	}
}
 80009ec:	e036      	b.n	8000a5c <MCAL_USART_GPIO_Set_Pins+0xb0>
	else if(USARTX == USART2)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4a1e      	ldr	r2, [pc, #120]	; (8000a6c <MCAL_USART_GPIO_Set_Pins+0xc0>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d116      	bne.n	8000a24 <MCAL_USART_GPIO_Set_Pins+0x78>
		pincfg.GPIO_PinNumber = GPIO_PIN_2 ;
 80009f6:	2304      	movs	r3, #4
 80009f8:	81bb      	strh	r3, [r7, #12]
		pincfg.GPIO_MODE = GPIO_Mode_OUTPUT_AF_PP;
 80009fa:	2306      	movs	r3, #6
 80009fc:	73bb      	strb	r3, [r7, #14]
		pincfg.GPIO_OutPut_Speed = GPIO_SPEED_10M;
 80009fe:	2301      	movs	r3, #1
 8000a00:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_INIT(GPIOA, &pincfg) ;
 8000a02:	f107 030c 	add.w	r3, r7, #12
 8000a06:	4619      	mov	r1, r3
 8000a08:	4817      	ldr	r0, [pc, #92]	; (8000a68 <MCAL_USART_GPIO_Set_Pins+0xbc>)
 8000a0a:	f7ff fda9 	bl	8000560 <MCAL_GPIO_INIT>
		pincfg.GPIO_PinNumber = GPIO_PIN_3 ;
 8000a0e:	2308      	movs	r3, #8
 8000a10:	81bb      	strh	r3, [r7, #12]
		pincfg.GPIO_MODE = GPIO_Mode_AF_INPUT;
 8000a12:	2308      	movs	r3, #8
 8000a14:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_INIT(GPIOA, &pincfg) ;
 8000a16:	f107 030c 	add.w	r3, r7, #12
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4812      	ldr	r0, [pc, #72]	; (8000a68 <MCAL_USART_GPIO_Set_Pins+0xbc>)
 8000a1e:	f7ff fd9f 	bl	8000560 <MCAL_GPIO_INIT>
}
 8000a22:	e01b      	b.n	8000a5c <MCAL_USART_GPIO_Set_Pins+0xb0>
	else if(USARTX == USART3)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	4a12      	ldr	r2, [pc, #72]	; (8000a70 <MCAL_USART_GPIO_Set_Pins+0xc4>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d117      	bne.n	8000a5c <MCAL_USART_GPIO_Set_Pins+0xb0>
		pincfg.GPIO_PinNumber = GPIO_PIN_10 ;
 8000a2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a30:	81bb      	strh	r3, [r7, #12]
		pincfg.GPIO_MODE = GPIO_Mode_OUTPUT_AF_PP;
 8000a32:	2306      	movs	r3, #6
 8000a34:	73bb      	strb	r3, [r7, #14]
		pincfg.GPIO_OutPut_Speed = GPIO_SPEED_10M;
 8000a36:	2301      	movs	r3, #1
 8000a38:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_INIT(GPIOB, &pincfg) ;
 8000a3a:	f107 030c 	add.w	r3, r7, #12
 8000a3e:	4619      	mov	r1, r3
 8000a40:	480c      	ldr	r0, [pc, #48]	; (8000a74 <MCAL_USART_GPIO_Set_Pins+0xc8>)
 8000a42:	f7ff fd8d 	bl	8000560 <MCAL_GPIO_INIT>
		pincfg.GPIO_PinNumber = GPIO_PIN_11 ;
 8000a46:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a4a:	81bb      	strh	r3, [r7, #12]
		pincfg.GPIO_MODE = GPIO_Mode_AF_INPUT;
 8000a4c:	2308      	movs	r3, #8
 8000a4e:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_INIT(GPIOB, &pincfg) ;
 8000a50:	f107 030c 	add.w	r3, r7, #12
 8000a54:	4619      	mov	r1, r3
 8000a56:	4807      	ldr	r0, [pc, #28]	; (8000a74 <MCAL_USART_GPIO_Set_Pins+0xc8>)
 8000a58:	f7ff fd82 	bl	8000560 <MCAL_GPIO_INIT>
}
 8000a5c:	bf00      	nop
 8000a5e:	3710      	adds	r7, #16
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	40013800 	.word	0x40013800
 8000a68:	40010800 	.word	0x40010800
 8000a6c:	40004400 	.word	0x40004400
 8000a70:	40004800 	.word	0x40004800
 8000a74:	40010c00 	.word	0x40010c00

08000a78 <USART1_IRQHandler>:



//ISR
void USART1_IRQHandler(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
	Global_Usart_ConFig->P_IRQ_CallBack();
 8000a7c:	4b02      	ldr	r3, [pc, #8]	; (8000a88 <USART1_IRQHandler+0x10>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	691b      	ldr	r3, [r3, #16]
 8000a82:	4798      	blx	r3
}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	20000024 	.word	0x20000024

08000a8c <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
	Global_Usart_ConFig->P_IRQ_CallBack();
 8000a90:	4b02      	ldr	r3, [pc, #8]	; (8000a9c <USART2_IRQHandler+0x10>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	691b      	ldr	r3, [r3, #16]
 8000a96:	4798      	blx	r3
}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	20000024 	.word	0x20000024

08000aa0 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
	Global_Usart_ConFig->P_IRQ_CallBack();
 8000aa4:	4b02      	ldr	r3, [pc, #8]	; (8000ab0 <USART3_IRQHandler+0x10>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	691b      	ldr	r3, [r3, #16]
 8000aaa:	4798      	blx	r3
}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20000024 	.word	0x20000024

08000ab4 <__libc_init_array>:
 8000ab4:	b570      	push	{r4, r5, r6, lr}
 8000ab6:	2500      	movs	r5, #0
 8000ab8:	4e0c      	ldr	r6, [pc, #48]	; (8000aec <__libc_init_array+0x38>)
 8000aba:	4c0d      	ldr	r4, [pc, #52]	; (8000af0 <__libc_init_array+0x3c>)
 8000abc:	1ba4      	subs	r4, r4, r6
 8000abe:	10a4      	asrs	r4, r4, #2
 8000ac0:	42a5      	cmp	r5, r4
 8000ac2:	d109      	bne.n	8000ad8 <__libc_init_array+0x24>
 8000ac4:	f000 f81a 	bl	8000afc <_init>
 8000ac8:	2500      	movs	r5, #0
 8000aca:	4e0a      	ldr	r6, [pc, #40]	; (8000af4 <__libc_init_array+0x40>)
 8000acc:	4c0a      	ldr	r4, [pc, #40]	; (8000af8 <__libc_init_array+0x44>)
 8000ace:	1ba4      	subs	r4, r4, r6
 8000ad0:	10a4      	asrs	r4, r4, #2
 8000ad2:	42a5      	cmp	r5, r4
 8000ad4:	d105      	bne.n	8000ae2 <__libc_init_array+0x2e>
 8000ad6:	bd70      	pop	{r4, r5, r6, pc}
 8000ad8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000adc:	4798      	blx	r3
 8000ade:	3501      	adds	r5, #1
 8000ae0:	e7ee      	b.n	8000ac0 <__libc_init_array+0xc>
 8000ae2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ae6:	4798      	blx	r3
 8000ae8:	3501      	adds	r5, #1
 8000aea:	e7f2      	b.n	8000ad2 <__libc_init_array+0x1e>
 8000aec:	08000b2c 	.word	0x08000b2c
 8000af0:	08000b2c 	.word	0x08000b2c
 8000af4:	08000b2c 	.word	0x08000b2c
 8000af8:	08000b30 	.word	0x08000b30

08000afc <_init>:
 8000afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000afe:	bf00      	nop
 8000b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b02:	bc08      	pop	{r3}
 8000b04:	469e      	mov	lr, r3
 8000b06:	4770      	bx	lr

08000b08 <_fini>:
 8000b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b0a:	bf00      	nop
 8000b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b0e:	bc08      	pop	{r3}
 8000b10:	469e      	mov	lr, r3
 8000b12:	4770      	bx	lr
