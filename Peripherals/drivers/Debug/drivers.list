
drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000097c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08000aac  08000aac  00010aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ae4  08000ae4  00010aec  2**0
                  CONTENTS
  4 .ARM          00000000  08000ae4  08000ae4  00010aec  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ae4  08000aec  00010aec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ae4  08000ae4  00010ae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ae8  08000ae8  00010ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010aec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  20000000  08000aec  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000005c  08000aec  0002005c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010aec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004d87  00000000  00000000  00010b15  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000bad  00000000  00000000  0001589c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000d3a  00000000  00000000  00016449  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000238  00000000  00000000  00017188  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001d0  00000000  00000000  000173c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000edd  00000000  00000000  00017590  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000281f  00000000  00000000  0001846d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00009ed3  00000000  00000000  0001ac8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00024b5f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000700  00000000  00000000  00024bdc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000a94 	.word	0x08000a94

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000a94 	.word	0x08000a94

08000170 <_delay_ms>:
	MCAL_GPIO_Write_PIN(LCD_CTRL, EN_SWITCH,HIGH);
	_delay_ms(50);
	MCAL_GPIO_Write_PIN(LCD_CTRL, EN_SWITCH,LOW);
}
void _delay_ms(int Delay)
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	for(int  i = 0 ; i < Delay ; i++ )
 8000178:	2300      	movs	r3, #0
 800017a:	60fb      	str	r3, [r7, #12]
 800017c:	e00b      	b.n	8000196 <_delay_ms+0x26>
		for(int j = 0 ; j < 255 ; j++) ;
 800017e:	2300      	movs	r3, #0
 8000180:	60bb      	str	r3, [r7, #8]
 8000182:	e002      	b.n	800018a <_delay_ms+0x1a>
 8000184:	68bb      	ldr	r3, [r7, #8]
 8000186:	3301      	adds	r3, #1
 8000188:	60bb      	str	r3, [r7, #8]
 800018a:	68bb      	ldr	r3, [r7, #8]
 800018c:	2bfe      	cmp	r3, #254	; 0xfe
 800018e:	ddf9      	ble.n	8000184 <_delay_ms+0x14>
	for(int  i = 0 ; i < Delay ; i++ )
 8000190:	68fb      	ldr	r3, [r7, #12]
 8000192:	3301      	adds	r3, #1
 8000194:	60fb      	str	r3, [r7, #12]
 8000196:	68fa      	ldr	r2, [r7, #12]
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	429a      	cmp	r2, r3
 800019c:	dbef      	blt.n	800017e <_delay_ms+0xe>
}
 800019e:	bf00      	nop
 80001a0:	3714      	adds	r7, #20
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <Clock_Init>:
#include "GPIO.h"
#include "LCD.h"
#include "UART.h"

void Clock_Init()
{
 80001a8:	b480      	push	{r7}
 80001aa:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_EN();
 80001ac:	4b0a      	ldr	r3, [pc, #40]	; (80001d8 <Clock_Init+0x30>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	4a09      	ldr	r2, [pc, #36]	; (80001d8 <Clock_Init+0x30>)
 80001b2:	f043 0304 	orr.w	r3, r3, #4
 80001b6:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 80001b8:	4b07      	ldr	r3, [pc, #28]	; (80001d8 <Clock_Init+0x30>)
 80001ba:	699b      	ldr	r3, [r3, #24]
 80001bc:	4a06      	ldr	r2, [pc, #24]	; (80001d8 <Clock_Init+0x30>)
 80001be:	f043 0308 	orr.w	r3, r3, #8
 80001c2:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <Clock_Init+0x30>)
 80001c6:	699b      	ldr	r3, [r3, #24]
 80001c8:	4a03      	ldr	r2, [pc, #12]	; (80001d8 <Clock_Init+0x30>)
 80001ca:	f043 0301 	orr.w	r3, r3, #1
 80001ce:	6193      	str	r3, [r2, #24]
}
 80001d0:	bf00      	nop
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bc80      	pop	{r7}
 80001d6:	4770      	bx	lr
 80001d8:	40021000 	.word	0x40021000

080001dc <main>:
int main(void)
{
 80001dc:	b5b0      	push	{r4, r5, r7, lr}
 80001de:	b08e      	sub	sp, #56	; 0x38
 80001e0:	af00      	add	r7, sp, #0
	uint8_t string[30] = "Learn In Depth   " ;
 80001e2:	4b1a      	ldr	r3, [pc, #104]	; (800024c <main+0x70>)
 80001e4:	f107 0418 	add.w	r4, r7, #24
 80001e8:	461d      	mov	r5, r3
 80001ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001ee:	682b      	ldr	r3, [r5, #0]
 80001f0:	8023      	strh	r3, [r4, #0]
 80001f2:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 80001f6:	2200      	movs	r2, #0
 80001f8:	601a      	str	r2, [r3, #0]
 80001fa:	605a      	str	r2, [r3, #4]
 80001fc:	609a      	str	r2, [r3, #8]
	USART_Conig_t USART_ConFig ;
	Clock_Init();
 80001fe:	f7ff ffd3 	bl	80001a8 <Clock_Init>

	USART_ConFig.BaudRate= USART_BaudRate_9600;
 8000202:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000206:	60bb      	str	r3, [r7, #8]
	USART_ConFig.HWFlowCtl=USART_HWFlowCtl_NONE;
 8000208:	2300      	movs	r3, #0
 800020a:	73fb      	strb	r3, [r7, #15]
	USART_ConFig.IRQ_Enable=USART_IRQ_Enable_NONE;
 800020c:	2300      	movs	r3, #0
 800020e:	743b      	strb	r3, [r7, #16]
	USART_ConFig.P_IRQ_CallBack = NULL ;
 8000210:	2300      	movs	r3, #0
 8000212:	617b      	str	r3, [r7, #20]
	USART_ConFig.Parity = USART_Parity_NONE ;
 8000214:	2300      	movs	r3, #0
 8000216:	737b      	strb	r3, [r7, #13]
	USART_ConFig.PayLoad_Length=USART_PayLoad_Length8B;
 8000218:	2300      	movs	r3, #0
 800021a:	733b      	strb	r3, [r7, #12]
	USART_ConFig.StopBits=USART_StopBits_One ;
 800021c:	2300      	movs	r3, #0
 800021e:	73bb      	strb	r3, [r7, #14]
	USART_ConFig.USART_MODE=USART_MODE_TX_RX ;
 8000220:	230c      	movs	r3, #12
 8000222:	713b      	strb	r3, [r7, #4]

	MCAL_USART_Init(USART1,&USART_ConFig);
 8000224:	1d3b      	adds	r3, r7, #4
 8000226:	4619      	mov	r1, r3
 8000228:	4809      	ldr	r0, [pc, #36]	; (8000250 <main+0x74>)
 800022a:	f000 faa1 	bl	8000770 <MCAL_USART_Init>
	MCAL_USART_GPIO_Set_Pins(USART1);
 800022e:	4808      	ldr	r0, [pc, #32]	; (8000250 <main+0x74>)
 8000230:	f000 fb88 	bl	8000944 <MCAL_USART_GPIO_Set_Pins>
	while(1)
	{
		MCAL_USART_Send_String(USART1, string, Enable);
 8000234:	f107 0318 	add.w	r3, r7, #24
 8000238:	2200      	movs	r2, #0
 800023a:	4619      	mov	r1, r3
 800023c:	4804      	ldr	r0, [pc, #16]	; (8000250 <main+0x74>)
 800023e:	f000 fb55 	bl	80008ec <MCAL_USART_Send_String>
		_delay_ms(250) ;
 8000242:	20fa      	movs	r0, #250	; 0xfa
 8000244:	f7ff ff94 	bl	8000170 <_delay_ms>
		MCAL_USART_Send_String(USART1, string, Enable);
 8000248:	e7f4      	b.n	8000234 <main+0x58>
 800024a:	bf00      	nop
 800024c:	08000aac 	.word	0x08000aac
 8000250:	40013800 	.word	0x40013800

08000254 <Reset_Handler>:
 8000254:	480d      	ldr	r0, [pc, #52]	; (800028c <LoopForever+0x2>)
 8000256:	4685      	mov	sp, r0
 8000258:	f3af 8000 	nop.w
 800025c:	480c      	ldr	r0, [pc, #48]	; (8000290 <LoopForever+0x6>)
 800025e:	490d      	ldr	r1, [pc, #52]	; (8000294 <LoopForever+0xa>)
 8000260:	4a0d      	ldr	r2, [pc, #52]	; (8000298 <LoopForever+0xe>)
 8000262:	2300      	movs	r3, #0
 8000264:	e002      	b.n	800026c <LoopCopyDataInit>

08000266 <CopyDataInit>:
 8000266:	58d4      	ldr	r4, [r2, r3]
 8000268:	50c4      	str	r4, [r0, r3]
 800026a:	3304      	adds	r3, #4

0800026c <LoopCopyDataInit>:
 800026c:	18c4      	adds	r4, r0, r3
 800026e:	428c      	cmp	r4, r1
 8000270:	d3f9      	bcc.n	8000266 <CopyDataInit>
 8000272:	4a0a      	ldr	r2, [pc, #40]	; (800029c <LoopForever+0x12>)
 8000274:	4c0a      	ldr	r4, [pc, #40]	; (80002a0 <LoopForever+0x16>)
 8000276:	2300      	movs	r3, #0
 8000278:	e001      	b.n	800027e <LoopFillZerobss>

0800027a <FillZerobss>:
 800027a:	6013      	str	r3, [r2, #0]
 800027c:	3204      	adds	r2, #4

0800027e <LoopFillZerobss>:
 800027e:	42a2      	cmp	r2, r4
 8000280:	d3fb      	bcc.n	800027a <FillZerobss>
 8000282:	f000 fbe3 	bl	8000a4c <__libc_init_array>
 8000286:	f7ff ffa9 	bl	80001dc <main>

0800028a <LoopForever>:
 800028a:	e7fe      	b.n	800028a <LoopForever>
 800028c:	20002800 	.word	0x20002800
 8000290:	20000000 	.word	0x20000000
 8000294:	20000000 	.word	0x20000000
 8000298:	08000aec 	.word	0x08000aec
 800029c:	20000000 	.word	0x20000000
 80002a0:	2000005c 	.word	0x2000005c

080002a4 <ADC1_2_IRQHandler>:
 80002a4:	e7fe      	b.n	80002a4 <ADC1_2_IRQHandler>
	...

080002a8 <EXTI0_IRQHandler>:
////**=====================     ISR FUNCTIONS      =============================
////**==========================================================================
////**==========================================================================

void EXTI0_IRQHandler(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
	// must clear PR By Writing one on Bit
	EXTI->PR |= (1<<EXTI0);
 80002ac:	4b05      	ldr	r3, [pc, #20]	; (80002c4 <EXTI0_IRQHandler+0x1c>)
 80002ae:	695b      	ldr	r3, [r3, #20]
 80002b0:	4a04      	ldr	r2, [pc, #16]	; (80002c4 <EXTI0_IRQHandler+0x1c>)
 80002b2:	f043 0301 	orr.w	r3, r3, #1
 80002b6:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[EXTI0]();
 80002b8:	4b03      	ldr	r3, [pc, #12]	; (80002c8 <EXTI0_IRQHandler+0x20>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4798      	blx	r3
}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40010400 	.word	0x40010400
 80002c8:	20000020 	.word	0x20000020

080002cc <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	// must clear PR By Writing one on Bit
	EXTI->PR |= (1<<EXTI1);
 80002d0:	4b05      	ldr	r3, [pc, #20]	; (80002e8 <EXTI1_IRQHandler+0x1c>)
 80002d2:	695b      	ldr	r3, [r3, #20]
 80002d4:	4a04      	ldr	r2, [pc, #16]	; (80002e8 <EXTI1_IRQHandler+0x1c>)
 80002d6:	f043 0302 	orr.w	r3, r3, #2
 80002da:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[EXTI1]();
 80002dc:	4b03      	ldr	r3, [pc, #12]	; (80002ec <EXTI1_IRQHandler+0x20>)
 80002de:	685b      	ldr	r3, [r3, #4]
 80002e0:	4798      	blx	r3

}
 80002e2:	bf00      	nop
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	40010400 	.word	0x40010400
 80002ec:	20000020 	.word	0x20000020

080002f0 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
	// must clear PR By Writing one on Bit
	EXTI->PR |= (1<<EXTI2);
 80002f4:	4b05      	ldr	r3, [pc, #20]	; (800030c <EXTI2_IRQHandler+0x1c>)
 80002f6:	695b      	ldr	r3, [r3, #20]
 80002f8:	4a04      	ldr	r2, [pc, #16]	; (800030c <EXTI2_IRQHandler+0x1c>)
 80002fa:	f043 0304 	orr.w	r3, r3, #4
 80002fe:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[EXTI2]();
 8000300:	4b03      	ldr	r3, [pc, #12]	; (8000310 <EXTI2_IRQHandler+0x20>)
 8000302:	689b      	ldr	r3, [r3, #8]
 8000304:	4798      	blx	r3
}
 8000306:	bf00      	nop
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	40010400 	.word	0x40010400
 8000310:	20000020 	.word	0x20000020

08000314 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
	// must clear PR By Writing one on Bit
	EXTI->PR |= (1<<EXTI3);
 8000318:	4b05      	ldr	r3, [pc, #20]	; (8000330 <EXTI3_IRQHandler+0x1c>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	4a04      	ldr	r2, [pc, #16]	; (8000330 <EXTI3_IRQHandler+0x1c>)
 800031e:	f043 0308 	orr.w	r3, r3, #8
 8000322:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[EXTI13]();
 8000324:	4b03      	ldr	r3, [pc, #12]	; (8000334 <EXTI3_IRQHandler+0x20>)
 8000326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000328:	4798      	blx	r3
}
 800032a:	bf00      	nop
 800032c:	bd80      	pop	{r7, pc}
 800032e:	bf00      	nop
 8000330:	40010400 	.word	0x40010400
 8000334:	20000020 	.word	0x20000020

08000338 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
	// must clear PR By Writing one on Bit
	EXTI->PR |= (1<<EXTI4);
 800033c:	4b05      	ldr	r3, [pc, #20]	; (8000354 <EXTI4_IRQHandler+0x1c>)
 800033e:	695b      	ldr	r3, [r3, #20]
 8000340:	4a04      	ldr	r2, [pc, #16]	; (8000354 <EXTI4_IRQHandler+0x1c>)
 8000342:	f043 0310 	orr.w	r3, r3, #16
 8000346:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[EXTI4]();
 8000348:	4b03      	ldr	r3, [pc, #12]	; (8000358 <EXTI4_IRQHandler+0x20>)
 800034a:	691b      	ldr	r3, [r3, #16]
 800034c:	4798      	blx	r3
}
 800034e:	bf00      	nop
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	40010400 	.word	0x40010400
 8000358:	20000020 	.word	0x20000020

0800035c <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
	// must clear PR By Writing one on Bit
	if (EXTI->PR & 1<<EXTI5){EXTI->PR |= 1<<EXTI5;GP_IRQ_CallBack[EXTI5]();}
 8000360:	4b26      	ldr	r3, [pc, #152]	; (80003fc <EXTI9_5_IRQHandler+0xa0>)
 8000362:	695b      	ldr	r3, [r3, #20]
 8000364:	f003 0320 	and.w	r3, r3, #32
 8000368:	2b00      	cmp	r3, #0
 800036a:	d008      	beq.n	800037e <EXTI9_5_IRQHandler+0x22>
 800036c:	4b23      	ldr	r3, [pc, #140]	; (80003fc <EXTI9_5_IRQHandler+0xa0>)
 800036e:	695b      	ldr	r3, [r3, #20]
 8000370:	4a22      	ldr	r2, [pc, #136]	; (80003fc <EXTI9_5_IRQHandler+0xa0>)
 8000372:	f043 0320 	orr.w	r3, r3, #32
 8000376:	6153      	str	r3, [r2, #20]
 8000378:	4b21      	ldr	r3, [pc, #132]	; (8000400 <EXTI9_5_IRQHandler+0xa4>)
 800037a:	695b      	ldr	r3, [r3, #20]
 800037c:	4798      	blx	r3
	if (EXTI->PR & 1<<EXTI6){EXTI->PR |= 1<<EXTI6;GP_IRQ_CallBack[EXTI6]();}
 800037e:	4b1f      	ldr	r3, [pc, #124]	; (80003fc <EXTI9_5_IRQHandler+0xa0>)
 8000380:	695b      	ldr	r3, [r3, #20]
 8000382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000386:	2b00      	cmp	r3, #0
 8000388:	d008      	beq.n	800039c <EXTI9_5_IRQHandler+0x40>
 800038a:	4b1c      	ldr	r3, [pc, #112]	; (80003fc <EXTI9_5_IRQHandler+0xa0>)
 800038c:	695b      	ldr	r3, [r3, #20]
 800038e:	4a1b      	ldr	r2, [pc, #108]	; (80003fc <EXTI9_5_IRQHandler+0xa0>)
 8000390:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000394:	6153      	str	r3, [r2, #20]
 8000396:	4b1a      	ldr	r3, [pc, #104]	; (8000400 <EXTI9_5_IRQHandler+0xa4>)
 8000398:	699b      	ldr	r3, [r3, #24]
 800039a:	4798      	blx	r3
	if (EXTI->PR & 1<<EXTI7){EXTI->PR |= 1<<EXTI7;GP_IRQ_CallBack[EXTI7]();}
 800039c:	4b17      	ldr	r3, [pc, #92]	; (80003fc <EXTI9_5_IRQHandler+0xa0>)
 800039e:	695b      	ldr	r3, [r3, #20]
 80003a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d008      	beq.n	80003ba <EXTI9_5_IRQHandler+0x5e>
 80003a8:	4b14      	ldr	r3, [pc, #80]	; (80003fc <EXTI9_5_IRQHandler+0xa0>)
 80003aa:	695b      	ldr	r3, [r3, #20]
 80003ac:	4a13      	ldr	r2, [pc, #76]	; (80003fc <EXTI9_5_IRQHandler+0xa0>)
 80003ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003b2:	6153      	str	r3, [r2, #20]
 80003b4:	4b12      	ldr	r3, [pc, #72]	; (8000400 <EXTI9_5_IRQHandler+0xa4>)
 80003b6:	69db      	ldr	r3, [r3, #28]
 80003b8:	4798      	blx	r3
	if (EXTI->PR & 1<<EXTI8){EXTI->PR |= 1<<EXTI8;GP_IRQ_CallBack[EXTI8]();}
 80003ba:	4b10      	ldr	r3, [pc, #64]	; (80003fc <EXTI9_5_IRQHandler+0xa0>)
 80003bc:	695b      	ldr	r3, [r3, #20]
 80003be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d008      	beq.n	80003d8 <EXTI9_5_IRQHandler+0x7c>
 80003c6:	4b0d      	ldr	r3, [pc, #52]	; (80003fc <EXTI9_5_IRQHandler+0xa0>)
 80003c8:	695b      	ldr	r3, [r3, #20]
 80003ca:	4a0c      	ldr	r2, [pc, #48]	; (80003fc <EXTI9_5_IRQHandler+0xa0>)
 80003cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003d0:	6153      	str	r3, [r2, #20]
 80003d2:	4b0b      	ldr	r3, [pc, #44]	; (8000400 <EXTI9_5_IRQHandler+0xa4>)
 80003d4:	6a1b      	ldr	r3, [r3, #32]
 80003d6:	4798      	blx	r3
	if (EXTI->PR & 1<<EXTI9){EXTI->PR |= 1<<EXTI9;GP_IRQ_CallBack[EXTI9]();}
 80003d8:	4b08      	ldr	r3, [pc, #32]	; (80003fc <EXTI9_5_IRQHandler+0xa0>)
 80003da:	695b      	ldr	r3, [r3, #20]
 80003dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d008      	beq.n	80003f6 <EXTI9_5_IRQHandler+0x9a>
 80003e4:	4b05      	ldr	r3, [pc, #20]	; (80003fc <EXTI9_5_IRQHandler+0xa0>)
 80003e6:	695b      	ldr	r3, [r3, #20]
 80003e8:	4a04      	ldr	r2, [pc, #16]	; (80003fc <EXTI9_5_IRQHandler+0xa0>)
 80003ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003ee:	6153      	str	r3, [r2, #20]
 80003f0:	4b03      	ldr	r3, [pc, #12]	; (8000400 <EXTI9_5_IRQHandler+0xa4>)
 80003f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003f4:	4798      	blx	r3
}
 80003f6:	bf00      	nop
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	40010400 	.word	0x40010400
 8000400:	20000020 	.word	0x20000020

08000404 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
	// must clear PR By Writing one on Bit
	if (EXTI->PR & 1<<EXTI10){EXTI->PR |= 1<<EXTI10;GP_IRQ_CallBack[EXTI10]();}
 8000408:	4b2d      	ldr	r3, [pc, #180]	; (80004c0 <EXTI15_10_IRQHandler+0xbc>)
 800040a:	695b      	ldr	r3, [r3, #20]
 800040c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000410:	2b00      	cmp	r3, #0
 8000412:	d008      	beq.n	8000426 <EXTI15_10_IRQHandler+0x22>
 8000414:	4b2a      	ldr	r3, [pc, #168]	; (80004c0 <EXTI15_10_IRQHandler+0xbc>)
 8000416:	695b      	ldr	r3, [r3, #20]
 8000418:	4a29      	ldr	r2, [pc, #164]	; (80004c0 <EXTI15_10_IRQHandler+0xbc>)
 800041a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800041e:	6153      	str	r3, [r2, #20]
 8000420:	4b28      	ldr	r3, [pc, #160]	; (80004c4 <EXTI15_10_IRQHandler+0xc0>)
 8000422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000424:	4798      	blx	r3
	if (EXTI->PR & 1<<EXTI11){EXTI->PR |= 1<<EXTI11;GP_IRQ_CallBack[EXTI11]();}
 8000426:	4b26      	ldr	r3, [pc, #152]	; (80004c0 <EXTI15_10_IRQHandler+0xbc>)
 8000428:	695b      	ldr	r3, [r3, #20]
 800042a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800042e:	2b00      	cmp	r3, #0
 8000430:	d008      	beq.n	8000444 <EXTI15_10_IRQHandler+0x40>
 8000432:	4b23      	ldr	r3, [pc, #140]	; (80004c0 <EXTI15_10_IRQHandler+0xbc>)
 8000434:	695b      	ldr	r3, [r3, #20]
 8000436:	4a22      	ldr	r2, [pc, #136]	; (80004c0 <EXTI15_10_IRQHandler+0xbc>)
 8000438:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800043c:	6153      	str	r3, [r2, #20]
 800043e:	4b21      	ldr	r3, [pc, #132]	; (80004c4 <EXTI15_10_IRQHandler+0xc0>)
 8000440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000442:	4798      	blx	r3
	if (EXTI->PR & 1<<EXTI12){EXTI->PR |= 1<<EXTI12;GP_IRQ_CallBack[EXTI12]();}
 8000444:	4b1e      	ldr	r3, [pc, #120]	; (80004c0 <EXTI15_10_IRQHandler+0xbc>)
 8000446:	695b      	ldr	r3, [r3, #20]
 8000448:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800044c:	2b00      	cmp	r3, #0
 800044e:	d008      	beq.n	8000462 <EXTI15_10_IRQHandler+0x5e>
 8000450:	4b1b      	ldr	r3, [pc, #108]	; (80004c0 <EXTI15_10_IRQHandler+0xbc>)
 8000452:	695b      	ldr	r3, [r3, #20]
 8000454:	4a1a      	ldr	r2, [pc, #104]	; (80004c0 <EXTI15_10_IRQHandler+0xbc>)
 8000456:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800045a:	6153      	str	r3, [r2, #20]
 800045c:	4b19      	ldr	r3, [pc, #100]	; (80004c4 <EXTI15_10_IRQHandler+0xc0>)
 800045e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000460:	4798      	blx	r3
	if (EXTI->PR & 1<<EXTI13){EXTI->PR |= 1<<EXTI13;GP_IRQ_CallBack[EXTI13]();}
 8000462:	4b17      	ldr	r3, [pc, #92]	; (80004c0 <EXTI15_10_IRQHandler+0xbc>)
 8000464:	695b      	ldr	r3, [r3, #20]
 8000466:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800046a:	2b00      	cmp	r3, #0
 800046c:	d008      	beq.n	8000480 <EXTI15_10_IRQHandler+0x7c>
 800046e:	4b14      	ldr	r3, [pc, #80]	; (80004c0 <EXTI15_10_IRQHandler+0xbc>)
 8000470:	695b      	ldr	r3, [r3, #20]
 8000472:	4a13      	ldr	r2, [pc, #76]	; (80004c0 <EXTI15_10_IRQHandler+0xbc>)
 8000474:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000478:	6153      	str	r3, [r2, #20]
 800047a:	4b12      	ldr	r3, [pc, #72]	; (80004c4 <EXTI15_10_IRQHandler+0xc0>)
 800047c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800047e:	4798      	blx	r3
	if (EXTI->PR & 1<<EXTI14){EXTI->PR |= 1<<EXTI14;GP_IRQ_CallBack[EXTI14]();}
 8000480:	4b0f      	ldr	r3, [pc, #60]	; (80004c0 <EXTI15_10_IRQHandler+0xbc>)
 8000482:	695b      	ldr	r3, [r3, #20]
 8000484:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000488:	2b00      	cmp	r3, #0
 800048a:	d008      	beq.n	800049e <EXTI15_10_IRQHandler+0x9a>
 800048c:	4b0c      	ldr	r3, [pc, #48]	; (80004c0 <EXTI15_10_IRQHandler+0xbc>)
 800048e:	695b      	ldr	r3, [r3, #20]
 8000490:	4a0b      	ldr	r2, [pc, #44]	; (80004c0 <EXTI15_10_IRQHandler+0xbc>)
 8000492:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000496:	6153      	str	r3, [r2, #20]
 8000498:	4b0a      	ldr	r3, [pc, #40]	; (80004c4 <EXTI15_10_IRQHandler+0xc0>)
 800049a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800049c:	4798      	blx	r3
	if (EXTI->PR & 1<<EXTI15){EXTI->PR |= 1<<EXTI15;GP_IRQ_CallBack[EXTI15]();}
 800049e:	4b08      	ldr	r3, [pc, #32]	; (80004c0 <EXTI15_10_IRQHandler+0xbc>)
 80004a0:	695b      	ldr	r3, [r3, #20]
 80004a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d008      	beq.n	80004bc <EXTI15_10_IRQHandler+0xb8>
 80004aa:	4b05      	ldr	r3, [pc, #20]	; (80004c0 <EXTI15_10_IRQHandler+0xbc>)
 80004ac:	695b      	ldr	r3, [r3, #20]
 80004ae:	4a04      	ldr	r2, [pc, #16]	; (80004c0 <EXTI15_10_IRQHandler+0xbc>)
 80004b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80004b4:	6153      	str	r3, [r2, #20]
 80004b6:	4b03      	ldr	r3, [pc, #12]	; (80004c4 <EXTI15_10_IRQHandler+0xc0>)
 80004b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004ba:	4798      	blx	r3

}
 80004bc:	bf00      	nop
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	40010400 	.word	0x40010400
 80004c4:	20000020 	.word	0x20000020

080004c8 <Get_CRLH_Position>:
 * 			Note							-NONE																														*
 ********************************************************************************************************************/
#include "GPIO.h"

static uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	80fb      	strh	r3, [r7, #6]
	uint16_t Loc_Pin_Number = 0 ;
 80004d2:	2300      	movs	r3, #0
 80004d4:	81fb      	strh	r3, [r7, #14]
	switch(PinNumber)
 80004d6:	88fb      	ldrh	r3, [r7, #6]
 80004d8:	2b80      	cmp	r3, #128	; 0x80
 80004da:	d049      	beq.n	8000570 <Get_CRLH_Position+0xa8>
 80004dc:	2b80      	cmp	r3, #128	; 0x80
 80004de:	dc11      	bgt.n	8000504 <Get_CRLH_Position+0x3c>
 80004e0:	2b08      	cmp	r3, #8
 80004e2:	d039      	beq.n	8000558 <Get_CRLH_Position+0x90>
 80004e4:	2b08      	cmp	r3, #8
 80004e6:	dc06      	bgt.n	80004f6 <Get_CRLH_Position+0x2e>
 80004e8:	2b02      	cmp	r3, #2
 80004ea:	d02f      	beq.n	800054c <Get_CRLH_Position+0x84>
 80004ec:	2b04      	cmp	r3, #4
 80004ee:	d030      	beq.n	8000552 <Get_CRLH_Position+0x8a>
 80004f0:	2b01      	cmp	r3, #1
 80004f2:	d028      	beq.n	8000546 <Get_CRLH_Position+0x7e>
 80004f4:	e057      	b.n	80005a6 <Get_CRLH_Position+0xde>
 80004f6:	2b20      	cmp	r3, #32
 80004f8:	d034      	beq.n	8000564 <Get_CRLH_Position+0x9c>
 80004fa:	2b40      	cmp	r3, #64	; 0x40
 80004fc:	d035      	beq.n	800056a <Get_CRLH_Position+0xa2>
 80004fe:	2b10      	cmp	r3, #16
 8000500:	d02d      	beq.n	800055e <Get_CRLH_Position+0x96>
 8000502:	e050      	b.n	80005a6 <Get_CRLH_Position+0xde>
 8000504:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000508:	d03e      	beq.n	8000588 <Get_CRLH_Position+0xc0>
 800050a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800050e:	dc09      	bgt.n	8000524 <Get_CRLH_Position+0x5c>
 8000510:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000514:	d032      	beq.n	800057c <Get_CRLH_Position+0xb4>
 8000516:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800051a:	d032      	beq.n	8000582 <Get_CRLH_Position+0xba>
 800051c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000520:	d029      	beq.n	8000576 <Get_CRLH_Position+0xae>
 8000522:	e040      	b.n	80005a6 <Get_CRLH_Position+0xde>
 8000524:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000528:	d034      	beq.n	8000594 <Get_CRLH_Position+0xcc>
 800052a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800052e:	dc03      	bgt.n	8000538 <Get_CRLH_Position+0x70>
 8000530:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000534:	d02b      	beq.n	800058e <Get_CRLH_Position+0xc6>
 8000536:	e036      	b.n	80005a6 <Get_CRLH_Position+0xde>
 8000538:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800053c:	d02d      	beq.n	800059a <Get_CRLH_Position+0xd2>
 800053e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000542:	d02d      	beq.n	80005a0 <Get_CRLH_Position+0xd8>
 8000544:	e02f      	b.n	80005a6 <Get_CRLH_Position+0xde>
	{
	case GPIO_PIN_0 :
		Loc_Pin_Number = 0 ;
 8000546:	2300      	movs	r3, #0
 8000548:	81fb      	strh	r3, [r7, #14]
		break ;
 800054a:	e02c      	b.n	80005a6 <Get_CRLH_Position+0xde>
	case GPIO_PIN_1 :
		Loc_Pin_Number = 4 ;
 800054c:	2304      	movs	r3, #4
 800054e:	81fb      	strh	r3, [r7, #14]
		break ;
 8000550:	e029      	b.n	80005a6 <Get_CRLH_Position+0xde>
	case GPIO_PIN_2 :
		Loc_Pin_Number = 8 ;
 8000552:	2308      	movs	r3, #8
 8000554:	81fb      	strh	r3, [r7, #14]
		break ;
 8000556:	e026      	b.n	80005a6 <Get_CRLH_Position+0xde>
	case GPIO_PIN_3 :
		Loc_Pin_Number = 12 ;
 8000558:	230c      	movs	r3, #12
 800055a:	81fb      	strh	r3, [r7, #14]
		break ;
 800055c:	e023      	b.n	80005a6 <Get_CRLH_Position+0xde>
	case GPIO_PIN_4 :
		Loc_Pin_Number = 16 ;
 800055e:	2310      	movs	r3, #16
 8000560:	81fb      	strh	r3, [r7, #14]
		break ;
 8000562:	e020      	b.n	80005a6 <Get_CRLH_Position+0xde>
	case GPIO_PIN_5 :
		Loc_Pin_Number = 20 ;
 8000564:	2314      	movs	r3, #20
 8000566:	81fb      	strh	r3, [r7, #14]
		break ;
 8000568:	e01d      	b.n	80005a6 <Get_CRLH_Position+0xde>
	case GPIO_PIN_6 :
		Loc_Pin_Number = 24 ;
 800056a:	2318      	movs	r3, #24
 800056c:	81fb      	strh	r3, [r7, #14]
		break ;
 800056e:	e01a      	b.n	80005a6 <Get_CRLH_Position+0xde>
	case GPIO_PIN_7 :
		Loc_Pin_Number = 28 ;
 8000570:	231c      	movs	r3, #28
 8000572:	81fb      	strh	r3, [r7, #14]
		break ;
 8000574:	e017      	b.n	80005a6 <Get_CRLH_Position+0xde>
	case GPIO_PIN_8 :
		Loc_Pin_Number = 0 ;
 8000576:	2300      	movs	r3, #0
 8000578:	81fb      	strh	r3, [r7, #14]
		break ;
 800057a:	e014      	b.n	80005a6 <Get_CRLH_Position+0xde>
	case GPIO_PIN_9 :
		Loc_Pin_Number = 4 ;
 800057c:	2304      	movs	r3, #4
 800057e:	81fb      	strh	r3, [r7, #14]
		break ;
 8000580:	e011      	b.n	80005a6 <Get_CRLH_Position+0xde>
	case GPIO_PIN_10 :
		Loc_Pin_Number = 8 ;
 8000582:	2308      	movs	r3, #8
 8000584:	81fb      	strh	r3, [r7, #14]
		break ;
 8000586:	e00e      	b.n	80005a6 <Get_CRLH_Position+0xde>
	case GPIO_PIN_11 :
		Loc_Pin_Number = 12 ;
 8000588:	230c      	movs	r3, #12
 800058a:	81fb      	strh	r3, [r7, #14]
		break ;
 800058c:	e00b      	b.n	80005a6 <Get_CRLH_Position+0xde>
	case GPIO_PIN_12 :
		Loc_Pin_Number = 16 ;
 800058e:	2310      	movs	r3, #16
 8000590:	81fb      	strh	r3, [r7, #14]
		break ;
 8000592:	e008      	b.n	80005a6 <Get_CRLH_Position+0xde>
	case GPIO_PIN_13 :
		Loc_Pin_Number = 20 ;
 8000594:	2314      	movs	r3, #20
 8000596:	81fb      	strh	r3, [r7, #14]
		break ;
 8000598:	e005      	b.n	80005a6 <Get_CRLH_Position+0xde>
	case GPIO_PIN_14 :
		Loc_Pin_Number = 24 ;
 800059a:	2318      	movs	r3, #24
 800059c:	81fb      	strh	r3, [r7, #14]
		break ;
 800059e:	e002      	b.n	80005a6 <Get_CRLH_Position+0xde>
	case GPIO_PIN_15 :
		Loc_Pin_Number = 28 ;
 80005a0:	231c      	movs	r3, #28
 80005a2:	81fb      	strh	r3, [r7, #14]
		break ;
 80005a4:	bf00      	nop
	}
	return Loc_Pin_Number ;
 80005a6:	89fb      	ldrh	r3, [r7, #14]
 80005a8:	b2db      	uxtb	r3, r3
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	3714      	adds	r7, #20
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bc80      	pop	{r7}
 80005b2:	4770      	bx	lr

080005b4 <MCAL_GPIO_INIT>:
 * 												-contain the configratoiin of GPIO PIN
 * 			@retval						-NONE																														*
 * 			Note							--stm32f103c6 has GPIO A : E BUT LQFP48 has A ,B 	,part of c , d pins																														*
 ********************************************************************************************************************/
void MCAL_GPIO_INIT(GPIO_Typedef * GPIOX,GPIO_PinCongif_t* pinconfig)
{
 80005b4:	b590      	push	{r4, r7, lr}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	6039      	str	r1, [r7, #0]
	volatile uint32_t* Loc_Config_Regester = NULL ;
 80005be:	2300      	movs	r3, #0
 80005c0:	60bb      	str	r3, [r7, #8]
	uint8_t	 Loc_Pin_Congif	=	0 ;
 80005c2:	2300      	movs	r3, #0
 80005c4:	73fb      	strb	r3, [r7, #15]
	Loc_Config_Regester = (pinconfig->GPIO_PinNumber<GPIO_PIN_8)? 	&GPIOX->CRL	:	&GPIOX->CRH 	 ;
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	881b      	ldrh	r3, [r3, #0]
 80005ca:	2bff      	cmp	r3, #255	; 0xff
 80005cc:	d801      	bhi.n	80005d2 <MCAL_GPIO_INIT+0x1e>
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	e001      	b.n	80005d6 <MCAL_GPIO_INIT+0x22>
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	3304      	adds	r3, #4
 80005d6:	60bb      	str	r3, [r7, #8]
	*(Loc_Config_Regester) &=~(0x0f<<(Get_CRLH_Position(pinconfig->GPIO_PinNumber)));
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	881b      	ldrh	r3, [r3, #0]
 80005dc:	4618      	mov	r0, r3
 80005de:	f7ff ff73 	bl	80004c8 <Get_CRLH_Position>
 80005e2:	4603      	mov	r3, r0
 80005e4:	461a      	mov	r2, r3
 80005e6:	230f      	movs	r3, #15
 80005e8:	4093      	lsls	r3, r2
 80005ea:	43da      	mvns	r2, r3
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	401a      	ands	r2, r3
 80005f2:	68bb      	ldr	r3, [r7, #8]
 80005f4:	601a      	str	r2, [r3, #0]
	if (pinconfig->GPIO_MODE==GPIO_Mode_OUTPUT_OD || pinconfig->GPIO_MODE==GPIO_Mode_OUTPUT_PP||\
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	789b      	ldrb	r3, [r3, #2]
 80005fa:	2b05      	cmp	r3, #5
 80005fc:	d00b      	beq.n	8000616 <MCAL_GPIO_INIT+0x62>
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	789b      	ldrb	r3, [r3, #2]
 8000602:	2b04      	cmp	r3, #4
 8000604:	d007      	beq.n	8000616 <MCAL_GPIO_INIT+0x62>
			pinconfig->GPIO_MODE==GPIO_Mode_OUTPUT_AF_OD ||pinconfig->GPIO_MODE==GPIO_Mode_OUTPUT_AF_PP)
 8000606:	683b      	ldr	r3, [r7, #0]
 8000608:	789b      	ldrb	r3, [r3, #2]
	if (pinconfig->GPIO_MODE==GPIO_Mode_OUTPUT_OD || pinconfig->GPIO_MODE==GPIO_Mode_OUTPUT_PP||\
 800060a:	2b07      	cmp	r3, #7
 800060c:	d003      	beq.n	8000616 <MCAL_GPIO_INIT+0x62>
			pinconfig->GPIO_MODE==GPIO_Mode_OUTPUT_AF_OD ||pinconfig->GPIO_MODE==GPIO_Mode_OUTPUT_AF_PP)
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	789b      	ldrb	r3, [r3, #2]
 8000612:	2b06      	cmp	r3, #6
 8000614:	d10e      	bne.n	8000634 <MCAL_GPIO_INIT+0x80>
	{
		Loc_Pin_Congif = ((((pinconfig->GPIO_MODE-4)<<2) | (pinconfig->GPIO_OutPut_Speed))&0x0f) ;
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	789b      	ldrb	r3, [r3, #2]
 800061a:	3b04      	subs	r3, #4
 800061c:	009b      	lsls	r3, r3, #2
 800061e:	b25a      	sxtb	r2, r3
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	78db      	ldrb	r3, [r3, #3]
 8000624:	b25b      	sxtb	r3, r3
 8000626:	4313      	orrs	r3, r2
 8000628:	b25b      	sxtb	r3, r3
 800062a:	b2db      	uxtb	r3, r3
 800062c:	f003 030f 	and.w	r3, r3, #15
 8000630:	73fb      	strb	r3, [r7, #15]
 8000632:	e031      	b.n	8000698 <MCAL_GPIO_INIT+0xe4>
	}
	else
	{
		if((pinconfig->GPIO_MODE==GPIO_Mode_INPUT_FLO)||(pinconfig->GPIO_MODE==GPIO_Mode_Analog))
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	789b      	ldrb	r3, [r3, #2]
 8000638:	2b01      	cmp	r3, #1
 800063a:	d003      	beq.n	8000644 <MCAL_GPIO_INIT+0x90>
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	789b      	ldrb	r3, [r3, #2]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d107      	bne.n	8000654 <MCAL_GPIO_INIT+0xa0>
		{
			Loc_Pin_Congif = ((((pinconfig->GPIO_MODE)<<2) |0x0)&0x0f) ;
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	789b      	ldrb	r3, [r3, #2]
 8000648:	009b      	lsls	r3, r3, #2
 800064a:	b2db      	uxtb	r3, r3
 800064c:	f003 030f 	and.w	r3, r3, #15
 8000650:	73fb      	strb	r3, [r7, #15]
 8000652:	e021      	b.n	8000698 <MCAL_GPIO_INIT+0xe4>
		}
		else if (pinconfig->GPIO_MODE==GPIO_Mode_AF_INPUT)
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	789b      	ldrb	r3, [r3, #2]
 8000658:	2b08      	cmp	r3, #8
 800065a:	d102      	bne.n	8000662 <MCAL_GPIO_INIT+0xae>
		{
			Loc_Pin_Congif = (((GPIO_Mode_INPUT_FLO<<2) |0x0)&0x0f) ;
 800065c:	2304      	movs	r3, #4
 800065e:	73fb      	strb	r3, [r7, #15]
 8000660:	e01a      	b.n	8000698 <MCAL_GPIO_INIT+0xe4>
		}
		else
		{
			Loc_Pin_Congif =(( (pinconfig->GPIO_MODE<< 2) |0x0)&0x0F) ;
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	789b      	ldrb	r3, [r3, #2]
 8000666:	009b      	lsls	r3, r3, #2
 8000668:	b2db      	uxtb	r3, r3
 800066a:	f003 030f 	and.w	r3, r3, #15
 800066e:	73fb      	strb	r3, [r7, #15]
			if (pinconfig->GPIO_MODE == GPIO_Mode_INPUT_PU)
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	789b      	ldrb	r3, [r3, #2]
 8000674:	2b02      	cmp	r3, #2
 8000676:	d107      	bne.n	8000688 <MCAL_GPIO_INIT+0xd4>
			{
				GPIOX->ODR |= pinconfig->GPIO_PinNumber ;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	68db      	ldr	r3, [r3, #12]
 800067c:	683a      	ldr	r2, [r7, #0]
 800067e:	8812      	ldrh	r2, [r2, #0]
 8000680:	431a      	orrs	r2, r3
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	e007      	b.n	8000698 <MCAL_GPIO_INIT+0xe4>
			}
			else
			{
				GPIOX->ODR &=~ (pinconfig->GPIO_PinNumber) ;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	68db      	ldr	r3, [r3, #12]
 800068c:	683a      	ldr	r2, [r7, #0]
 800068e:	8812      	ldrh	r2, [r2, #0]
 8000690:	43d2      	mvns	r2, r2
 8000692:	401a      	ands	r2, r3
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	60da      	str	r2, [r3, #12]
			}
		}
	}
	(*Loc_Config_Regester) |= ((Loc_Pin_Congif)<<Get_CRLH_Position(pinconfig->GPIO_PinNumber)) ;
 8000698:	7bfc      	ldrb	r4, [r7, #15]
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	881b      	ldrh	r3, [r3, #0]
 800069e:	4618      	mov	r0, r3
 80006a0:	f7ff ff12 	bl	80004c8 <Get_CRLH_Position>
 80006a4:	4603      	mov	r3, r0
 80006a6:	fa04 f203 	lsl.w	r2, r4, r3
 80006aa:	68bb      	ldr	r3, [r7, #8]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	431a      	orrs	r2, r3
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	601a      	str	r2, [r3, #0]

}
 80006b4:	bf00      	nop
 80006b6:	3714      	adds	r7, #20
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd90      	pop	{r4, r7, pc}

080006bc <MCAL_RCC_GetSYSCLK>:
// 1110: SYSCLK divided by 256
// 1111: SYSCLK divided by 512
const uint8_t AHBprescTablep[16U] ={0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};

uint32_t MCAL_RCC_GetSYSCLK()
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
	switch((RCC->CFGR>>2)&0b11)
 80006c0:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <MCAL_RCC_GetSYSCLK+0x30>)
 80006c2:	685b      	ldr	r3, [r3, #4]
 80006c4:	089b      	lsrs	r3, r3, #2
 80006c6:	f003 0303 	and.w	r3, r3, #3
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	d006      	beq.n	80006dc <MCAL_RCC_GetSYSCLK+0x20>
 80006ce:	2b01      	cmp	r3, #1
 80006d0:	d302      	bcc.n	80006d8 <MCAL_RCC_GetSYSCLK+0x1c>
 80006d2:	2b02      	cmp	r3, #2
 80006d4:	d004      	beq.n	80006e0 <MCAL_RCC_GetSYSCLK+0x24>
 80006d6:	e005      	b.n	80006e4 <MCAL_RCC_GetSYSCLK+0x28>
	{
	case 0 :
		return HSI_CLK ;
 80006d8:	4b05      	ldr	r3, [pc, #20]	; (80006f0 <MCAL_RCC_GetSYSCLK+0x34>)
 80006da:	e003      	b.n	80006e4 <MCAL_RCC_GetSYSCLK+0x28>
		break ;
	case 1 :
		return HSE_CLK ;
 80006dc:	4b05      	ldr	r3, [pc, #20]	; (80006f4 <MCAL_RCC_GetSYSCLK+0x38>)
 80006de:	e001      	b.n	80006e4 <MCAL_RCC_GetSYSCLK+0x28>
		break ;
	case 2 :
		return 16000000 ;
 80006e0:	4b04      	ldr	r3, [pc, #16]	; (80006f4 <MCAL_RCC_GetSYSCLK+0x38>)
 80006e2:	e7ff      	b.n	80006e4 <MCAL_RCC_GetSYSCLK+0x28>
		break ;
	}
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bc80      	pop	{r7}
 80006ea:	4770      	bx	lr
 80006ec:	40021000 	.word	0x40021000
 80006f0:	007a1200 	.word	0x007a1200
 80006f4:	00f42400 	.word	0x00f42400

080006f8 <MCAL_RCC_GetHCLK>:
uint32_t MCAL_RCC_GetHCLK()
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
	/* Get SYSCLK source and Compute HCLK frequency ---------------------------*/
	return (MCAL_RCC_GetSYSCLK() >>AHBprescTablep[(RCC->CFGR>>4)&0xF]) ;	//the first shift is Dividing
 80006fc:	f7ff ffde 	bl	80006bc <MCAL_RCC_GetSYSCLK>
 8000700:	4601      	mov	r1, r0
 8000702:	4b05      	ldr	r3, [pc, #20]	; (8000718 <MCAL_RCC_GetHCLK+0x20>)
 8000704:	685b      	ldr	r3, [r3, #4]
 8000706:	091b      	lsrs	r3, r3, #4
 8000708:	f003 030f 	and.w	r3, r3, #15
 800070c:	4a03      	ldr	r2, [pc, #12]	; (800071c <MCAL_RCC_GetHCLK+0x24>)
 800070e:	5cd3      	ldrb	r3, [r2, r3]
 8000710:	fa21 f303 	lsr.w	r3, r1, r3

}
 8000714:	4618      	mov	r0, r3
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40021000 	.word	0x40021000
 800071c:	08000ad4 	.word	0x08000ad4

08000720 <MCAL_RCC_GetPCLK1>:
uint32_t MCAL_RCC_GetPCLK1()
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (MCAL_RCC_GetHCLK() >>APBprescTablep[(RCC->CFGR>>8)&0b111]) ;	//the first shift is Dividing
 8000724:	f7ff ffe8 	bl	80006f8 <MCAL_RCC_GetHCLK>
 8000728:	4601      	mov	r1, r0
 800072a:	4b05      	ldr	r3, [pc, #20]	; (8000740 <MCAL_RCC_GetPCLK1+0x20>)
 800072c:	685b      	ldr	r3, [r3, #4]
 800072e:	0a1b      	lsrs	r3, r3, #8
 8000730:	f003 0307 	and.w	r3, r3, #7
 8000734:	4a03      	ldr	r2, [pc, #12]	; (8000744 <MCAL_RCC_GetPCLK1+0x24>)
 8000736:	5cd3      	ldrb	r3, [r2, r3]
 8000738:	fa21 f303 	lsr.w	r3, r1, r3
}
 800073c:	4618      	mov	r0, r3
 800073e:	bd80      	pop	{r7, pc}
 8000740:	40021000 	.word	0x40021000
 8000744:	08000acc 	.word	0x08000acc

08000748 <MCAL_RCC_GetPCLK2>:
uint32_t MCAL_RCC_GetPCLK2()
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
	return (MCAL_RCC_GetHCLK() >>APBprescTablep[(RCC->CFGR>>11)&0b111]) ;		//the first shift is Dividing
 800074c:	f7ff ffd4 	bl	80006f8 <MCAL_RCC_GetHCLK>
 8000750:	4601      	mov	r1, r0
 8000752:	4b05      	ldr	r3, [pc, #20]	; (8000768 <MCAL_RCC_GetPCLK2+0x20>)
 8000754:	685b      	ldr	r3, [r3, #4]
 8000756:	0adb      	lsrs	r3, r3, #11
 8000758:	f003 0307 	and.w	r3, r3, #7
 800075c:	4a03      	ldr	r2, [pc, #12]	; (800076c <MCAL_RCC_GetPCLK2+0x24>)
 800075e:	5cd3      	ldrb	r3, [r2, r3]
 8000760:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000764:	4618      	mov	r0, r3
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40021000 	.word	0x40021000
 800076c:	08000acc 	.word	0x08000acc

08000770 <MCAL_USART_Init>:
 *	param[in]          -USART_Config :all the uart configuration
 * 	@retval           -none
 * 	Note              -support for now ASynch mode and clock 8 HZ
 ********************************************************************************************************************/
void MCAL_USART_Init(USART_Typedef* USARTX , USART_Conig_t* USART_Config)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
 8000778:	6039      	str	r1, [r7, #0]
	uint32_t PCLK , BRR ;
	Global_Usart_ConFig = USART_Config ;
 800077a:	4a48      	ldr	r2, [pc, #288]	; (800089c <MCAL_USART_Init+0x12c>)
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	6013      	str	r3, [r2, #0]

	//enable the clock for given USART Peripheral
	if (USARTX == USART1)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	4a47      	ldr	r2, [pc, #284]	; (80008a0 <MCAL_USART_Init+0x130>)
 8000784:	4293      	cmp	r3, r2
 8000786:	d106      	bne.n	8000796 <MCAL_USART_Init+0x26>
	{
		RCC_USART1_CLK_EN();
 8000788:	4b46      	ldr	r3, [pc, #280]	; (80008a4 <MCAL_USART_Init+0x134>)
 800078a:	699b      	ldr	r3, [r3, #24]
 800078c:	4a45      	ldr	r2, [pc, #276]	; (80008a4 <MCAL_USART_Init+0x134>)
 800078e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000792:	6193      	str	r3, [r2, #24]
 8000794:	e014      	b.n	80007c0 <MCAL_USART_Init+0x50>
	}
	else if (USARTX == USART2)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	4a43      	ldr	r2, [pc, #268]	; (80008a8 <MCAL_USART_Init+0x138>)
 800079a:	4293      	cmp	r3, r2
 800079c:	d106      	bne.n	80007ac <MCAL_USART_Init+0x3c>
	{
		RCC_USART2_CLK_EN();
 800079e:	4b41      	ldr	r3, [pc, #260]	; (80008a4 <MCAL_USART_Init+0x134>)
 80007a0:	69db      	ldr	r3, [r3, #28]
 80007a2:	4a40      	ldr	r2, [pc, #256]	; (80008a4 <MCAL_USART_Init+0x134>)
 80007a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007a8:	61d3      	str	r3, [r2, #28]
 80007aa:	e009      	b.n	80007c0 <MCAL_USART_Init+0x50>
	}
	else if (USARTX == USART3)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	4a3f      	ldr	r2, [pc, #252]	; (80008ac <MCAL_USART_Init+0x13c>)
 80007b0:	4293      	cmp	r3, r2
 80007b2:	d105      	bne.n	80007c0 <MCAL_USART_Init+0x50>
	{
		RCC_USART3_CLK_EN();
 80007b4:	4b3b      	ldr	r3, [pc, #236]	; (80008a4 <MCAL_USART_Init+0x134>)
 80007b6:	69db      	ldr	r3, [r3, #28]
 80007b8:	4a3a      	ldr	r2, [pc, #232]	; (80008a4 <MCAL_USART_Init+0x134>)
 80007ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007be:	61d3      	str	r3, [r2, #28]
	}

	USARTX->CR1 |= (1<<13) ;							//Enable USART Module	USART_CR1  Bit 13 UE: USART enable
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	68db      	ldr	r3, [r3, #12]
 80007c4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	60da      	str	r2, [r3, #12]
	USARTX->CR1 |= USART_Config->USART_MODE ;			//Enable USART Tx and Rx engines according to the USART_Mode configuration item
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	68db      	ldr	r3, [r3, #12]
 80007d0:	683a      	ldr	r2, [r7, #0]
 80007d2:	7812      	ldrb	r2, [r2, #0]
 80007d4:	431a      	orrs	r2, r3
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	60da      	str	r2, [r3, #12]
	//	USART_CR1 Bit 3 TE: Transmitter enable & Bit 2 RE: Receiver enable

	USARTX->CR1 |= USART_Config->PayLoad_Length ;		// enable Payload width 	USARTx->CR1  Bit 12 M: Word length
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	68db      	ldr	r3, [r3, #12]
 80007de:	683a      	ldr	r2, [r7, #0]
 80007e0:	7a12      	ldrb	r2, [r2, #8]
 80007e2:	431a      	orrs	r2, r3
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	60da      	str	r2, [r3, #12]

	USARTX->CR1 |= USART_Config->Parity ;				//Configuration of parity control bit fields
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	68db      	ldr	r3, [r3, #12]
 80007ec:	683a      	ldr	r2, [r7, #0]
 80007ee:	7a52      	ldrb	r2, [r2, #9]
 80007f0:	431a      	orrs	r2, r3
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	60da      	str	r2, [r3, #12]
	// USARTx->CR1 	Bit 10 PCE: Parity control enable     Bit 9 PS: Parity selection

	USARTX->CR2 |= USART_Config->StopBits ;				//configure stop bits	USART_CR2  Bits 13:12 STOP: STOP bits
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	691b      	ldr	r3, [r3, #16]
 80007fa:	683a      	ldr	r2, [r7, #0]
 80007fc:	7a92      	ldrb	r2, [r2, #10]
 80007fe:	431a      	orrs	r2, r3
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	611a      	str	r2, [r3, #16]
	USARTX->CR3 |= USART_Config->HWFlowCtl ;			//USART hardware flow control	USART_CR3  Bit 9 CTSE: CTS enable   Bit 8 RTSE: RTS enable
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	695b      	ldr	r3, [r3, #20]
 8000808:	683a      	ldr	r2, [r7, #0]
 800080a:	7ad2      	ldrb	r2, [r2, #11]
 800080c:	431a      	orrs	r2, r3
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	615a      	str	r2, [r3, #20]

	//Configure baud rate
	//PCLK2 For USART1
	//PCLK1 for USART2 ,3
	if(USARTX == USART1)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	4a22      	ldr	r2, [pc, #136]	; (80008a0 <MCAL_USART_Init+0x130>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d103      	bne.n	8000822 <MCAL_USART_Init+0xb2>
	{
		PCLK = MCAL_RCC_GetPCLK2();
 800081a:	f7ff ff95 	bl	8000748 <MCAL_RCC_GetPCLK2>
 800081e:	60f8      	str	r0, [r7, #12]
 8000820:	e002      	b.n	8000828 <MCAL_USART_Init+0xb8>
	}
	else
	{
		PCLK = MCAL_RCC_GetPCLK1();
 8000822:	f7ff ff7d 	bl	8000720 <MCAL_RCC_GetPCLK1>
 8000826:	60f8      	str	r0, [r7, #12]
	}
	BRR = USART_BRR_Register(PCLK,USART_Config->BaudRate);
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	685b      	ldr	r3, [r3, #4]
 800082c:	011b      	lsls	r3, r3, #4
 800082e:	68fa      	ldr	r2, [r7, #12]
 8000830:	fbb2 f3f3 	udiv	r3, r2, r3
 8000834:	011b      	lsls	r3, r3, #4
 8000836:	60bb      	str	r3, [r7, #8]
	USARTX->BRR = BRR ;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	68ba      	ldr	r2, [r7, #8]
 800083c:	609a      	str	r2, [r3, #8]

	if (USART_Config->IRQ_Enable != USART_IRQ_Enable_NONE)
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	7b1b      	ldrb	r3, [r3, #12]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d026      	beq.n	8000894 <MCAL_USART_Init+0x124>
	{
		USARTX->CR1 |= USART_Config->IRQ_Enable ;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	68db      	ldr	r3, [r3, #12]
 800084a:	683a      	ldr	r2, [r7, #0]
 800084c:	7b12      	ldrb	r2, [r2, #12]
 800084e:	431a      	orrs	r2, r3
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	60da      	str	r2, [r3, #12]
		//enable NVIC for USART IRQ
		if (USARTX == USART1)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	4a12      	ldr	r2, [pc, #72]	; (80008a0 <MCAL_USART_Init+0x130>)
 8000858:	4293      	cmp	r3, r2
 800085a:	d106      	bne.n	800086a <MCAL_USART_Init+0xfa>
		{
			NVIC_IRQ37_USART1_Enable ;
 800085c:	4b14      	ldr	r3, [pc, #80]	; (80008b0 <MCAL_USART_Init+0x140>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a13      	ldr	r2, [pc, #76]	; (80008b0 <MCAL_USART_Init+0x140>)
 8000862:	f043 0320 	orr.w	r3, r3, #32
 8000866:	6013      	str	r3, [r2, #0]
		else if (USARTX == USART3)
		{
			NVIC_IRQ39_USART3_Enable ;
		}
	}
}
 8000868:	e014      	b.n	8000894 <MCAL_USART_Init+0x124>
		else if (USARTX == USART2)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	4a0e      	ldr	r2, [pc, #56]	; (80008a8 <MCAL_USART_Init+0x138>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d106      	bne.n	8000880 <MCAL_USART_Init+0x110>
			NVIC_IRQ38_USART2_Enable ;
 8000872:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <MCAL_USART_Init+0x140>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4a0e      	ldr	r2, [pc, #56]	; (80008b0 <MCAL_USART_Init+0x140>)
 8000878:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800087c:	6013      	str	r3, [r2, #0]
}
 800087e:	e009      	b.n	8000894 <MCAL_USART_Init+0x124>
		else if (USARTX == USART3)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	4a0a      	ldr	r2, [pc, #40]	; (80008ac <MCAL_USART_Init+0x13c>)
 8000884:	4293      	cmp	r3, r2
 8000886:	d105      	bne.n	8000894 <MCAL_USART_Init+0x124>
			NVIC_IRQ39_USART3_Enable ;
 8000888:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <MCAL_USART_Init+0x140>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a08      	ldr	r2, [pc, #32]	; (80008b0 <MCAL_USART_Init+0x140>)
 800088e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000892:	6013      	str	r3, [r2, #0]
}
 8000894:	bf00      	nop
 8000896:	3710      	adds	r7, #16
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	2000001c 	.word	0x2000001c
 80008a0:	40013800 	.word	0x40013800
 80008a4:	40021000 	.word	0x40021000
 80008a8:	40004400 	.word	0x40004400
 80008ac:	40004800 	.word	0x40004800
 80008b0:	e000e104 	.word	0xe000e104

080008b4 <MCAL_USART_SendData>:
 *							because it is replaced by the parity.
 *  						When receiving with the parity enabled, the value read in the MSB bit is the received parity
 *
 ********************************************************************************************************************/
void MCAL_USART_SendData(USART_Typedef* USARTX , uint16_t *PtxBuffer ,Polling_Mechanism_t PollingEn )
{
 80008b4:	b480      	push	{r7}
 80008b6:	b085      	sub	sp, #20
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	60f8      	str	r0, [r7, #12]
 80008bc:	60b9      	str	r1, [r7, #8]
 80008be:	4613      	mov	r3, r2
 80008c0:	71fb      	strb	r3, [r7, #7]
	//wait until TXE is set
	if(PollingEn==Enable)
 80008c2:	79fb      	ldrb	r3, [r7, #7]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d106      	bne.n	80008d6 <MCAL_USART_SendData+0x22>
		while(!(USARTX->SR &(1<<7)));
 80008c8:	bf00      	nop
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d0f9      	beq.n	80008ca <MCAL_USART_SendData+0x16>
	{
		USARTX->DR = (*PtxBuffer&(uint16_t)0x01FF);
	}
	else
	{
		USARTX->DR = (*PtxBuffer&(uint8_t)0xFF);
 80008d6:	68bb      	ldr	r3, [r7, #8]
 80008d8:	881b      	ldrh	r3, [r3, #0]
 80008da:	b2da      	uxtb	r2, r3
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	605a      	str	r2, [r3, #4]
	}

}
 80008e0:	bf00      	nop
 80008e2:	3714      	adds	r7, #20
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bc80      	pop	{r7}
 80008e8:	4770      	bx	lr
	...

080008ec <MCAL_USART_Send_String>:
void MCAL_USART_Send_String(USART_Typedef* USARTX , uint8_t *PtxBuffer ,Polling_Mechanism_t PollingEn)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b086      	sub	sp, #24
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	60f8      	str	r0, [r7, #12]
 80008f4:	60b9      	str	r1, [r7, #8]
 80008f6:	4613      	mov	r3, r2
 80008f8:	71fb      	strb	r3, [r7, #7]
	uint8_t Loc_Count = 0 ;
 80008fa:	2300      	movs	r3, #0
 80008fc:	75fb      	strb	r3, [r7, #23]
	//wait until TXE is set
	if(PollingEn==Enable)
 80008fe:	79fb      	ldrb	r3, [r7, #7]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d112      	bne.n	800092a <MCAL_USART_Send_String+0x3e>
		while(!(USARTX->SR &(1<<7)));
 8000904:	bf00      	nop
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800090e:	2b00      	cmp	r3, #0
 8000910:	d0f9      	beq.n	8000906 <MCAL_USART_Send_String+0x1a>
	while(PtxBuffer[Loc_Count] != 0 )
 8000912:	e00a      	b.n	800092a <MCAL_USART_Send_String+0x3e>
	{
		MCAL_USART_SendData(USART1, &PtxBuffer[Loc_Count], Enable);
 8000914:	7dfb      	ldrb	r3, [r7, #23]
 8000916:	68ba      	ldr	r2, [r7, #8]
 8000918:	4413      	add	r3, r2
 800091a:	2200      	movs	r2, #0
 800091c:	4619      	mov	r1, r3
 800091e:	4808      	ldr	r0, [pc, #32]	; (8000940 <MCAL_USART_Send_String+0x54>)
 8000920:	f7ff ffc8 	bl	80008b4 <MCAL_USART_SendData>
		Loc_Count++;
 8000924:	7dfb      	ldrb	r3, [r7, #23]
 8000926:	3301      	adds	r3, #1
 8000928:	75fb      	strb	r3, [r7, #23]
	while(PtxBuffer[Loc_Count] != 0 )
 800092a:	7dfb      	ldrb	r3, [r7, #23]
 800092c:	68ba      	ldr	r2, [r7, #8]
 800092e:	4413      	add	r3, r2
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d1ee      	bne.n	8000914 <MCAL_USART_Send_String+0x28>
	}
}
 8000936:	bf00      	nop
 8000938:	3718      	adds	r7, #24
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40013800 	.word	0x40013800

08000944 <MCAL_USART_GPIO_Set_Pins>:
 *		param[in]         -USARTX :where x can be 1,2,3 depending on device used
 * 		@retval           -none
 * 		Note              -should enable the corresponding ALT &GPIO in RCC CLOCK AND called after MCAL_UART_INIT()																													*
 ********************************************************************************************************************/
void MCAL_USART_GPIO_Set_Pins(USART_Typedef* USARTX )
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	GPIO_PinCongif_t pincfg;
	if(USARTX == USART1)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	4a2b      	ldr	r2, [pc, #172]	; (80009fc <MCAL_USART_GPIO_Set_Pins+0xb8>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d118      	bne.n	8000986 <MCAL_USART_GPIO_Set_Pins+0x42>
		//PA10 RX
		//PA11 CTS
		//PA12 RTS

		//PA9 TX
		pincfg.GPIO_PinNumber = GPIO_PIN_9 ;
 8000954:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000958:	81bb      	strh	r3, [r7, #12]
		pincfg.GPIO_MODE = GPIO_Mode_OUTPUT_AF_PP;
 800095a:	2306      	movs	r3, #6
 800095c:	73bb      	strb	r3, [r7, #14]
		pincfg.GPIO_OutPut_Speed = GPIO_SPEED_10M;
 800095e:	2301      	movs	r3, #1
 8000960:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_INIT(GPIOA, &pincfg) ;
 8000962:	f107 030c 	add.w	r3, r7, #12
 8000966:	4619      	mov	r1, r3
 8000968:	4825      	ldr	r0, [pc, #148]	; (8000a00 <MCAL_USART_GPIO_Set_Pins+0xbc>)
 800096a:	f7ff fe23 	bl	80005b4 <MCAL_GPIO_INIT>

		//PA10 RX
		pincfg.GPIO_PinNumber = GPIO_PIN_10 ;
 800096e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000972:	81bb      	strh	r3, [r7, #12]
		pincfg.GPIO_MODE = GPIO_Mode_AF_INPUT;
 8000974:	2308      	movs	r3, #8
 8000976:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_INIT(GPIOA, &pincfg) ;
 8000978:	f107 030c 	add.w	r3, r7, #12
 800097c:	4619      	mov	r1, r3
 800097e:	4820      	ldr	r0, [pc, #128]	; (8000a00 <MCAL_USART_GPIO_Set_Pins+0xbc>)
 8000980:	f7ff fe18 	bl	80005b4 <MCAL_GPIO_INIT>
			pincfg.GPIO_OutPut_Speed = GPIO_SPEED_10M;
			MCAL_GPIO_INIT(GPIOA, &pincfg) ;
		}

	}
}
 8000984:	e036      	b.n	80009f4 <MCAL_USART_GPIO_Set_Pins+0xb0>
	else if(USARTX == USART2)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4a1e      	ldr	r2, [pc, #120]	; (8000a04 <MCAL_USART_GPIO_Set_Pins+0xc0>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d116      	bne.n	80009bc <MCAL_USART_GPIO_Set_Pins+0x78>
		pincfg.GPIO_PinNumber = GPIO_PIN_2 ;
 800098e:	2304      	movs	r3, #4
 8000990:	81bb      	strh	r3, [r7, #12]
		pincfg.GPIO_MODE = GPIO_Mode_OUTPUT_AF_PP;
 8000992:	2306      	movs	r3, #6
 8000994:	73bb      	strb	r3, [r7, #14]
		pincfg.GPIO_OutPut_Speed = GPIO_SPEED_10M;
 8000996:	2301      	movs	r3, #1
 8000998:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_INIT(GPIOA, &pincfg) ;
 800099a:	f107 030c 	add.w	r3, r7, #12
 800099e:	4619      	mov	r1, r3
 80009a0:	4817      	ldr	r0, [pc, #92]	; (8000a00 <MCAL_USART_GPIO_Set_Pins+0xbc>)
 80009a2:	f7ff fe07 	bl	80005b4 <MCAL_GPIO_INIT>
		pincfg.GPIO_PinNumber = GPIO_PIN_3 ;
 80009a6:	2308      	movs	r3, #8
 80009a8:	81bb      	strh	r3, [r7, #12]
		pincfg.GPIO_MODE = GPIO_Mode_AF_INPUT;
 80009aa:	2308      	movs	r3, #8
 80009ac:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_INIT(GPIOA, &pincfg) ;
 80009ae:	f107 030c 	add.w	r3, r7, #12
 80009b2:	4619      	mov	r1, r3
 80009b4:	4812      	ldr	r0, [pc, #72]	; (8000a00 <MCAL_USART_GPIO_Set_Pins+0xbc>)
 80009b6:	f7ff fdfd 	bl	80005b4 <MCAL_GPIO_INIT>
}
 80009ba:	e01b      	b.n	80009f4 <MCAL_USART_GPIO_Set_Pins+0xb0>
	else if(USARTX == USART3)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	4a12      	ldr	r2, [pc, #72]	; (8000a08 <MCAL_USART_GPIO_Set_Pins+0xc4>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d117      	bne.n	80009f4 <MCAL_USART_GPIO_Set_Pins+0xb0>
		pincfg.GPIO_PinNumber = GPIO_PIN_10 ;
 80009c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009c8:	81bb      	strh	r3, [r7, #12]
		pincfg.GPIO_MODE = GPIO_Mode_OUTPUT_AF_PP;
 80009ca:	2306      	movs	r3, #6
 80009cc:	73bb      	strb	r3, [r7, #14]
		pincfg.GPIO_OutPut_Speed = GPIO_SPEED_10M;
 80009ce:	2301      	movs	r3, #1
 80009d0:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_INIT(GPIOB, &pincfg) ;
 80009d2:	f107 030c 	add.w	r3, r7, #12
 80009d6:	4619      	mov	r1, r3
 80009d8:	480c      	ldr	r0, [pc, #48]	; (8000a0c <MCAL_USART_GPIO_Set_Pins+0xc8>)
 80009da:	f7ff fdeb 	bl	80005b4 <MCAL_GPIO_INIT>
		pincfg.GPIO_PinNumber = GPIO_PIN_11 ;
 80009de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009e2:	81bb      	strh	r3, [r7, #12]
		pincfg.GPIO_MODE = GPIO_Mode_AF_INPUT;
 80009e4:	2308      	movs	r3, #8
 80009e6:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_INIT(GPIOB, &pincfg) ;
 80009e8:	f107 030c 	add.w	r3, r7, #12
 80009ec:	4619      	mov	r1, r3
 80009ee:	4807      	ldr	r0, [pc, #28]	; (8000a0c <MCAL_USART_GPIO_Set_Pins+0xc8>)
 80009f0:	f7ff fde0 	bl	80005b4 <MCAL_GPIO_INIT>
}
 80009f4:	bf00      	nop
 80009f6:	3710      	adds	r7, #16
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40013800 	.word	0x40013800
 8000a00:	40010800 	.word	0x40010800
 8000a04:	40004400 	.word	0x40004400
 8000a08:	40004800 	.word	0x40004800
 8000a0c:	40010c00 	.word	0x40010c00

08000a10 <USART1_IRQHandler>:



//ISR
void USART1_IRQHandler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
	Global_Usart_ConFig->P_IRQ_CallBack();
 8000a14:	4b02      	ldr	r3, [pc, #8]	; (8000a20 <USART1_IRQHandler+0x10>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	691b      	ldr	r3, [r3, #16]
 8000a1a:	4798      	blx	r3
}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	2000001c 	.word	0x2000001c

08000a24 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
	Global_Usart_ConFig->P_IRQ_CallBack();
 8000a28:	4b02      	ldr	r3, [pc, #8]	; (8000a34 <USART2_IRQHandler+0x10>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	691b      	ldr	r3, [r3, #16]
 8000a2e:	4798      	blx	r3
}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	2000001c 	.word	0x2000001c

08000a38 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
	Global_Usart_ConFig->P_IRQ_CallBack();
 8000a3c:	4b02      	ldr	r3, [pc, #8]	; (8000a48 <USART3_IRQHandler+0x10>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	691b      	ldr	r3, [r3, #16]
 8000a42:	4798      	blx	r3
}
 8000a44:	bf00      	nop
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	2000001c 	.word	0x2000001c

08000a4c <__libc_init_array>:
 8000a4c:	b570      	push	{r4, r5, r6, lr}
 8000a4e:	2500      	movs	r5, #0
 8000a50:	4e0c      	ldr	r6, [pc, #48]	; (8000a84 <__libc_init_array+0x38>)
 8000a52:	4c0d      	ldr	r4, [pc, #52]	; (8000a88 <__libc_init_array+0x3c>)
 8000a54:	1ba4      	subs	r4, r4, r6
 8000a56:	10a4      	asrs	r4, r4, #2
 8000a58:	42a5      	cmp	r5, r4
 8000a5a:	d109      	bne.n	8000a70 <__libc_init_array+0x24>
 8000a5c:	f000 f81a 	bl	8000a94 <_init>
 8000a60:	2500      	movs	r5, #0
 8000a62:	4e0a      	ldr	r6, [pc, #40]	; (8000a8c <__libc_init_array+0x40>)
 8000a64:	4c0a      	ldr	r4, [pc, #40]	; (8000a90 <__libc_init_array+0x44>)
 8000a66:	1ba4      	subs	r4, r4, r6
 8000a68:	10a4      	asrs	r4, r4, #2
 8000a6a:	42a5      	cmp	r5, r4
 8000a6c:	d105      	bne.n	8000a7a <__libc_init_array+0x2e>
 8000a6e:	bd70      	pop	{r4, r5, r6, pc}
 8000a70:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a74:	4798      	blx	r3
 8000a76:	3501      	adds	r5, #1
 8000a78:	e7ee      	b.n	8000a58 <__libc_init_array+0xc>
 8000a7a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a7e:	4798      	blx	r3
 8000a80:	3501      	adds	r5, #1
 8000a82:	e7f2      	b.n	8000a6a <__libc_init_array+0x1e>
 8000a84:	08000ae4 	.word	0x08000ae4
 8000a88:	08000ae4 	.word	0x08000ae4
 8000a8c:	08000ae4 	.word	0x08000ae4
 8000a90:	08000ae8 	.word	0x08000ae8

08000a94 <_init>:
 8000a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a96:	bf00      	nop
 8000a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a9a:	bc08      	pop	{r3}
 8000a9c:	469e      	mov	lr, r3
 8000a9e:	4770      	bx	lr

08000aa0 <_fini>:
 8000aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000aa2:	bf00      	nop
 8000aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000aa6:	bc08      	pop	{r3}
 8000aa8:	469e      	mov	lr, r3
 8000aaa:	4770      	bx	lr
