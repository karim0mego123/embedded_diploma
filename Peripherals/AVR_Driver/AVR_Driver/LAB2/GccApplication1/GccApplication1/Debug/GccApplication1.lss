
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000de  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000132  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000132  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000164  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006bb  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005d5  00000000  00000000  00000883  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b4  00000000  00000000  00000e58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  0000110c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039d  00000000  00000000  00001140  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000081  00000000  00000000  000014dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000155e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 43 00 	call	0x86	; 0x86 <main>
  64:	0c 94 6d 00 	jmp	0xda	; 0xda <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Execute>:
#define SCK		7
#define SS		4
typedef unsigned char uint8_t ; 
void Execute(uint8_t Data , uint8_t Cmd)  
{
	PORTB &=~ (1<<SS) ; 
  6c:	98 b3       	in	r25, 0x18	; 24
  6e:	9f 7e       	andi	r25, 0xEF	; 239
  70:	98 bb       	out	0x18, r25	; 24
	SPDR = Cmd ; 
  72:	6f b9       	out	0x0f, r22	; 15
	while(!(SPSR&(1<<SPIF)));
  74:	77 9b       	sbis	0x0e, 7	; 14
  76:	fe cf       	rjmp	.-4      	; 0x74 <Execute+0x8>
	SPDR = Data ; 
  78:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR&(1<<SPIF)));
  7a:	77 9b       	sbis	0x0e, 7	; 14
  7c:	fe cf       	rjmp	.-4      	; 0x7a <Execute+0xe>
	PORTB |= (1<<SS) ; 	
  7e:	88 b3       	in	r24, 0x18	; 24
  80:	80 61       	ori	r24, 0x10	; 16
  82:	88 bb       	out	0x18, r24	; 24
  84:	08 95       	ret

00000086 <main>:
}

int main(void)
{
    uint8_t Loc_Counter = 0 , Index_Dispaly = 1 ; 
	DDRB = (1<<MOSI)| (1<<SCK) | (1<<SS) ; 
  86:	80 eb       	ldi	r24, 0xB0	; 176
  88:	87 bb       	out	0x17, r24	; 23
	SPSR = (1<<SPE) | (1<<MSTR) | (1<<SPR0) ; 
  8a:	81 e5       	ldi	r24, 0x51	; 81
  8c:	8e b9       	out	0x0e, r24	; 14
	Execute(0xFF,0x09) ; 
  8e:	69 e0       	ldi	r22, 0x09	; 9
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	0e 94 36 00 	call	0x6c	; 0x6c <Execute>
	Execute(0x07,0x0B) ;
  96:	6b e0       	ldi	r22, 0x0B	; 11
  98:	87 e0       	ldi	r24, 0x07	; 7
  9a:	0e 94 36 00 	call	0x6c	; 0x6c <Execute>
	Execute(0x0F,0x0A) ;
  9e:	6a e0       	ldi	r22, 0x0A	; 10
  a0:	8f e0       	ldi	r24, 0x0F	; 15
  a2:	0e 94 36 00 	call	0x6c	; 0x6c <Execute>
	Execute(0x01,0x0C) ;
  a6:	6c e0       	ldi	r22, 0x0C	; 12
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	0e 94 36 00 	call	0x6c	; 0x6c <Execute>
	
}

int main(void)
{
    uint8_t Loc_Counter = 0 , Index_Dispaly = 1 ; 
  ae:	60 e0       	ldi	r22, 0x00	; 0
	Execute(0x07,0x0B) ;
	Execute(0x0F,0x0A) ;
	Execute(0x01,0x0C) ;
	while(1)
	{
		for (Index_Dispaly = 1 ; Index_Dispaly<9 ; Index_Dispaly++)
  b0:	c1 e0       	ldi	r28, 0x01	; 1
  b2:	07 c0       	rjmp	.+14     	; 0xc2 <main+0x3c>
		{
			Execute(Index_Dispaly,Loc_Counter++) ; 
  b4:	d1 e0       	ldi	r29, 0x01	; 1
  b6:	d6 0f       	add	r29, r22
  b8:	8c 2f       	mov	r24, r28
  ba:	0e 94 36 00 	call	0x6c	; 0x6c <Execute>
	Execute(0x07,0x0B) ;
	Execute(0x0F,0x0A) ;
	Execute(0x01,0x0C) ;
	while(1)
	{
		for (Index_Dispaly = 1 ; Index_Dispaly<9 ; Index_Dispaly++)
  be:	cf 5f       	subi	r28, 0xFF	; 255
		{
			Execute(Index_Dispaly,Loc_Counter++) ; 
  c0:	6d 2f       	mov	r22, r29
	Execute(0x07,0x0B) ;
	Execute(0x0F,0x0A) ;
	Execute(0x01,0x0C) ;
	while(1)
	{
		for (Index_Dispaly = 1 ; Index_Dispaly<9 ; Index_Dispaly++)
  c2:	c9 30       	cpi	r28, 0x09	; 9
  c4:	b8 f3       	brcs	.-18     	; 0xb4 <main+0x2e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c6:	2f e3       	ldi	r18, 0x3F	; 63
  c8:	8d e0       	ldi	r24, 0x0D	; 13
  ca:	93 e0       	ldi	r25, 0x03	; 3
  cc:	21 50       	subi	r18, 0x01	; 1
  ce:	80 40       	sbci	r24, 0x00	; 0
  d0:	90 40       	sbci	r25, 0x00	; 0
  d2:	e1 f7       	brne	.-8      	; 0xcc <main+0x46>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <main+0x50>
  d6:	00 00       	nop
  d8:	eb cf       	rjmp	.-42     	; 0xb0 <main+0x2a>

000000da <_exit>:
  da:	f8 94       	cli

000000dc <__stop_program>:
  dc:	ff cf       	rjmp	.-2      	; 0xdc <__stop_program>
