
AVR_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a92  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000b06  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800060  00800060  00000b06  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b06  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b38  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c8  00000000  00000000  00000b74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001890  00000000  00000000  00000d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b00  00000000  00000000  000025cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f9e  00000000  00000000  000030cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000494  00000000  00000000  0000406c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008ee  00000000  00000000  00004500  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011e7  00000000  00000000  00004dee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  00005fd5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 21 03 	jmp	0x642	; 0x642 <__vector_1>
   8:	0c 94 4a 03 	jmp	0x694	; 0x694 <__vector_2>
   c:	0c 94 73 03 	jmp	0x6e6	; 0x6e6 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 0a 02 	jmp	0x414	; 0x414 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e9       	ldi	r30, 0x92	; 146
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 36       	cpi	r26, 0x6B	; 107
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b1 01 	call	0x362	; 0x362 <main>
  8a:	0c 94 47 05 	jmp	0xa8e	; 0xa8e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_Enable>:
 ********************************************************************************************************************/
void LCD_Display_Customer_Char(uint8_t CGRAM_Index , uint8_t ROW , uint8_t Col ) 
{
	LCD_GO_TO_INDEX(ROW,Col);
	Lcd_Write_Char(CGRAM_Index);
}
  92:	41 e0       	ldi	r20, 0x01	; 1
  94:	63 e0       	ldi	r22, 0x03	; 3
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	0e 94 ac 02 	call	0x558	; 0x558 <DIO_Write_Pin>
  9c:	8f e4       	ldi	r24, 0x4F	; 79
  9e:	93 ec       	ldi	r25, 0xC3	; 195
  a0:	01 97       	sbiw	r24, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <LCD_Enable+0xe>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <LCD_Enable+0x14>
  a6:	00 00       	nop
  a8:	40 e0       	ldi	r20, 0x00	; 0
  aa:	63 e0       	ldi	r22, 0x03	; 3
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	0e 94 ac 02 	call	0x558	; 0x558 <DIO_Write_Pin>
  b2:	08 95       	ret

000000b4 <LCD_Wirte_Cmd>:
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
  b8:	c8 2f       	mov	r28, r24
  ba:	40 e0       	ldi	r20, 0x00	; 0
  bc:	61 e0       	ldi	r22, 0x01	; 1
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	0e 94 ac 02 	call	0x558	; 0x558 <DIO_Write_Pin>
  c4:	40 e0       	ldi	r20, 0x00	; 0
  c6:	62 e0       	ldi	r22, 0x02	; 2
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	0e 94 ac 02 	call	0x558	; 0x558 <DIO_Write_Pin>
  ce:	8b b3       	in	r24, 0x1b	; 27
  d0:	8f 70       	andi	r24, 0x0F	; 15
  d2:	9c 2f       	mov	r25, r28
  d4:	90 7f       	andi	r25, 0xF0	; 240
  d6:	89 2b       	or	r24, r25
  d8:	8b bb       	out	0x1b, r24	; 27
  da:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Enable>
  de:	87 ee       	ldi	r24, 0xE7	; 231
  e0:	93 e0       	ldi	r25, 0x03	; 3
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <LCD_Wirte_Cmd+0x2e>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <LCD_Wirte_Cmd+0x34>
  e8:	00 00       	nop
  ea:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ee:	88 23       	and	r24, r24
  f0:	49 f0       	breq	.+18     	; 0x104 <LCD_Wirte_Cmd+0x50>
  f2:	8b b3       	in	r24, 0x1b	; 27
  f4:	c8 2b       	or	r28, r24
  f6:	90 e1       	ldi	r25, 0x10	; 16
  f8:	c9 9f       	mul	r28, r25
  fa:	e0 01       	movw	r28, r0
  fc:	11 24       	eor	r1, r1
  fe:	cb bb       	out	0x1b, r28	; 27
 100:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Enable>
 104:	8f ec       	ldi	r24, 0xCF	; 207
 106:	97 e0       	ldi	r25, 0x07	; 7
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <LCD_Wirte_Cmd+0x54>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <LCD_Wirte_Cmd+0x5a>
 10e:	00 00       	nop
 110:	df 91       	pop	r29
 112:	cf 91       	pop	r28
 114:	08 95       	ret

00000116 <LCD_Clear_Screen>:
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_Wirte_Cmd>
 11c:	08 95       	ret

0000011e <LCD_Init>:
 11e:	8f e1       	ldi	r24, 0x1F	; 31
 120:	9e e4       	ldi	r25, 0x4E	; 78
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <LCD_Init+0x4>
 126:	00 c0       	rjmp	.+0      	; 0x128 <LCD_Init+0xa>
 128:	00 00       	nop
 12a:	8a b3       	in	r24, 0x1a	; 26
 12c:	82 60       	ori	r24, 0x02	; 2
 12e:	8a bb       	out	0x1a, r24	; 26
 130:	8a b3       	in	r24, 0x1a	; 26
 132:	84 60       	ori	r24, 0x04	; 4
 134:	8a bb       	out	0x1a, r24	; 26
 136:	8a b3       	in	r24, 0x1a	; 26
 138:	88 60       	ori	r24, 0x08	; 8
 13a:	8a bb       	out	0x1a, r24	; 26
 13c:	8b b3       	in	r24, 0x1b	; 27
 13e:	8d 7f       	andi	r24, 0xFD	; 253
 140:	8b bb       	out	0x1b, r24	; 27
 142:	8b b3       	in	r24, 0x1b	; 27
 144:	8b 7f       	andi	r24, 0xFB	; 251
 146:	8b bb       	out	0x1b, r24	; 27
 148:	8b b3       	in	r24, 0x1b	; 27
 14a:	87 7f       	andi	r24, 0xF7	; 247
 14c:	8b bb       	out	0x1b, r24	; 27
 14e:	8a b3       	in	r24, 0x1a	; 26
 150:	80 61       	ori	r24, 0x10	; 16
 152:	8a bb       	out	0x1a, r24	; 26
 154:	8a b3       	in	r24, 0x1a	; 26
 156:	80 62       	ori	r24, 0x20	; 32
 158:	8a bb       	out	0x1a, r24	; 26
 15a:	8a b3       	in	r24, 0x1a	; 26
 15c:	80 64       	ori	r24, 0x40	; 64
 15e:	8a bb       	out	0x1a, r24	; 26
 160:	8a b3       	in	r24, 0x1a	; 26
 162:	80 68       	ori	r24, 0x80	; 128
 164:	8a bb       	out	0x1a, r24	; 26
 166:	87 e9       	ldi	r24, 0x97	; 151
 168:	9a e3       	ldi	r25, 0x3A	; 58
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <LCD_Init+0x4c>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <LCD_Init+0x52>
 170:	00 00       	nop
 172:	0e 94 8b 00 	call	0x116	; 0x116 <LCD_Clear_Screen>
 176:	80 e2       	ldi	r24, 0x20	; 32
 178:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_Wirte_Cmd>
 17c:	80 e2       	ldi	r24, 0x20	; 32
 17e:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_Wirte_Cmd>
 182:	80 e8       	ldi	r24, 0x80	; 128
 184:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_Wirte_Cmd>
 188:	87 ee       	ldi	r24, 0xE7	; 231
 18a:	93 e0       	ldi	r25, 0x03	; 3
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <LCD_Init+0x6e>
 190:	00 c0       	rjmp	.+0      	; 0x192 <LCD_Init+0x74>
 192:	00 00       	nop
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_Wirte_Cmd>
 19a:	80 ef       	ldi	r24, 0xF0	; 240
 19c:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_Wirte_Cmd>
 1a0:	87 ee       	ldi	r24, 0xE7	; 231
 1a2:	93 e0       	ldi	r25, 0x03	; 3
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <LCD_Init+0x86>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <LCD_Init+0x8c>
 1aa:	00 00       	nop
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_Wirte_Cmd>
 1b2:	80 e1       	ldi	r24, 0x10	; 16
 1b4:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_Wirte_Cmd>
 1b8:	8f ec       	ldi	r24, 0xCF	; 207
 1ba:	97 e0       	ldi	r25, 0x07	; 7
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <LCD_Init+0x9e>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <LCD_Init+0xa4>
 1c2:	00 00       	nop
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 1ca:	86 e0       	ldi	r24, 0x06	; 6
 1cc:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_Wirte_Cmd>
 1d0:	80 e8       	ldi	r24, 0x80	; 128
 1d2:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_Wirte_Cmd>
 1d6:	8f e0       	ldi	r24, 0x0F	; 15
 1d8:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_Wirte_Cmd>
 1dc:	08 95       	ret

000001de <Lcd_Write_Char>:
 1de:	cf 93       	push	r28
 1e0:	c8 2f       	mov	r28, r24
 1e2:	41 e0       	ldi	r20, 0x01	; 1
 1e4:	61 e0       	ldi	r22, 0x01	; 1
 1e6:	80 e0       	ldi	r24, 0x00	; 0
 1e8:	0e 94 ac 02 	call	0x558	; 0x558 <DIO_Write_Pin>
 1ec:	40 e0       	ldi	r20, 0x00	; 0
 1ee:	62 e0       	ldi	r22, 0x02	; 2
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	0e 94 ac 02 	call	0x558	; 0x558 <DIO_Write_Pin>
 1f6:	8b b3       	in	r24, 0x1b	; 27
 1f8:	8f 70       	andi	r24, 0x0F	; 15
 1fa:	9c 2f       	mov	r25, r28
 1fc:	90 7f       	andi	r25, 0xF0	; 240
 1fe:	89 2b       	or	r24, r25
 200:	8b bb       	out	0x1b, r24	; 27
 202:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Enable>
 206:	87 ee       	ldi	r24, 0xE7	; 231
 208:	93 e0       	ldi	r25, 0x03	; 3
 20a:	01 97       	sbiw	r24, 0x01	; 1
 20c:	f1 f7       	brne	.-4      	; 0x20a <Lcd_Write_Char+0x2c>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <Lcd_Write_Char+0x32>
 210:	00 00       	nop
 212:	2b b3       	in	r18, 0x1b	; 27
 214:	30 e1       	ldi	r19, 0x10	; 16
 216:	c3 9f       	mul	r28, r19
 218:	c0 01       	movw	r24, r0
 21a:	11 24       	eor	r1, r1
 21c:	92 2f       	mov	r25, r18
 21e:	9f 70       	andi	r25, 0x0F	; 15
 220:	89 2b       	or	r24, r25
 222:	8b bb       	out	0x1b, r24	; 27
 224:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Enable>
 228:	cf 91       	pop	r28
 22a:	08 95       	ret

0000022c <LCD_Write_Number>:
void LCD_Write_Number(uint16_t Number) 
{
 22c:	0f 93       	push	r16
 22e:	1f 93       	push	r17
 230:	cf 93       	push	r28
 232:	df 93       	push	r29
 234:	00 d0       	rcall	.+0      	; 0x236 <LCD_Write_Number+0xa>
 236:	00 d0       	rcall	.+0      	; 0x238 <LCD_Write_Number+0xc>
 238:	1f 92       	push	r1
 23a:	cd b7       	in	r28, 0x3d	; 61
 23c:	de b7       	in	r29, 0x3e	; 62
 23e:	ac 01       	movw	r20, r24
	uint8_t Rem[5] = {0} , count = 0  ;
 240:	fe 01       	movw	r30, r28
 242:	31 96       	adiw	r30, 0x01	; 1
 244:	85 e0       	ldi	r24, 0x05	; 5
 246:	df 01       	movw	r26, r30
 248:	1d 92       	st	X+, r1
 24a:	8a 95       	dec	r24
 24c:	e9 f7       	brne	.-6      	; 0x248 <LCD_Write_Number+0x1c>
	if (Number<10)
 24e:	4a 30       	cpi	r20, 0x0A	; 10
 250:	51 05       	cpc	r21, r1
 252:	90 f5       	brcc	.+100    	; 0x2b8 <LCD_Write_Number+0x8c>
	{
		Lcd_Write_Char(Number+48);
 254:	80 e3       	ldi	r24, 0x30	; 48
 256:	84 0f       	add	r24, r20
 258:	0e 94 ef 00 	call	0x1de	; 0x1de <Lcd_Write_Char>
	LCD_GO_TO_INDEX(ROW,Col);
	Lcd_Write_Char(CGRAM_Index);
}
void LCD_Write_Number(uint16_t Number) 
{
	uint8_t Rem[5] = {0} , count = 0  ;
 25c:	00 e0       	ldi	r16, 0x00	; 0
 25e:	30 c0       	rjmp	.+96     	; 0x2c0 <LCD_Write_Number+0x94>
	}
	else
	{
		while(Number>0)
		{
			Rem[count++] = Number % 10 ;
 260:	9a 01       	movw	r18, r20
 262:	ad ec       	ldi	r26, 0xCD	; 205
 264:	bc ec       	ldi	r27, 0xCC	; 204
 266:	0e 94 38 05 	call	0xa70	; 0xa70 <__umulhisi3>
 26a:	96 95       	lsr	r25
 26c:	87 95       	ror	r24
 26e:	96 95       	lsr	r25
 270:	87 95       	ror	r24
 272:	96 95       	lsr	r25
 274:	87 95       	ror	r24
 276:	9c 01       	movw	r18, r24
 278:	22 0f       	add	r18, r18
 27a:	33 1f       	adc	r19, r19
 27c:	88 0f       	add	r24, r24
 27e:	99 1f       	adc	r25, r25
 280:	88 0f       	add	r24, r24
 282:	99 1f       	adc	r25, r25
 284:	88 0f       	add	r24, r24
 286:	99 1f       	adc	r25, r25
 288:	82 0f       	add	r24, r18
 28a:	93 1f       	adc	r25, r19
 28c:	9a 01       	movw	r18, r20
 28e:	28 1b       	sub	r18, r24
 290:	39 0b       	sbc	r19, r25
 292:	e1 e0       	ldi	r30, 0x01	; 1
 294:	f0 e0       	ldi	r31, 0x00	; 0
 296:	ec 0f       	add	r30, r28
 298:	fd 1f       	adc	r31, r29
 29a:	e0 0f       	add	r30, r16
 29c:	f1 1d       	adc	r31, r1
 29e:	20 83       	st	Z, r18
			Number /= 10 ; 
 2a0:	9a 01       	movw	r18, r20
 2a2:	0e 94 38 05 	call	0xa70	; 0xa70 <__umulhisi3>
 2a6:	ac 01       	movw	r20, r24
 2a8:	56 95       	lsr	r21
 2aa:	47 95       	ror	r20
 2ac:	56 95       	lsr	r21
 2ae:	47 95       	ror	r20
 2b0:	56 95       	lsr	r21
 2b2:	47 95       	ror	r20
	}
	else
	{
		while(Number>0)
		{
			Rem[count++] = Number % 10 ;
 2b4:	0f 5f       	subi	r16, 0xFF	; 255
 2b6:	01 c0       	rjmp	.+2      	; 0x2ba <LCD_Write_Number+0x8e>
 2b8:	00 e0       	ldi	r16, 0x00	; 0
	{
		Lcd_Write_Char(Number+48);
	}
	else
	{
		while(Number>0)
 2ba:	41 15       	cp	r20, r1
 2bc:	51 05       	cpc	r21, r1
 2be:	81 f6       	brne	.-96     	; 0x260 <LCD_Write_Number+0x34>
		{
			Rem[count++] = Number % 10 ;
			Number /= 10 ; 
		}
	}
	for (int i = count-1 ; i >= 0 ; i-- )
 2c0:	10 e0       	ldi	r17, 0x00	; 0
 2c2:	01 50       	subi	r16, 0x01	; 1
 2c4:	11 09       	sbc	r17, r1
 2c6:	0c c0       	rjmp	.+24     	; 0x2e0 <LCD_Write_Number+0xb4>
	{
		Lcd_Write_Char(Rem[i]+48);		
 2c8:	e1 e0       	ldi	r30, 0x01	; 1
 2ca:	f0 e0       	ldi	r31, 0x00	; 0
 2cc:	ec 0f       	add	r30, r28
 2ce:	fd 1f       	adc	r31, r29
 2d0:	e0 0f       	add	r30, r16
 2d2:	f1 1f       	adc	r31, r17
 2d4:	80 81       	ld	r24, Z
 2d6:	80 5d       	subi	r24, 0xD0	; 208
 2d8:	0e 94 ef 00 	call	0x1de	; 0x1de <Lcd_Write_Char>
		{
			Rem[count++] = Number % 10 ;
			Number /= 10 ; 
		}
	}
	for (int i = count-1 ; i >= 0 ; i-- )
 2dc:	01 50       	subi	r16, 0x01	; 1
 2de:	11 09       	sbc	r17, r1
 2e0:	11 23       	and	r17, r17
 2e2:	94 f7       	brge	.-28     	; 0x2c8 <LCD_Write_Number+0x9c>
	{
		Lcd_Write_Char(Rem[i]+48);		
	}
 2e4:	0f 90       	pop	r0
 2e6:	0f 90       	pop	r0
 2e8:	0f 90       	pop	r0
 2ea:	0f 90       	pop	r0
 2ec:	0f 90       	pop	r0
 2ee:	df 91       	pop	r29
 2f0:	cf 91       	pop	r28
 2f2:	1f 91       	pop	r17
 2f4:	0f 91       	pop	r16
 2f6:	08 95       	ret

000002f8 <LM35_Init>:
 *  Author: karim
 */ 
#include "LM35_Sensor.h"

ES_t LM35_Init(uint8_t Channel_id) 
{
 2f8:	cf 93       	push	r28
 2fa:	c8 2f       	mov	r28, r24
	ES_t Loc_Error_State = NO_Error ;
	
	ADC_INIT();
 2fc:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <ADC_INIT>
	ADC_Enable();
 300:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <ADC_Enable>
	ADC_Select_Channel(Channel_id);
 304:	8c 2f       	mov	r24, r28
 306:	0e 94 02 02 	call	0x404	; 0x404 <ADC_Select_Channel>
	DIO_Write_Pin_Dir(PORT_A,Channel_id,LOW);
 30a:	40 e0       	ldi	r20, 0x00	; 0
 30c:	6c 2f       	mov	r22, r28
 30e:	80 e0       	ldi	r24, 0x00	; 0
 310:	0e 94 37 02 	call	0x46e	; 0x46e <DIO_Write_Pin_Dir>
	
	return Loc_Error_State ; 
}
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	cf 91       	pop	r28
 318:	08 95       	ret

0000031a <LM35_Read>:
ES_t LM35_Read(uint16_t* value)
{
 31a:	cf 93       	push	r28
 31c:	df 93       	push	r29
 31e:	ec 01       	movw	r28, r24
	ES_t Loc_Error_State = NO_Error ;
	
	ADC_Start();
 320:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <ADC_Start>
	ADC_PollingSystem();
 324:	0e 94 e6 01 	call	0x3cc	; 0x3cc <ADC_PollingSystem>
	ADC_ReadHighValue(value);
 328:	ce 01       	movw	r24, r28
 32a:	0e 94 ed 01 	call	0x3da	; 0x3da <ADC_ReadHighValue>
	*value = ((( *value )* 0.0048828 )/0.01);
 32e:	68 81       	ld	r22, Y
 330:	79 81       	ldd	r23, Y+1	; 0x01
 332:	80 e0       	ldi	r24, 0x00	; 0
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	0e 94 3d 04 	call	0x87a	; 0x87a <__floatunsisf>
 33a:	25 ee       	ldi	r18, 0xE5	; 229
 33c:	3f ef       	ldi	r19, 0xFF	; 255
 33e:	4f e9       	ldi	r20, 0x9F	; 159
 340:	5b e3       	ldi	r21, 0x3B	; 59
 342:	0e 94 cb 04 	call	0x996	; 0x996 <__mulsf3>
 346:	2a e0       	ldi	r18, 0x0A	; 10
 348:	37 ed       	ldi	r19, 0xD7	; 215
 34a:	43 e2       	ldi	r20, 0x23	; 35
 34c:	5c e3       	ldi	r21, 0x3C	; 60
 34e:	0e 94 9c 03 	call	0x738	; 0x738 <__divsf3>
 352:	0e 94 0e 04 	call	0x81c	; 0x81c <__fixunssfsi>
 356:	79 83       	std	Y+1, r23	; 0x01
 358:	68 83       	st	Y, r22
	
	return Loc_Error_State ; 
}
 35a:	80 e0       	ldi	r24, 0x00	; 0
 35c:	df 91       	pop	r29
 35e:	cf 91       	pop	r28
 360:	08 95       	ret

00000362 <main>:
#include "GIE.h"
#include "LM35_Sensor.h"


int main()
{	
 362:	cf 93       	push	r28
 364:	df 93       	push	r29
 366:	00 d0       	rcall	.+0      	; 0x368 <main+0x6>
 368:	cd b7       	in	r28, 0x3d	; 61
 36a:	de b7       	in	r29, 0x3e	; 62
	uint16_t Loc_Read = 0 ;
 36c:	1a 82       	std	Y+2, r1	; 0x02
 36e:	19 82       	std	Y+1, r1	; 0x01
	uint8_t Channel_id = 0 ; 
	LCD_Init();
 370:	0e 94 8f 00 	call	0x11e	; 0x11e <LCD_Init>
	LM35_Init(Channel_id);
 374:	80 e0       	ldi	r24, 0x00	; 0
 376:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <LM35_Init>
	
	while(1)
	{
		LM35_Read(&Loc_Read);
 37a:	ce 01       	movw	r24, r28
 37c:	01 96       	adiw	r24, 0x01	; 1
 37e:	0e 94 8d 01 	call	0x31a	; 0x31a <LM35_Read>
		LCD_Write_Number(Loc_Read);
 382:	89 81       	ldd	r24, Y+1	; 0x01
 384:	9a 81       	ldd	r25, Y+2	; 0x02
 386:	0e 94 16 01 	call	0x22c	; 0x22c <LCD_Write_Number>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 38a:	2f ef       	ldi	r18, 0xFF	; 255
 38c:	84 e3       	ldi	r24, 0x34	; 52
 38e:	9c e0       	ldi	r25, 0x0C	; 12
 390:	21 50       	subi	r18, 0x01	; 1
 392:	80 40       	sbci	r24, 0x00	; 0
 394:	90 40       	sbci	r25, 0x00	; 0
 396:	e1 f7       	brne	.-8      	; 0x390 <main+0x2e>
 398:	00 c0       	rjmp	.+0      	; 0x39a <main+0x38>
 39a:	00 00       	nop
		_delay_ms(1000);
		LCD_Clear_Screen();
 39c:	0e 94 8b 00 	call	0x116	; 0x116 <LCD_Clear_Screen>
 3a0:	ec cf       	rjmp	.-40     	; 0x37a <main+0x18>

000003a2 <ADC_INIT>:
	ES_t Local_ErrorState = NO_Error ;
	
	ENABLE_ADC_INTERRUPT ; 							 
	
	return Local_ErrorState ;
}
 3a2:	86 b1       	in	r24, 0x06	; 6
 3a4:	87 60       	ori	r24, 0x07	; 7
 3a6:	86 b9       	out	0x06, r24	; 6
 3a8:	87 b1       	in	r24, 0x07	; 7
 3aa:	80 64       	ori	r24, 0x40	; 64
 3ac:	87 b9       	out	0x07, r24	; 7
 3ae:	87 b1       	in	r24, 0x07	; 7
 3b0:	80 62       	ori	r24, 0x20	; 32
 3b2:	87 b9       	out	0x07, r24	; 7
 3b4:	80 e0       	ldi	r24, 0x00	; 0
 3b6:	08 95       	ret

000003b8 <ADC_Enable>:
 3b8:	86 b1       	in	r24, 0x06	; 6
 3ba:	80 68       	ori	r24, 0x80	; 128
 3bc:	86 b9       	out	0x06, r24	; 6
 3be:	80 e0       	ldi	r24, 0x00	; 0
 3c0:	08 95       	ret

000003c2 <ADC_Start>:
 3c2:	86 b1       	in	r24, 0x06	; 6
 3c4:	80 64       	ori	r24, 0x40	; 64
 3c6:	86 b9       	out	0x06, r24	; 6
 3c8:	80 e0       	ldi	r24, 0x00	; 0
 3ca:	08 95       	ret

000003cc <ADC_PollingSystem>:
 3cc:	34 9b       	sbis	0x06, 4	; 6
 3ce:	fe cf       	rjmp	.-4      	; 0x3cc <ADC_PollingSystem>
 3d0:	86 b1       	in	r24, 0x06	; 6
 3d2:	80 61       	ori	r24, 0x10	; 16
 3d4:	86 b9       	out	0x06, r24	; 6
 3d6:	80 e0       	ldi	r24, 0x00	; 0
 3d8:	08 95       	ret

000003da <ADC_ReadHighValue>:
 3da:	24 b1       	in	r18, 0x04	; 4
 3dc:	22 95       	swap	r18
 3de:	26 95       	lsr	r18
 3e0:	26 95       	lsr	r18
 3e2:	23 70       	andi	r18, 0x03	; 3
 3e4:	30 e0       	ldi	r19, 0x00	; 0
 3e6:	fc 01       	movw	r30, r24
 3e8:	31 83       	std	Z+1, r19	; 0x01
 3ea:	20 83       	st	Z, r18
 3ec:	45 b1       	in	r20, 0x05	; 5
 3ee:	50 e0       	ldi	r21, 0x00	; 0
 3f0:	44 0f       	add	r20, r20
 3f2:	55 1f       	adc	r21, r21
 3f4:	44 0f       	add	r20, r20
 3f6:	55 1f       	adc	r21, r21
 3f8:	24 2b       	or	r18, r20
 3fa:	35 2b       	or	r19, r21
 3fc:	31 83       	std	Z+1, r19	; 0x01
 3fe:	20 83       	st	Z, r18
 400:	80 e0       	ldi	r24, 0x00	; 0
 402:	08 95       	ret

00000404 <ADC_Select_Channel>:
 404:	97 b1       	in	r25, 0x07	; 7
 406:	90 7e       	andi	r25, 0xE0	; 224
 408:	97 b9       	out	0x07, r25	; 7
 40a:	97 b1       	in	r25, 0x07	; 7
 40c:	89 2b       	or	r24, r25
 40e:	87 b9       	out	0x07, r24	; 7
 410:	80 e0       	ldi	r24, 0x00	; 0
 412:	08 95       	ret

00000414 <__vector_16>:
ISR(ADC_vect)
{
 414:	1f 92       	push	r1
 416:	0f 92       	push	r0
 418:	0f b6       	in	r0, 0x3f	; 63
 41a:	0f 92       	push	r0
 41c:	11 24       	eor	r1, r1
 41e:	2f 93       	push	r18
 420:	3f 93       	push	r19
 422:	4f 93       	push	r20
 424:	5f 93       	push	r21
 426:	6f 93       	push	r22
 428:	7f 93       	push	r23
 42a:	8f 93       	push	r24
 42c:	9f 93       	push	r25
 42e:	af 93       	push	r26
 430:	bf 93       	push	r27
 432:	ef 93       	push	r30
 434:	ff 93       	push	r31
	if (ADC_GptrFun != NULL)
 436:	e0 91 63 00 	lds	r30, 0x0063	; 0x800063 <ADC_GptrFun>
 43a:	f0 91 64 00 	lds	r31, 0x0064	; 0x800064 <ADC_GptrFun+0x1>
 43e:	30 97       	sbiw	r30, 0x00	; 0
 440:	29 f0       	breq	.+10     	; 0x44c <__vector_16+0x38>
	{
		ADC_GptrFun(ADCGptrParameter) ; 
 442:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <ADCGptrParameter>
 446:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <ADCGptrParameter+0x1>
 44a:	09 95       	icall
	}
 44c:	ff 91       	pop	r31
 44e:	ef 91       	pop	r30
 450:	bf 91       	pop	r27
 452:	af 91       	pop	r26
 454:	9f 91       	pop	r25
 456:	8f 91       	pop	r24
 458:	7f 91       	pop	r23
 45a:	6f 91       	pop	r22
 45c:	5f 91       	pop	r21
 45e:	4f 91       	pop	r20
 460:	3f 91       	pop	r19
 462:	2f 91       	pop	r18
 464:	0f 90       	pop	r0
 466:	0f be       	out	0x3f, r0	; 63
 468:	0f 90       	pop	r0
 46a:	1f 90       	pop	r1
 46c:	18 95       	reti

0000046e <DIO_Write_Pin_Dir>:
			{
				DDRD = 0XFF ;
			}
			else
			{
				DDRD = 0X00 ;
 46e:	81 30       	cpi	r24, 0x01	; 1
 470:	11 f1       	breq	.+68     	; 0x4b6 <DIO_Write_Pin_Dir+0x48>
 472:	30 f0       	brcs	.+12     	; 0x480 <DIO_Write_Pin_Dir+0x12>
 474:	82 30       	cpi	r24, 0x02	; 2
 476:	d1 f1       	breq	.+116    	; 0x4ec <DIO_Write_Pin_Dir+0x7e>
 478:	83 30       	cpi	r24, 0x03	; 3
 47a:	09 f4       	brne	.+2      	; 0x47e <DIO_Write_Pin_Dir+0x10>
 47c:	52 c0       	rjmp	.+164    	; 0x522 <DIO_Write_Pin_Dir+0xb4>
 47e:	08 95       	ret
 480:	41 30       	cpi	r20, 0x01	; 1
 482:	59 f4       	brne	.+22     	; 0x49a <DIO_Write_Pin_Dir+0x2c>
 484:	2a b3       	in	r18, 0x1a	; 26
 486:	81 e0       	ldi	r24, 0x01	; 1
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	02 c0       	rjmp	.+4      	; 0x490 <DIO_Write_Pin_Dir+0x22>
 48c:	88 0f       	add	r24, r24
 48e:	99 1f       	adc	r25, r25
 490:	6a 95       	dec	r22
 492:	e2 f7       	brpl	.-8      	; 0x48c <DIO_Write_Pin_Dir+0x1e>
 494:	82 2b       	or	r24, r18
 496:	8a bb       	out	0x1a, r24	; 26
 498:	08 95       	ret
 49a:	41 11       	cpse	r20, r1
 49c:	5c c0       	rjmp	.+184    	; 0x556 <DIO_Write_Pin_Dir+0xe8>
 49e:	2a b3       	in	r18, 0x1a	; 26
 4a0:	81 e0       	ldi	r24, 0x01	; 1
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	02 c0       	rjmp	.+4      	; 0x4aa <DIO_Write_Pin_Dir+0x3c>
 4a6:	88 0f       	add	r24, r24
 4a8:	99 1f       	adc	r25, r25
 4aa:	6a 95       	dec	r22
 4ac:	e2 f7       	brpl	.-8      	; 0x4a6 <DIO_Write_Pin_Dir+0x38>
 4ae:	80 95       	com	r24
 4b0:	82 23       	and	r24, r18
 4b2:	8a bb       	out	0x1a, r24	; 26
 4b4:	08 95       	ret
 4b6:	41 30       	cpi	r20, 0x01	; 1
 4b8:	59 f4       	brne	.+22     	; 0x4d0 <DIO_Write_Pin_Dir+0x62>
 4ba:	27 b3       	in	r18, 0x17	; 23
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <DIO_Write_Pin_Dir+0x58>
 4c2:	88 0f       	add	r24, r24
 4c4:	99 1f       	adc	r25, r25
 4c6:	6a 95       	dec	r22
 4c8:	e2 f7       	brpl	.-8      	; 0x4c2 <DIO_Write_Pin_Dir+0x54>
 4ca:	82 2b       	or	r24, r18
 4cc:	87 bb       	out	0x17, r24	; 23
 4ce:	08 95       	ret
 4d0:	41 11       	cpse	r20, r1
 4d2:	41 c0       	rjmp	.+130    	; 0x556 <DIO_Write_Pin_Dir+0xe8>
 4d4:	27 b3       	in	r18, 0x17	; 23
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	02 c0       	rjmp	.+4      	; 0x4e0 <DIO_Write_Pin_Dir+0x72>
 4dc:	88 0f       	add	r24, r24
 4de:	99 1f       	adc	r25, r25
 4e0:	6a 95       	dec	r22
 4e2:	e2 f7       	brpl	.-8      	; 0x4dc <DIO_Write_Pin_Dir+0x6e>
 4e4:	80 95       	com	r24
 4e6:	82 23       	and	r24, r18
 4e8:	87 bb       	out	0x17, r24	; 23
 4ea:	08 95       	ret
 4ec:	41 30       	cpi	r20, 0x01	; 1
 4ee:	59 f4       	brne	.+22     	; 0x506 <DIO_Write_Pin_Dir+0x98>
 4f0:	24 b3       	in	r18, 0x14	; 20
 4f2:	81 e0       	ldi	r24, 0x01	; 1
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	02 c0       	rjmp	.+4      	; 0x4fc <DIO_Write_Pin_Dir+0x8e>
 4f8:	88 0f       	add	r24, r24
 4fa:	99 1f       	adc	r25, r25
 4fc:	6a 95       	dec	r22
 4fe:	e2 f7       	brpl	.-8      	; 0x4f8 <DIO_Write_Pin_Dir+0x8a>
 500:	82 2b       	or	r24, r18
 502:	84 bb       	out	0x14, r24	; 20
 504:	08 95       	ret
 506:	41 11       	cpse	r20, r1
 508:	26 c0       	rjmp	.+76     	; 0x556 <DIO_Write_Pin_Dir+0xe8>
 50a:	24 b3       	in	r18, 0x14	; 20
 50c:	81 e0       	ldi	r24, 0x01	; 1
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	02 c0       	rjmp	.+4      	; 0x516 <DIO_Write_Pin_Dir+0xa8>
 512:	88 0f       	add	r24, r24
 514:	99 1f       	adc	r25, r25
 516:	6a 95       	dec	r22
 518:	e2 f7       	brpl	.-8      	; 0x512 <DIO_Write_Pin_Dir+0xa4>
 51a:	80 95       	com	r24
 51c:	82 23       	and	r24, r18
 51e:	84 bb       	out	0x14, r24	; 20
 520:	08 95       	ret
 522:	41 30       	cpi	r20, 0x01	; 1
 524:	59 f4       	brne	.+22     	; 0x53c <DIO_Write_Pin_Dir+0xce>
 526:	21 b3       	in	r18, 0x11	; 17
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	02 c0       	rjmp	.+4      	; 0x532 <DIO_Write_Pin_Dir+0xc4>
 52e:	88 0f       	add	r24, r24
 530:	99 1f       	adc	r25, r25
 532:	6a 95       	dec	r22
 534:	e2 f7       	brpl	.-8      	; 0x52e <DIO_Write_Pin_Dir+0xc0>
 536:	82 2b       	or	r24, r18
 538:	81 bb       	out	0x11, r24	; 17
 53a:	08 95       	ret
 53c:	41 11       	cpse	r20, r1
 53e:	0b c0       	rjmp	.+22     	; 0x556 <DIO_Write_Pin_Dir+0xe8>
 540:	21 b3       	in	r18, 0x11	; 17
 542:	81 e0       	ldi	r24, 0x01	; 1
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	02 c0       	rjmp	.+4      	; 0x54c <DIO_Write_Pin_Dir+0xde>
 548:	88 0f       	add	r24, r24
 54a:	99 1f       	adc	r25, r25
 54c:	6a 95       	dec	r22
 54e:	e2 f7       	brpl	.-8      	; 0x548 <DIO_Write_Pin_Dir+0xda>
 550:	80 95       	com	r24
 552:	82 23       	and	r24, r18
 554:	81 bb       	out	0x11, r24	; 17
 556:	08 95       	ret

00000558 <DIO_Write_Pin>:
	}
}

void DIO_Write_Pin( GPIO_PORT_t PortNumber , GPIO_PIN_t PinNumber , uint8_t value  )
{
	switch( PortNumber )
 558:	81 30       	cpi	r24, 0x01	; 1
 55a:	11 f1       	breq	.+68     	; 0x5a0 <DIO_Write_Pin+0x48>
 55c:	30 f0       	brcs	.+12     	; 0x56a <DIO_Write_Pin+0x12>
 55e:	82 30       	cpi	r24, 0x02	; 2
 560:	d1 f1       	breq	.+116    	; 0x5d6 <DIO_Write_Pin+0x7e>
 562:	83 30       	cpi	r24, 0x03	; 3
 564:	09 f4       	brne	.+2      	; 0x568 <DIO_Write_Pin+0x10>
 566:	52 c0       	rjmp	.+164    	; 0x60c <DIO_Write_Pin+0xb4>
 568:	08 95       	ret
	{
		case PORT_A :
		if ( value == HIGH )
 56a:	41 30       	cpi	r20, 0x01	; 1
 56c:	59 f4       	brne	.+22     	; 0x584 <DIO_Write_Pin+0x2c>
		{
			PORTA |= (1<<PinNumber) ;
 56e:	2b b3       	in	r18, 0x1b	; 27
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	02 c0       	rjmp	.+4      	; 0x57a <DIO_Write_Pin+0x22>
 576:	88 0f       	add	r24, r24
 578:	99 1f       	adc	r25, r25
 57a:	6a 95       	dec	r22
 57c:	e2 f7       	brpl	.-8      	; 0x576 <DIO_Write_Pin+0x1e>
 57e:	82 2b       	or	r24, r18
 580:	8b bb       	out	0x1b, r24	; 27
 582:	08 95       	ret
		}
		else if ( value == LOW )
 584:	41 11       	cpse	r20, r1
 586:	5c c0       	rjmp	.+184    	; 0x640 <DIO_Write_Pin+0xe8>
		{
			PORTA &= ~(1<<PinNumber) ;
 588:	2b b3       	in	r18, 0x1b	; 27
 58a:	81 e0       	ldi	r24, 0x01	; 1
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	02 c0       	rjmp	.+4      	; 0x594 <DIO_Write_Pin+0x3c>
 590:	88 0f       	add	r24, r24
 592:	99 1f       	adc	r25, r25
 594:	6a 95       	dec	r22
 596:	e2 f7       	brpl	.-8      	; 0x590 <DIO_Write_Pin+0x38>
 598:	80 95       	com	r24
 59a:	82 23       	and	r24, r18
 59c:	8b bb       	out	0x1b, r24	; 27
 59e:	08 95       	ret
		{
			//	Error Handling
		}
		break ;
		case PORT_B :
		if ( value == HIGH )
 5a0:	41 30       	cpi	r20, 0x01	; 1
 5a2:	59 f4       	brne	.+22     	; 0x5ba <DIO_Write_Pin+0x62>
		{
			PORTB |= (1<<PinNumber) ;
 5a4:	28 b3       	in	r18, 0x18	; 24
 5a6:	81 e0       	ldi	r24, 0x01	; 1
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <DIO_Write_Pin+0x58>
 5ac:	88 0f       	add	r24, r24
 5ae:	99 1f       	adc	r25, r25
 5b0:	6a 95       	dec	r22
 5b2:	e2 f7       	brpl	.-8      	; 0x5ac <DIO_Write_Pin+0x54>
 5b4:	82 2b       	or	r24, r18
 5b6:	88 bb       	out	0x18, r24	; 24
 5b8:	08 95       	ret
		}
		else if ( value == LOW )
 5ba:	41 11       	cpse	r20, r1
 5bc:	41 c0       	rjmp	.+130    	; 0x640 <DIO_Write_Pin+0xe8>
		{
			PORTB &= ~(1<<PinNumber) ;
 5be:	28 b3       	in	r18, 0x18	; 24
 5c0:	81 e0       	ldi	r24, 0x01	; 1
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	02 c0       	rjmp	.+4      	; 0x5ca <DIO_Write_Pin+0x72>
 5c6:	88 0f       	add	r24, r24
 5c8:	99 1f       	adc	r25, r25
 5ca:	6a 95       	dec	r22
 5cc:	e2 f7       	brpl	.-8      	; 0x5c6 <DIO_Write_Pin+0x6e>
 5ce:	80 95       	com	r24
 5d0:	82 23       	and	r24, r18
 5d2:	88 bb       	out	0x18, r24	; 24
 5d4:	08 95       	ret
		{
			//	Error Handling
		}
		break ;
		case PORT_C :
		if ( value == HIGH )
 5d6:	41 30       	cpi	r20, 0x01	; 1
 5d8:	59 f4       	brne	.+22     	; 0x5f0 <DIO_Write_Pin+0x98>
		{
			PORTC |= (1<<PinNumber) ;
 5da:	25 b3       	in	r18, 0x15	; 21
 5dc:	81 e0       	ldi	r24, 0x01	; 1
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	02 c0       	rjmp	.+4      	; 0x5e6 <DIO_Write_Pin+0x8e>
 5e2:	88 0f       	add	r24, r24
 5e4:	99 1f       	adc	r25, r25
 5e6:	6a 95       	dec	r22
 5e8:	e2 f7       	brpl	.-8      	; 0x5e2 <DIO_Write_Pin+0x8a>
 5ea:	82 2b       	or	r24, r18
 5ec:	85 bb       	out	0x15, r24	; 21
 5ee:	08 95       	ret
		}
		else if ( value == LOW )
 5f0:	41 11       	cpse	r20, r1
 5f2:	26 c0       	rjmp	.+76     	; 0x640 <DIO_Write_Pin+0xe8>
		{
			PORTC &= ~(1<<PinNumber) ;
 5f4:	25 b3       	in	r18, 0x15	; 21
 5f6:	81 e0       	ldi	r24, 0x01	; 1
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	02 c0       	rjmp	.+4      	; 0x600 <DIO_Write_Pin+0xa8>
 5fc:	88 0f       	add	r24, r24
 5fe:	99 1f       	adc	r25, r25
 600:	6a 95       	dec	r22
 602:	e2 f7       	brpl	.-8      	; 0x5fc <DIO_Write_Pin+0xa4>
 604:	80 95       	com	r24
 606:	82 23       	and	r24, r18
 608:	85 bb       	out	0x15, r24	; 21
 60a:	08 95       	ret
		{
			//	Error Handling
		}
		break ;
		case PORT_D :
		if ( value == HIGH )
 60c:	41 30       	cpi	r20, 0x01	; 1
 60e:	59 f4       	brne	.+22     	; 0x626 <DIO_Write_Pin+0xce>
		{
			PORTD |= (1<<PinNumber) ;
 610:	22 b3       	in	r18, 0x12	; 18
 612:	81 e0       	ldi	r24, 0x01	; 1
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	02 c0       	rjmp	.+4      	; 0x61c <DIO_Write_Pin+0xc4>
 618:	88 0f       	add	r24, r24
 61a:	99 1f       	adc	r25, r25
 61c:	6a 95       	dec	r22
 61e:	e2 f7       	brpl	.-8      	; 0x618 <DIO_Write_Pin+0xc0>
 620:	82 2b       	or	r24, r18
 622:	82 bb       	out	0x12, r24	; 18
 624:	08 95       	ret
		}
		else if ( value == LOW )
 626:	41 11       	cpse	r20, r1
 628:	0b c0       	rjmp	.+22     	; 0x640 <DIO_Write_Pin+0xe8>
		{
			PORTD &= ~(1<<PinNumber) ;
 62a:	22 b3       	in	r18, 0x12	; 18
 62c:	81 e0       	ldi	r24, 0x01	; 1
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	02 c0       	rjmp	.+4      	; 0x636 <DIO_Write_Pin+0xde>
 632:	88 0f       	add	r24, r24
 634:	99 1f       	adc	r25, r25
 636:	6a 95       	dec	r22
 638:	e2 f7       	brpl	.-8      	; 0x632 <DIO_Write_Pin+0xda>
 63a:	80 95       	com	r24
 63c:	82 23       	and	r24, r18
 63e:	82 bb       	out	0x12, r24	; 18
 640:	08 95       	ret

00000642 <__vector_1>:
			break;
	}
}
/*******************************ISR********************************/
ISR(INT0_vect)
{
 642:	1f 92       	push	r1
 644:	0f 92       	push	r0
 646:	0f b6       	in	r0, 0x3f	; 63
 648:	0f 92       	push	r0
 64a:	11 24       	eor	r1, r1
 64c:	2f 93       	push	r18
 64e:	3f 93       	push	r19
 650:	4f 93       	push	r20
 652:	5f 93       	push	r21
 654:	6f 93       	push	r22
 656:	7f 93       	push	r23
 658:	8f 93       	push	r24
 65a:	9f 93       	push	r25
 65c:	af 93       	push	r26
 65e:	bf 93       	push	r27
 660:	ef 93       	push	r30
 662:	ff 93       	push	r31
	if (INT0_Fptr!=NULL)
 664:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <INT0_Fptr>
 668:	f0 91 6a 00 	lds	r31, 0x006A	; 0x80006a <INT0_Fptr+0x1>
 66c:	30 97       	sbiw	r30, 0x00	; 0
 66e:	09 f0       	breq	.+2      	; 0x672 <__vector_1+0x30>
	{
		INT0_Fptr();
 670:	09 95       	icall
	}
}
 672:	ff 91       	pop	r31
 674:	ef 91       	pop	r30
 676:	bf 91       	pop	r27
 678:	af 91       	pop	r26
 67a:	9f 91       	pop	r25
 67c:	8f 91       	pop	r24
 67e:	7f 91       	pop	r23
 680:	6f 91       	pop	r22
 682:	5f 91       	pop	r21
 684:	4f 91       	pop	r20
 686:	3f 91       	pop	r19
 688:	2f 91       	pop	r18
 68a:	0f 90       	pop	r0
 68c:	0f be       	out	0x3f, r0	; 63
 68e:	0f 90       	pop	r0
 690:	1f 90       	pop	r1
 692:	18 95       	reti

00000694 <__vector_2>:
ISR(INT1_vect)
{
 694:	1f 92       	push	r1
 696:	0f 92       	push	r0
 698:	0f b6       	in	r0, 0x3f	; 63
 69a:	0f 92       	push	r0
 69c:	11 24       	eor	r1, r1
 69e:	2f 93       	push	r18
 6a0:	3f 93       	push	r19
 6a2:	4f 93       	push	r20
 6a4:	5f 93       	push	r21
 6a6:	6f 93       	push	r22
 6a8:	7f 93       	push	r23
 6aa:	8f 93       	push	r24
 6ac:	9f 93       	push	r25
 6ae:	af 93       	push	r26
 6b0:	bf 93       	push	r27
 6b2:	ef 93       	push	r30
 6b4:	ff 93       	push	r31
	if (INT1_Fptr!=NULL)
 6b6:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <INT1_Fptr>
 6ba:	f0 91 68 00 	lds	r31, 0x0068	; 0x800068 <INT1_Fptr+0x1>
 6be:	30 97       	sbiw	r30, 0x00	; 0
 6c0:	09 f0       	breq	.+2      	; 0x6c4 <__vector_2+0x30>
	{
		INT1_Fptr();
 6c2:	09 95       	icall
	}
}
 6c4:	ff 91       	pop	r31
 6c6:	ef 91       	pop	r30
 6c8:	bf 91       	pop	r27
 6ca:	af 91       	pop	r26
 6cc:	9f 91       	pop	r25
 6ce:	8f 91       	pop	r24
 6d0:	7f 91       	pop	r23
 6d2:	6f 91       	pop	r22
 6d4:	5f 91       	pop	r21
 6d6:	4f 91       	pop	r20
 6d8:	3f 91       	pop	r19
 6da:	2f 91       	pop	r18
 6dc:	0f 90       	pop	r0
 6de:	0f be       	out	0x3f, r0	; 63
 6e0:	0f 90       	pop	r0
 6e2:	1f 90       	pop	r1
 6e4:	18 95       	reti

000006e6 <__vector_3>:
ISR(INT2_vect)
{
 6e6:	1f 92       	push	r1
 6e8:	0f 92       	push	r0
 6ea:	0f b6       	in	r0, 0x3f	; 63
 6ec:	0f 92       	push	r0
 6ee:	11 24       	eor	r1, r1
 6f0:	2f 93       	push	r18
 6f2:	3f 93       	push	r19
 6f4:	4f 93       	push	r20
 6f6:	5f 93       	push	r21
 6f8:	6f 93       	push	r22
 6fa:	7f 93       	push	r23
 6fc:	8f 93       	push	r24
 6fe:	9f 93       	push	r25
 700:	af 93       	push	r26
 702:	bf 93       	push	r27
 704:	ef 93       	push	r30
 706:	ff 93       	push	r31
	if (INT2_Fptr!=NULL)
 708:	e0 91 65 00 	lds	r30, 0x0065	; 0x800065 <INT2_Fptr>
 70c:	f0 91 66 00 	lds	r31, 0x0066	; 0x800066 <INT2_Fptr+0x1>
 710:	30 97       	sbiw	r30, 0x00	; 0
 712:	09 f0       	breq	.+2      	; 0x716 <__vector_3+0x30>
	{
		INT2_Fptr();
 714:	09 95       	icall
	}
 716:	ff 91       	pop	r31
 718:	ef 91       	pop	r30
 71a:	bf 91       	pop	r27
 71c:	af 91       	pop	r26
 71e:	9f 91       	pop	r25
 720:	8f 91       	pop	r24
 722:	7f 91       	pop	r23
 724:	6f 91       	pop	r22
 726:	5f 91       	pop	r21
 728:	4f 91       	pop	r20
 72a:	3f 91       	pop	r19
 72c:	2f 91       	pop	r18
 72e:	0f 90       	pop	r0
 730:	0f be       	out	0x3f, r0	; 63
 732:	0f 90       	pop	r0
 734:	1f 90       	pop	r1
 736:	18 95       	reti

00000738 <__divsf3>:
 738:	0e 94 b0 03 	call	0x760	; 0x760 <__divsf3x>
 73c:	0c 94 91 04 	jmp	0x922	; 0x922 <__fp_round>
 740:	0e 94 8a 04 	call	0x914	; 0x914 <__fp_pscB>
 744:	58 f0       	brcs	.+22     	; 0x75c <__divsf3+0x24>
 746:	0e 94 83 04 	call	0x906	; 0x906 <__fp_pscA>
 74a:	40 f0       	brcs	.+16     	; 0x75c <__divsf3+0x24>
 74c:	29 f4       	brne	.+10     	; 0x758 <__divsf3+0x20>
 74e:	5f 3f       	cpi	r21, 0xFF	; 255
 750:	29 f0       	breq	.+10     	; 0x75c <__divsf3+0x24>
 752:	0c 94 7a 04 	jmp	0x8f4	; 0x8f4 <__fp_inf>
 756:	51 11       	cpse	r21, r1
 758:	0c 94 c5 04 	jmp	0x98a	; 0x98a <__fp_szero>
 75c:	0c 94 80 04 	jmp	0x900	; 0x900 <__fp_nan>

00000760 <__divsf3x>:
 760:	0e 94 a2 04 	call	0x944	; 0x944 <__fp_split3>
 764:	68 f3       	brcs	.-38     	; 0x740 <__divsf3+0x8>

00000766 <__divsf3_pse>:
 766:	99 23       	and	r25, r25
 768:	b1 f3       	breq	.-20     	; 0x756 <__divsf3+0x1e>
 76a:	55 23       	and	r21, r21
 76c:	91 f3       	breq	.-28     	; 0x752 <__divsf3+0x1a>
 76e:	95 1b       	sub	r25, r21
 770:	55 0b       	sbc	r21, r21
 772:	bb 27       	eor	r27, r27
 774:	aa 27       	eor	r26, r26
 776:	62 17       	cp	r22, r18
 778:	73 07       	cpc	r23, r19
 77a:	84 07       	cpc	r24, r20
 77c:	38 f0       	brcs	.+14     	; 0x78c <__divsf3_pse+0x26>
 77e:	9f 5f       	subi	r25, 0xFF	; 255
 780:	5f 4f       	sbci	r21, 0xFF	; 255
 782:	22 0f       	add	r18, r18
 784:	33 1f       	adc	r19, r19
 786:	44 1f       	adc	r20, r20
 788:	aa 1f       	adc	r26, r26
 78a:	a9 f3       	breq	.-22     	; 0x776 <__divsf3_pse+0x10>
 78c:	35 d0       	rcall	.+106    	; 0x7f8 <__divsf3_pse+0x92>
 78e:	0e 2e       	mov	r0, r30
 790:	3a f0       	brmi	.+14     	; 0x7a0 <__divsf3_pse+0x3a>
 792:	e0 e8       	ldi	r30, 0x80	; 128
 794:	32 d0       	rcall	.+100    	; 0x7fa <__divsf3_pse+0x94>
 796:	91 50       	subi	r25, 0x01	; 1
 798:	50 40       	sbci	r21, 0x00	; 0
 79a:	e6 95       	lsr	r30
 79c:	00 1c       	adc	r0, r0
 79e:	ca f7       	brpl	.-14     	; 0x792 <__divsf3_pse+0x2c>
 7a0:	2b d0       	rcall	.+86     	; 0x7f8 <__divsf3_pse+0x92>
 7a2:	fe 2f       	mov	r31, r30
 7a4:	29 d0       	rcall	.+82     	; 0x7f8 <__divsf3_pse+0x92>
 7a6:	66 0f       	add	r22, r22
 7a8:	77 1f       	adc	r23, r23
 7aa:	88 1f       	adc	r24, r24
 7ac:	bb 1f       	adc	r27, r27
 7ae:	26 17       	cp	r18, r22
 7b0:	37 07       	cpc	r19, r23
 7b2:	48 07       	cpc	r20, r24
 7b4:	ab 07       	cpc	r26, r27
 7b6:	b0 e8       	ldi	r27, 0x80	; 128
 7b8:	09 f0       	breq	.+2      	; 0x7bc <__divsf3_pse+0x56>
 7ba:	bb 0b       	sbc	r27, r27
 7bc:	80 2d       	mov	r24, r0
 7be:	bf 01       	movw	r22, r30
 7c0:	ff 27       	eor	r31, r31
 7c2:	93 58       	subi	r25, 0x83	; 131
 7c4:	5f 4f       	sbci	r21, 0xFF	; 255
 7c6:	3a f0       	brmi	.+14     	; 0x7d6 <__divsf3_pse+0x70>
 7c8:	9e 3f       	cpi	r25, 0xFE	; 254
 7ca:	51 05       	cpc	r21, r1
 7cc:	78 f0       	brcs	.+30     	; 0x7ec <__divsf3_pse+0x86>
 7ce:	0c 94 7a 04 	jmp	0x8f4	; 0x8f4 <__fp_inf>
 7d2:	0c 94 c5 04 	jmp	0x98a	; 0x98a <__fp_szero>
 7d6:	5f 3f       	cpi	r21, 0xFF	; 255
 7d8:	e4 f3       	brlt	.-8      	; 0x7d2 <__divsf3_pse+0x6c>
 7da:	98 3e       	cpi	r25, 0xE8	; 232
 7dc:	d4 f3       	brlt	.-12     	; 0x7d2 <__divsf3_pse+0x6c>
 7de:	86 95       	lsr	r24
 7e0:	77 95       	ror	r23
 7e2:	67 95       	ror	r22
 7e4:	b7 95       	ror	r27
 7e6:	f7 95       	ror	r31
 7e8:	9f 5f       	subi	r25, 0xFF	; 255
 7ea:	c9 f7       	brne	.-14     	; 0x7de <__divsf3_pse+0x78>
 7ec:	88 0f       	add	r24, r24
 7ee:	91 1d       	adc	r25, r1
 7f0:	96 95       	lsr	r25
 7f2:	87 95       	ror	r24
 7f4:	97 f9       	bld	r25, 7
 7f6:	08 95       	ret
 7f8:	e1 e0       	ldi	r30, 0x01	; 1
 7fa:	66 0f       	add	r22, r22
 7fc:	77 1f       	adc	r23, r23
 7fe:	88 1f       	adc	r24, r24
 800:	bb 1f       	adc	r27, r27
 802:	62 17       	cp	r22, r18
 804:	73 07       	cpc	r23, r19
 806:	84 07       	cpc	r24, r20
 808:	ba 07       	cpc	r27, r26
 80a:	20 f0       	brcs	.+8      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 80c:	62 1b       	sub	r22, r18
 80e:	73 0b       	sbc	r23, r19
 810:	84 0b       	sbc	r24, r20
 812:	ba 0b       	sbc	r27, r26
 814:	ee 1f       	adc	r30, r30
 816:	88 f7       	brcc	.-30     	; 0x7fa <__divsf3_pse+0x94>
 818:	e0 95       	com	r30
 81a:	08 95       	ret

0000081c <__fixunssfsi>:
 81c:	0e 94 aa 04 	call	0x954	; 0x954 <__fp_splitA>
 820:	88 f0       	brcs	.+34     	; 0x844 <__fixunssfsi+0x28>
 822:	9f 57       	subi	r25, 0x7F	; 127
 824:	98 f0       	brcs	.+38     	; 0x84c <__fixunssfsi+0x30>
 826:	b9 2f       	mov	r27, r25
 828:	99 27       	eor	r25, r25
 82a:	b7 51       	subi	r27, 0x17	; 23
 82c:	b0 f0       	brcs	.+44     	; 0x85a <__fixunssfsi+0x3e>
 82e:	e1 f0       	breq	.+56     	; 0x868 <__stack+0x9>
 830:	66 0f       	add	r22, r22
 832:	77 1f       	adc	r23, r23
 834:	88 1f       	adc	r24, r24
 836:	99 1f       	adc	r25, r25
 838:	1a f0       	brmi	.+6      	; 0x840 <__fixunssfsi+0x24>
 83a:	ba 95       	dec	r27
 83c:	c9 f7       	brne	.-14     	; 0x830 <__fixunssfsi+0x14>
 83e:	14 c0       	rjmp	.+40     	; 0x868 <__stack+0x9>
 840:	b1 30       	cpi	r27, 0x01	; 1
 842:	91 f0       	breq	.+36     	; 0x868 <__stack+0x9>
 844:	0e 94 c4 04 	call	0x988	; 0x988 <__fp_zero>
 848:	b1 e0       	ldi	r27, 0x01	; 1
 84a:	08 95       	ret
 84c:	0c 94 c4 04 	jmp	0x988	; 0x988 <__fp_zero>
 850:	67 2f       	mov	r22, r23
 852:	78 2f       	mov	r23, r24
 854:	88 27       	eor	r24, r24
 856:	b8 5f       	subi	r27, 0xF8	; 248
 858:	39 f0       	breq	.+14     	; 0x868 <__stack+0x9>
 85a:	b9 3f       	cpi	r27, 0xF9	; 249
 85c:	cc f3       	brlt	.-14     	; 0x850 <__fixunssfsi+0x34>
 85e:	86 95       	lsr	r24
 860:	77 95       	ror	r23
 862:	67 95       	ror	r22
 864:	b3 95       	inc	r27
 866:	d9 f7       	brne	.-10     	; 0x85e <__fixunssfsi+0x42>
 868:	3e f4       	brtc	.+14     	; 0x878 <__stack+0x19>
 86a:	90 95       	com	r25
 86c:	80 95       	com	r24
 86e:	70 95       	com	r23
 870:	61 95       	neg	r22
 872:	7f 4f       	sbci	r23, 0xFF	; 255
 874:	8f 4f       	sbci	r24, 0xFF	; 255
 876:	9f 4f       	sbci	r25, 0xFF	; 255
 878:	08 95       	ret

0000087a <__floatunsisf>:
 87a:	e8 94       	clt
 87c:	09 c0       	rjmp	.+18     	; 0x890 <__floatsisf+0x12>

0000087e <__floatsisf>:
 87e:	97 fb       	bst	r25, 7
 880:	3e f4       	brtc	.+14     	; 0x890 <__floatsisf+0x12>
 882:	90 95       	com	r25
 884:	80 95       	com	r24
 886:	70 95       	com	r23
 888:	61 95       	neg	r22
 88a:	7f 4f       	sbci	r23, 0xFF	; 255
 88c:	8f 4f       	sbci	r24, 0xFF	; 255
 88e:	9f 4f       	sbci	r25, 0xFF	; 255
 890:	99 23       	and	r25, r25
 892:	a9 f0       	breq	.+42     	; 0x8be <__floatsisf+0x40>
 894:	f9 2f       	mov	r31, r25
 896:	96 e9       	ldi	r25, 0x96	; 150
 898:	bb 27       	eor	r27, r27
 89a:	93 95       	inc	r25
 89c:	f6 95       	lsr	r31
 89e:	87 95       	ror	r24
 8a0:	77 95       	ror	r23
 8a2:	67 95       	ror	r22
 8a4:	b7 95       	ror	r27
 8a6:	f1 11       	cpse	r31, r1
 8a8:	f8 cf       	rjmp	.-16     	; 0x89a <__floatsisf+0x1c>
 8aa:	fa f4       	brpl	.+62     	; 0x8ea <__floatsisf+0x6c>
 8ac:	bb 0f       	add	r27, r27
 8ae:	11 f4       	brne	.+4      	; 0x8b4 <__floatsisf+0x36>
 8b0:	60 ff       	sbrs	r22, 0
 8b2:	1b c0       	rjmp	.+54     	; 0x8ea <__floatsisf+0x6c>
 8b4:	6f 5f       	subi	r22, 0xFF	; 255
 8b6:	7f 4f       	sbci	r23, 0xFF	; 255
 8b8:	8f 4f       	sbci	r24, 0xFF	; 255
 8ba:	9f 4f       	sbci	r25, 0xFF	; 255
 8bc:	16 c0       	rjmp	.+44     	; 0x8ea <__floatsisf+0x6c>
 8be:	88 23       	and	r24, r24
 8c0:	11 f0       	breq	.+4      	; 0x8c6 <__floatsisf+0x48>
 8c2:	96 e9       	ldi	r25, 0x96	; 150
 8c4:	11 c0       	rjmp	.+34     	; 0x8e8 <__floatsisf+0x6a>
 8c6:	77 23       	and	r23, r23
 8c8:	21 f0       	breq	.+8      	; 0x8d2 <__floatsisf+0x54>
 8ca:	9e e8       	ldi	r25, 0x8E	; 142
 8cc:	87 2f       	mov	r24, r23
 8ce:	76 2f       	mov	r23, r22
 8d0:	05 c0       	rjmp	.+10     	; 0x8dc <__floatsisf+0x5e>
 8d2:	66 23       	and	r22, r22
 8d4:	71 f0       	breq	.+28     	; 0x8f2 <__floatsisf+0x74>
 8d6:	96 e8       	ldi	r25, 0x86	; 134
 8d8:	86 2f       	mov	r24, r22
 8da:	70 e0       	ldi	r23, 0x00	; 0
 8dc:	60 e0       	ldi	r22, 0x00	; 0
 8de:	2a f0       	brmi	.+10     	; 0x8ea <__floatsisf+0x6c>
 8e0:	9a 95       	dec	r25
 8e2:	66 0f       	add	r22, r22
 8e4:	77 1f       	adc	r23, r23
 8e6:	88 1f       	adc	r24, r24
 8e8:	da f7       	brpl	.-10     	; 0x8e0 <__floatsisf+0x62>
 8ea:	88 0f       	add	r24, r24
 8ec:	96 95       	lsr	r25
 8ee:	87 95       	ror	r24
 8f0:	97 f9       	bld	r25, 7
 8f2:	08 95       	ret

000008f4 <__fp_inf>:
 8f4:	97 f9       	bld	r25, 7
 8f6:	9f 67       	ori	r25, 0x7F	; 127
 8f8:	80 e8       	ldi	r24, 0x80	; 128
 8fa:	70 e0       	ldi	r23, 0x00	; 0
 8fc:	60 e0       	ldi	r22, 0x00	; 0
 8fe:	08 95       	ret

00000900 <__fp_nan>:
 900:	9f ef       	ldi	r25, 0xFF	; 255
 902:	80 ec       	ldi	r24, 0xC0	; 192
 904:	08 95       	ret

00000906 <__fp_pscA>:
 906:	00 24       	eor	r0, r0
 908:	0a 94       	dec	r0
 90a:	16 16       	cp	r1, r22
 90c:	17 06       	cpc	r1, r23
 90e:	18 06       	cpc	r1, r24
 910:	09 06       	cpc	r0, r25
 912:	08 95       	ret

00000914 <__fp_pscB>:
 914:	00 24       	eor	r0, r0
 916:	0a 94       	dec	r0
 918:	12 16       	cp	r1, r18
 91a:	13 06       	cpc	r1, r19
 91c:	14 06       	cpc	r1, r20
 91e:	05 06       	cpc	r0, r21
 920:	08 95       	ret

00000922 <__fp_round>:
 922:	09 2e       	mov	r0, r25
 924:	03 94       	inc	r0
 926:	00 0c       	add	r0, r0
 928:	11 f4       	brne	.+4      	; 0x92e <__fp_round+0xc>
 92a:	88 23       	and	r24, r24
 92c:	52 f0       	brmi	.+20     	; 0x942 <__fp_round+0x20>
 92e:	bb 0f       	add	r27, r27
 930:	40 f4       	brcc	.+16     	; 0x942 <__fp_round+0x20>
 932:	bf 2b       	or	r27, r31
 934:	11 f4       	brne	.+4      	; 0x93a <__fp_round+0x18>
 936:	60 ff       	sbrs	r22, 0
 938:	04 c0       	rjmp	.+8      	; 0x942 <__fp_round+0x20>
 93a:	6f 5f       	subi	r22, 0xFF	; 255
 93c:	7f 4f       	sbci	r23, 0xFF	; 255
 93e:	8f 4f       	sbci	r24, 0xFF	; 255
 940:	9f 4f       	sbci	r25, 0xFF	; 255
 942:	08 95       	ret

00000944 <__fp_split3>:
 944:	57 fd       	sbrc	r21, 7
 946:	90 58       	subi	r25, 0x80	; 128
 948:	44 0f       	add	r20, r20
 94a:	55 1f       	adc	r21, r21
 94c:	59 f0       	breq	.+22     	; 0x964 <__fp_splitA+0x10>
 94e:	5f 3f       	cpi	r21, 0xFF	; 255
 950:	71 f0       	breq	.+28     	; 0x96e <__fp_splitA+0x1a>
 952:	47 95       	ror	r20

00000954 <__fp_splitA>:
 954:	88 0f       	add	r24, r24
 956:	97 fb       	bst	r25, 7
 958:	99 1f       	adc	r25, r25
 95a:	61 f0       	breq	.+24     	; 0x974 <__fp_splitA+0x20>
 95c:	9f 3f       	cpi	r25, 0xFF	; 255
 95e:	79 f0       	breq	.+30     	; 0x97e <__fp_splitA+0x2a>
 960:	87 95       	ror	r24
 962:	08 95       	ret
 964:	12 16       	cp	r1, r18
 966:	13 06       	cpc	r1, r19
 968:	14 06       	cpc	r1, r20
 96a:	55 1f       	adc	r21, r21
 96c:	f2 cf       	rjmp	.-28     	; 0x952 <__fp_split3+0xe>
 96e:	46 95       	lsr	r20
 970:	f1 df       	rcall	.-30     	; 0x954 <__fp_splitA>
 972:	08 c0       	rjmp	.+16     	; 0x984 <__fp_splitA+0x30>
 974:	16 16       	cp	r1, r22
 976:	17 06       	cpc	r1, r23
 978:	18 06       	cpc	r1, r24
 97a:	99 1f       	adc	r25, r25
 97c:	f1 cf       	rjmp	.-30     	; 0x960 <__fp_splitA+0xc>
 97e:	86 95       	lsr	r24
 980:	71 05       	cpc	r23, r1
 982:	61 05       	cpc	r22, r1
 984:	08 94       	sec
 986:	08 95       	ret

00000988 <__fp_zero>:
 988:	e8 94       	clt

0000098a <__fp_szero>:
 98a:	bb 27       	eor	r27, r27
 98c:	66 27       	eor	r22, r22
 98e:	77 27       	eor	r23, r23
 990:	cb 01       	movw	r24, r22
 992:	97 f9       	bld	r25, 7
 994:	08 95       	ret

00000996 <__mulsf3>:
 996:	0e 94 de 04 	call	0x9bc	; 0x9bc <__mulsf3x>
 99a:	0c 94 91 04 	jmp	0x922	; 0x922 <__fp_round>
 99e:	0e 94 83 04 	call	0x906	; 0x906 <__fp_pscA>
 9a2:	38 f0       	brcs	.+14     	; 0x9b2 <__mulsf3+0x1c>
 9a4:	0e 94 8a 04 	call	0x914	; 0x914 <__fp_pscB>
 9a8:	20 f0       	brcs	.+8      	; 0x9b2 <__mulsf3+0x1c>
 9aa:	95 23       	and	r25, r21
 9ac:	11 f0       	breq	.+4      	; 0x9b2 <__mulsf3+0x1c>
 9ae:	0c 94 7a 04 	jmp	0x8f4	; 0x8f4 <__fp_inf>
 9b2:	0c 94 80 04 	jmp	0x900	; 0x900 <__fp_nan>
 9b6:	11 24       	eor	r1, r1
 9b8:	0c 94 c5 04 	jmp	0x98a	; 0x98a <__fp_szero>

000009bc <__mulsf3x>:
 9bc:	0e 94 a2 04 	call	0x944	; 0x944 <__fp_split3>
 9c0:	70 f3       	brcs	.-36     	; 0x99e <__mulsf3+0x8>

000009c2 <__mulsf3_pse>:
 9c2:	95 9f       	mul	r25, r21
 9c4:	c1 f3       	breq	.-16     	; 0x9b6 <__mulsf3+0x20>
 9c6:	95 0f       	add	r25, r21
 9c8:	50 e0       	ldi	r21, 0x00	; 0
 9ca:	55 1f       	adc	r21, r21
 9cc:	62 9f       	mul	r22, r18
 9ce:	f0 01       	movw	r30, r0
 9d0:	72 9f       	mul	r23, r18
 9d2:	bb 27       	eor	r27, r27
 9d4:	f0 0d       	add	r31, r0
 9d6:	b1 1d       	adc	r27, r1
 9d8:	63 9f       	mul	r22, r19
 9da:	aa 27       	eor	r26, r26
 9dc:	f0 0d       	add	r31, r0
 9de:	b1 1d       	adc	r27, r1
 9e0:	aa 1f       	adc	r26, r26
 9e2:	64 9f       	mul	r22, r20
 9e4:	66 27       	eor	r22, r22
 9e6:	b0 0d       	add	r27, r0
 9e8:	a1 1d       	adc	r26, r1
 9ea:	66 1f       	adc	r22, r22
 9ec:	82 9f       	mul	r24, r18
 9ee:	22 27       	eor	r18, r18
 9f0:	b0 0d       	add	r27, r0
 9f2:	a1 1d       	adc	r26, r1
 9f4:	62 1f       	adc	r22, r18
 9f6:	73 9f       	mul	r23, r19
 9f8:	b0 0d       	add	r27, r0
 9fa:	a1 1d       	adc	r26, r1
 9fc:	62 1f       	adc	r22, r18
 9fe:	83 9f       	mul	r24, r19
 a00:	a0 0d       	add	r26, r0
 a02:	61 1d       	adc	r22, r1
 a04:	22 1f       	adc	r18, r18
 a06:	74 9f       	mul	r23, r20
 a08:	33 27       	eor	r19, r19
 a0a:	a0 0d       	add	r26, r0
 a0c:	61 1d       	adc	r22, r1
 a0e:	23 1f       	adc	r18, r19
 a10:	84 9f       	mul	r24, r20
 a12:	60 0d       	add	r22, r0
 a14:	21 1d       	adc	r18, r1
 a16:	82 2f       	mov	r24, r18
 a18:	76 2f       	mov	r23, r22
 a1a:	6a 2f       	mov	r22, r26
 a1c:	11 24       	eor	r1, r1
 a1e:	9f 57       	subi	r25, 0x7F	; 127
 a20:	50 40       	sbci	r21, 0x00	; 0
 a22:	9a f0       	brmi	.+38     	; 0xa4a <__mulsf3_pse+0x88>
 a24:	f1 f0       	breq	.+60     	; 0xa62 <__mulsf3_pse+0xa0>
 a26:	88 23       	and	r24, r24
 a28:	4a f0       	brmi	.+18     	; 0xa3c <__mulsf3_pse+0x7a>
 a2a:	ee 0f       	add	r30, r30
 a2c:	ff 1f       	adc	r31, r31
 a2e:	bb 1f       	adc	r27, r27
 a30:	66 1f       	adc	r22, r22
 a32:	77 1f       	adc	r23, r23
 a34:	88 1f       	adc	r24, r24
 a36:	91 50       	subi	r25, 0x01	; 1
 a38:	50 40       	sbci	r21, 0x00	; 0
 a3a:	a9 f7       	brne	.-22     	; 0xa26 <__mulsf3_pse+0x64>
 a3c:	9e 3f       	cpi	r25, 0xFE	; 254
 a3e:	51 05       	cpc	r21, r1
 a40:	80 f0       	brcs	.+32     	; 0xa62 <__mulsf3_pse+0xa0>
 a42:	0c 94 7a 04 	jmp	0x8f4	; 0x8f4 <__fp_inf>
 a46:	0c 94 c5 04 	jmp	0x98a	; 0x98a <__fp_szero>
 a4a:	5f 3f       	cpi	r21, 0xFF	; 255
 a4c:	e4 f3       	brlt	.-8      	; 0xa46 <__mulsf3_pse+0x84>
 a4e:	98 3e       	cpi	r25, 0xE8	; 232
 a50:	d4 f3       	brlt	.-12     	; 0xa46 <__mulsf3_pse+0x84>
 a52:	86 95       	lsr	r24
 a54:	77 95       	ror	r23
 a56:	67 95       	ror	r22
 a58:	b7 95       	ror	r27
 a5a:	f7 95       	ror	r31
 a5c:	e7 95       	ror	r30
 a5e:	9f 5f       	subi	r25, 0xFF	; 255
 a60:	c1 f7       	brne	.-16     	; 0xa52 <__mulsf3_pse+0x90>
 a62:	fe 2b       	or	r31, r30
 a64:	88 0f       	add	r24, r24
 a66:	91 1d       	adc	r25, r1
 a68:	96 95       	lsr	r25
 a6a:	87 95       	ror	r24
 a6c:	97 f9       	bld	r25, 7
 a6e:	08 95       	ret

00000a70 <__umulhisi3>:
 a70:	a2 9f       	mul	r26, r18
 a72:	b0 01       	movw	r22, r0
 a74:	b3 9f       	mul	r27, r19
 a76:	c0 01       	movw	r24, r0
 a78:	a3 9f       	mul	r26, r19
 a7a:	70 0d       	add	r23, r0
 a7c:	81 1d       	adc	r24, r1
 a7e:	11 24       	eor	r1, r1
 a80:	91 1d       	adc	r25, r1
 a82:	b2 9f       	mul	r27, r18
 a84:	70 0d       	add	r23, r0
 a86:	81 1d       	adc	r24, r1
 a88:	11 24       	eor	r1, r1
 a8a:	91 1d       	adc	r25, r1
 a8c:	08 95       	ret

00000a8e <_exit>:
 a8e:	f8 94       	cli

00000a90 <__stop_program>:
 a90:	ff cf       	rjmp	.-2      	; 0xa90 <__stop_program>
