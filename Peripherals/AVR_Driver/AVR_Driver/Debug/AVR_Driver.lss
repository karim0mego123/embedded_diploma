
AVR_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000314  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000388  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800060  00800060  00000388  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  000003f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d9d  00000000  00000000  000004fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000826  00000000  00000000  00001299  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000971  00000000  00000000  00001abf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000278  00000000  00000000  00002430  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000066a  00000000  00000000  000026a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000084f  00000000  00000000  00002d12  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00003561  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__vector_1>
   8:	0c 94 05 01 	jmp	0x20a	; 0x20a <__vector_2>
   c:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e1       	ldi	r30, 0x14	; 20
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 36       	cpi	r26, 0x66	; 102
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 88 01 	jmp	0x310	; 0x310 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
//2#define SLAVE

int main()
{
	#ifdef MASTER
	MCAL_SPI_Set_Pins_Master();
  92:	0e 94 73 01 	call	0x2e6	; 0x2e6 <MCAL_SPI_Set_Pins_Master>

	#ifdef SLAVE
	MCAL_SPI_Set_Pins_SLAVE();
	#endif
		
	DDRA = 0xFF ; 
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	8a bb       	out	0x1a, r24	; 26
	MCAL_SPI_Init();
  9a:	0e 94 57 01 	call	0x2ae	; 0x2ae <MCAL_SPI_Init>
	while(1)
	{
		#ifdef MASTER
		uint8_t DataSend1 ; 
		for (DataSend1 = 0 ; DataSend1<=7 ; DataSend1++)
  9e:	c0 e0       	ldi	r28, 0x00	; 0
  a0:	13 c0       	rjmp	.+38     	; 0xc8 <main+0x36>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	2f e3       	ldi	r18, 0x3F	; 63
  a4:	8d e0       	ldi	r24, 0x0D	; 13
  a6:	93 e0       	ldi	r25, 0x03	; 3
  a8:	21 50       	subi	r18, 0x01	; 1
  aa:	80 40       	sbci	r24, 0x00	; 0
  ac:	90 40       	sbci	r25, 0x00	; 0
  ae:	e1 f7       	brne	.-8      	; 0xa8 <main+0x16>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <main+0x20>
  b2:	00 00       	nop
		{
			_delay_ms(1000);
			PORTA = MCAL_SPI_Send_Data((1<<DataSend1));
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	0c 2e       	mov	r0, r28
  b8:	01 c0       	rjmp	.+2      	; 0xbc <main+0x2a>
  ba:	88 0f       	add	r24, r24
  bc:	0a 94       	dec	r0
  be:	ea f7       	brpl	.-6      	; 0xba <main+0x28>
  c0:	0e 94 6e 01 	call	0x2dc	; 0x2dc <MCAL_SPI_Send_Data>
  c4:	8b bb       	out	0x1b, r24	; 27
	MCAL_SPI_Init();
	while(1)
	{
		#ifdef MASTER
		uint8_t DataSend1 ; 
		for (DataSend1 = 0 ; DataSend1<=7 ; DataSend1++)
  c6:	cf 5f       	subi	r28, 0xFF	; 255
  c8:	c8 30       	cpi	r28, 0x08	; 8
  ca:	58 f3       	brcs	.-42     	; 0xa2 <main+0x10>
  cc:	e8 cf       	rjmp	.-48     	; 0x9e <main+0xc>

000000ce <DIO_Write_Pin_Dir>:
 */ 

#include "DIO.h"
void DIO_Write_Pin_Dir( GPIO_PORT_t PortNumber , GPIO_PIN_t PinNumber , uint8_t Direction ) 
{
	switch( PortNumber )
  ce:	81 30       	cpi	r24, 0x01	; 1
  d0:	11 f1       	breq	.+68     	; 0x116 <DIO_Write_Pin_Dir+0x48>
  d2:	30 f0       	brcs	.+12     	; 0xe0 <DIO_Write_Pin_Dir+0x12>
  d4:	82 30       	cpi	r24, 0x02	; 2
  d6:	d1 f1       	breq	.+116    	; 0x14c <DIO_Write_Pin_Dir+0x7e>
  d8:	83 30       	cpi	r24, 0x03	; 3
  da:	09 f4       	brne	.+2      	; 0xde <DIO_Write_Pin_Dir+0x10>
  dc:	52 c0       	rjmp	.+164    	; 0x182 <DIO_Write_Pin_Dir+0xb4>
  de:	08 95       	ret
	{
		case PORT_A :
		if ( Direction == OUT )
  e0:	41 30       	cpi	r20, 0x01	; 1
  e2:	59 f4       	brne	.+22     	; 0xfa <DIO_Write_Pin_Dir+0x2c>
		{
			DDRA |= (1<<PinNumber) ;
  e4:	2a b3       	in	r18, 0x1a	; 26
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <DIO_Write_Pin_Dir+0x22>
  ec:	88 0f       	add	r24, r24
  ee:	99 1f       	adc	r25, r25
  f0:	6a 95       	dec	r22
  f2:	e2 f7       	brpl	.-8      	; 0xec <DIO_Write_Pin_Dir+0x1e>
  f4:	82 2b       	or	r24, r18
  f6:	8a bb       	out	0x1a, r24	; 26
  f8:	08 95       	ret
		}
		else if ( Direction == IN )
  fa:	41 11       	cpse	r20, r1
  fc:	5c c0       	rjmp	.+184    	; 0x1b6 <DIO_Write_Pin_Dir+0xe8>
		{
			DDRA &= ~(1<<PinNumber) ;
  fe:	2a b3       	in	r18, 0x1a	; 26
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	02 c0       	rjmp	.+4      	; 0x10a <DIO_Write_Pin_Dir+0x3c>
 106:	88 0f       	add	r24, r24
 108:	99 1f       	adc	r25, r25
 10a:	6a 95       	dec	r22
 10c:	e2 f7       	brpl	.-8      	; 0x106 <DIO_Write_Pin_Dir+0x38>
 10e:	80 95       	com	r24
 110:	82 23       	and	r24, r18
 112:	8a bb       	out	0x1a, r24	; 26
 114:	08 95       	ret
		{
			//	Error Handling
		}
		break ;
		case PORT_B :
		if ( Direction == OUT )
 116:	41 30       	cpi	r20, 0x01	; 1
 118:	59 f4       	brne	.+22     	; 0x130 <DIO_Write_Pin_Dir+0x62>
		{
			DDRB |= (1<<PinNumber) ;
 11a:	27 b3       	in	r18, 0x17	; 23
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	02 c0       	rjmp	.+4      	; 0x126 <DIO_Write_Pin_Dir+0x58>
 122:	88 0f       	add	r24, r24
 124:	99 1f       	adc	r25, r25
 126:	6a 95       	dec	r22
 128:	e2 f7       	brpl	.-8      	; 0x122 <DIO_Write_Pin_Dir+0x54>
 12a:	82 2b       	or	r24, r18
 12c:	87 bb       	out	0x17, r24	; 23
 12e:	08 95       	ret
		}
		else if ( Direction == IN )
 130:	41 11       	cpse	r20, r1
 132:	41 c0       	rjmp	.+130    	; 0x1b6 <DIO_Write_Pin_Dir+0xe8>
		{
			DDRB &= ~(1<<PinNumber) ;
 134:	27 b3       	in	r18, 0x17	; 23
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	02 c0       	rjmp	.+4      	; 0x140 <DIO_Write_Pin_Dir+0x72>
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	6a 95       	dec	r22
 142:	e2 f7       	brpl	.-8      	; 0x13c <DIO_Write_Pin_Dir+0x6e>
 144:	80 95       	com	r24
 146:	82 23       	and	r24, r18
 148:	87 bb       	out	0x17, r24	; 23
 14a:	08 95       	ret
		{
			//	Error Handling
		}
		break ;
		case PORT_C :
		if ( Direction == OUT )
 14c:	41 30       	cpi	r20, 0x01	; 1
 14e:	59 f4       	brne	.+22     	; 0x166 <DIO_Write_Pin_Dir+0x98>
		{
			DDRC |= (1<<PinNumber) ;
 150:	24 b3       	in	r18, 0x14	; 20
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	02 c0       	rjmp	.+4      	; 0x15c <DIO_Write_Pin_Dir+0x8e>
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	6a 95       	dec	r22
 15e:	e2 f7       	brpl	.-8      	; 0x158 <DIO_Write_Pin_Dir+0x8a>
 160:	82 2b       	or	r24, r18
 162:	84 bb       	out	0x14, r24	; 20
 164:	08 95       	ret
		}
		else if ( Direction == IN )
 166:	41 11       	cpse	r20, r1
 168:	26 c0       	rjmp	.+76     	; 0x1b6 <DIO_Write_Pin_Dir+0xe8>
		{
			DDRC &= ~(1<<PinNumber) ;
 16a:	24 b3       	in	r18, 0x14	; 20
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	02 c0       	rjmp	.+4      	; 0x176 <DIO_Write_Pin_Dir+0xa8>
 172:	88 0f       	add	r24, r24
 174:	99 1f       	adc	r25, r25
 176:	6a 95       	dec	r22
 178:	e2 f7       	brpl	.-8      	; 0x172 <DIO_Write_Pin_Dir+0xa4>
 17a:	80 95       	com	r24
 17c:	82 23       	and	r24, r18
 17e:	84 bb       	out	0x14, r24	; 20
 180:	08 95       	ret
		{
			//	Error Handling
		}
		break ;
		case PORT_D :
		if ( Direction == OUT )
 182:	41 30       	cpi	r20, 0x01	; 1
 184:	59 f4       	brne	.+22     	; 0x19c <DIO_Write_Pin_Dir+0xce>
		{
			DDRD |= (1<<PinNumber) ;
 186:	21 b3       	in	r18, 0x11	; 17
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	02 c0       	rjmp	.+4      	; 0x192 <DIO_Write_Pin_Dir+0xc4>
 18e:	88 0f       	add	r24, r24
 190:	99 1f       	adc	r25, r25
 192:	6a 95       	dec	r22
 194:	e2 f7       	brpl	.-8      	; 0x18e <DIO_Write_Pin_Dir+0xc0>
 196:	82 2b       	or	r24, r18
 198:	81 bb       	out	0x11, r24	; 17
 19a:	08 95       	ret
		}
		else if ( Direction == IN )
 19c:	41 11       	cpse	r20, r1
 19e:	0b c0       	rjmp	.+22     	; 0x1b6 <DIO_Write_Pin_Dir+0xe8>
		{
			DDRD &= ~(1<<PinNumber) ;
 1a0:	21 b3       	in	r18, 0x11	; 17
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <DIO_Write_Pin_Dir+0xde>
 1a8:	88 0f       	add	r24, r24
 1aa:	99 1f       	adc	r25, r25
 1ac:	6a 95       	dec	r22
 1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <DIO_Write_Pin_Dir+0xda>
 1b0:	80 95       	com	r24
 1b2:	82 23       	and	r24, r18
 1b4:	81 bb       	out	0x11, r24	; 17
 1b6:	08 95       	ret

000001b8 <__vector_1>:
			break;
	}
}
/*******************************ISR********************************/
ISR(INT0_vect)
{
 1b8:	1f 92       	push	r1
 1ba:	0f 92       	push	r0
 1bc:	0f b6       	in	r0, 0x3f	; 63
 1be:	0f 92       	push	r0
 1c0:	11 24       	eor	r1, r1
 1c2:	2f 93       	push	r18
 1c4:	3f 93       	push	r19
 1c6:	4f 93       	push	r20
 1c8:	5f 93       	push	r21
 1ca:	6f 93       	push	r22
 1cc:	7f 93       	push	r23
 1ce:	8f 93       	push	r24
 1d0:	9f 93       	push	r25
 1d2:	af 93       	push	r26
 1d4:	bf 93       	push	r27
 1d6:	ef 93       	push	r30
 1d8:	ff 93       	push	r31
	if (INT0_Fptr!=NULLPTR)
 1da:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <INT0_Fptr>
 1de:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <INT0_Fptr+0x1>
 1e2:	30 97       	sbiw	r30, 0x00	; 0
 1e4:	09 f0       	breq	.+2      	; 0x1e8 <__vector_1+0x30>
	{
		INT0_Fptr();
 1e6:	09 95       	icall
	}
}
 1e8:	ff 91       	pop	r31
 1ea:	ef 91       	pop	r30
 1ec:	bf 91       	pop	r27
 1ee:	af 91       	pop	r26
 1f0:	9f 91       	pop	r25
 1f2:	8f 91       	pop	r24
 1f4:	7f 91       	pop	r23
 1f6:	6f 91       	pop	r22
 1f8:	5f 91       	pop	r21
 1fa:	4f 91       	pop	r20
 1fc:	3f 91       	pop	r19
 1fe:	2f 91       	pop	r18
 200:	0f 90       	pop	r0
 202:	0f be       	out	0x3f, r0	; 63
 204:	0f 90       	pop	r0
 206:	1f 90       	pop	r1
 208:	18 95       	reti

0000020a <__vector_2>:
ISR(INT1_vect)
{
 20a:	1f 92       	push	r1
 20c:	0f 92       	push	r0
 20e:	0f b6       	in	r0, 0x3f	; 63
 210:	0f 92       	push	r0
 212:	11 24       	eor	r1, r1
 214:	2f 93       	push	r18
 216:	3f 93       	push	r19
 218:	4f 93       	push	r20
 21a:	5f 93       	push	r21
 21c:	6f 93       	push	r22
 21e:	7f 93       	push	r23
 220:	8f 93       	push	r24
 222:	9f 93       	push	r25
 224:	af 93       	push	r26
 226:	bf 93       	push	r27
 228:	ef 93       	push	r30
 22a:	ff 93       	push	r31
	if (INT1_Fptr!=NULLPTR)
 22c:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <INT1_Fptr>
 230:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <INT1_Fptr+0x1>
 234:	30 97       	sbiw	r30, 0x00	; 0
 236:	09 f0       	breq	.+2      	; 0x23a <__vector_2+0x30>
	{
		INT1_Fptr();
 238:	09 95       	icall
	}
}
 23a:	ff 91       	pop	r31
 23c:	ef 91       	pop	r30
 23e:	bf 91       	pop	r27
 240:	af 91       	pop	r26
 242:	9f 91       	pop	r25
 244:	8f 91       	pop	r24
 246:	7f 91       	pop	r23
 248:	6f 91       	pop	r22
 24a:	5f 91       	pop	r21
 24c:	4f 91       	pop	r20
 24e:	3f 91       	pop	r19
 250:	2f 91       	pop	r18
 252:	0f 90       	pop	r0
 254:	0f be       	out	0x3f, r0	; 63
 256:	0f 90       	pop	r0
 258:	1f 90       	pop	r1
 25a:	18 95       	reti

0000025c <__vector_3>:
ISR(INT2_vect)
{
 25c:	1f 92       	push	r1
 25e:	0f 92       	push	r0
 260:	0f b6       	in	r0, 0x3f	; 63
 262:	0f 92       	push	r0
 264:	11 24       	eor	r1, r1
 266:	2f 93       	push	r18
 268:	3f 93       	push	r19
 26a:	4f 93       	push	r20
 26c:	5f 93       	push	r21
 26e:	6f 93       	push	r22
 270:	7f 93       	push	r23
 272:	8f 93       	push	r24
 274:	9f 93       	push	r25
 276:	af 93       	push	r26
 278:	bf 93       	push	r27
 27a:	ef 93       	push	r30
 27c:	ff 93       	push	r31
	if (INT2_Fptr!=NULLPTR)
 27e:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 282:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 286:	30 97       	sbiw	r30, 0x00	; 0
 288:	09 f0       	breq	.+2      	; 0x28c <__vector_3+0x30>
	{
		INT2_Fptr();
 28a:	09 95       	icall
	}
 28c:	ff 91       	pop	r31
 28e:	ef 91       	pop	r30
 290:	bf 91       	pop	r27
 292:	af 91       	pop	r26
 294:	9f 91       	pop	r25
 296:	8f 91       	pop	r24
 298:	7f 91       	pop	r23
 29a:	6f 91       	pop	r22
 29c:	5f 91       	pop	r21
 29e:	4f 91       	pop	r20
 2a0:	3f 91       	pop	r19
 2a2:	2f 91       	pop	r18
 2a4:	0f 90       	pop	r0
 2a6:	0f be       	out	0x3f, r0	; 63
 2a8:	0f 90       	pop	r0
 2aa:	1f 90       	pop	r1
 2ac:	18 95       	reti

000002ae <MCAL_SPI_Init>:
	 ES_t Init_Status = NO_Error ;
	SPDR = DataSend ;
	while(!(SPSR&(1<<SPIF)));
	*DataRecieve = SPDR ;
	return Init_Status ;
}
 2ae:	8d b1       	in	r24, 0x0d	; 13
 2b0:	80 61       	ori	r24, 0x10	; 16
 2b2:	8d b9       	out	0x0d, r24	; 13
 2b4:	8d b1       	in	r24, 0x0d	; 13
 2b6:	81 60       	ori	r24, 0x01	; 1
 2b8:	8d b9       	out	0x0d, r24	; 13
 2ba:	8d b1       	in	r24, 0x0d	; 13
 2bc:	8f 7d       	andi	r24, 0xDF	; 223
 2be:	8d b9       	out	0x0d, r24	; 13
 2c0:	8d b1       	in	r24, 0x0d	; 13
 2c2:	87 7f       	andi	r24, 0xF7	; 247
 2c4:	8d b9       	out	0x0d, r24	; 13
 2c6:	8d b1       	in	r24, 0x0d	; 13
 2c8:	8b 7f       	andi	r24, 0xFB	; 251
 2ca:	8d b9       	out	0x0d, r24	; 13
 2cc:	8d b1       	in	r24, 0x0d	; 13
 2ce:	8e 7f       	andi	r24, 0xFE	; 254
 2d0:	8d b9       	out	0x0d, r24	; 13
 2d2:	8d b1       	in	r24, 0x0d	; 13
 2d4:	80 64       	ori	r24, 0x40	; 64
 2d6:	8d b9       	out	0x0d, r24	; 13
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	08 95       	ret

000002dc <MCAL_SPI_Send_Data>:
 2dc:	8f b9       	out	0x0f, r24	; 15
 2de:	77 9b       	sbis	0x0e, 7	; 14
 2e0:	fe cf       	rjmp	.-4      	; 0x2de <MCAL_SPI_Send_Data+0x2>
 2e2:	8f b1       	in	r24, 0x0f	; 15
 2e4:	08 95       	ret

000002e6 <MCAL_SPI_Set_Pins_Master>:
void MCAL_SPI_Set_Pins_Master(void)
{
	DIO_Write_Pin_Dir(PORT_B,SS,HIGH);
 2e6:	41 e0       	ldi	r20, 0x01	; 1
 2e8:	64 e0       	ldi	r22, 0x04	; 4
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	0e 94 67 00 	call	0xce	; 0xce <DIO_Write_Pin_Dir>
	DIO_Write_Pin_Dir(PORT_B,MOSI,HIGH);
 2f0:	41 e0       	ldi	r20, 0x01	; 1
 2f2:	65 e0       	ldi	r22, 0x05	; 5
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	0e 94 67 00 	call	0xce	; 0xce <DIO_Write_Pin_Dir>
	DIO_Write_Pin_Dir(PORT_B,MISO,LOW);	
 2fa:	40 e0       	ldi	r20, 0x00	; 0
 2fc:	66 e0       	ldi	r22, 0x06	; 6
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	0e 94 67 00 	call	0xce	; 0xce <DIO_Write_Pin_Dir>
	DIO_Write_Pin_Dir(PORT_B,SCK,HIGH);
 304:	41 e0       	ldi	r20, 0x01	; 1
 306:	67 e0       	ldi	r22, 0x07	; 7
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	0e 94 67 00 	call	0xce	; 0xce <DIO_Write_Pin_Dir>
 30e:	08 95       	ret

00000310 <_exit>:
 310:	f8 94       	cli

00000312 <__stop_program>:
 312:	ff cf       	rjmp	.-2      	; 0x312 <__stop_program>
