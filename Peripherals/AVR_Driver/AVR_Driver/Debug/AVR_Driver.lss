
AVR_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005fc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000670  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800060  00800060  00000670  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000670  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d0  00000000  00000000  000006dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000170d  00000000  00000000  000008ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a78  00000000  00000000  00001fb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000efa  00000000  00000000  00002a31  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004c8  00000000  00000000  0000392c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008f8  00000000  00000000  00003df4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000116b  00000000  00000000  000046ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  00005857  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 7c 02 	jmp	0x4f8	; 0x4f8 <__vector_1>
   8:	0c 94 a5 02 	jmp	0x54a	; 0x54a <__vector_2>
   c:	0c 94 ce 02 	jmp	0x59c	; 0x59c <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 00 01 	jmp	0x200	; 0x200 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 31 01 	jmp	0x262	; 0x262 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ef       	ldi	r30, 0xFC	; 252
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 36       	cpi	r26, 0x6C	; 108
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ef 00 	call	0x1de	; 0x1de <main>
  8a:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_Enable>:
 * 			@retval						-NONE																		*
 * 			Note						-NONE																		*
 ********************************************************************************************************************/
void LCD_Enable ()
{
	DIO_Write_Pin(PORT_A,EN_SWITCH,HIGH);
  92:	41 e0       	ldi	r20, 0x01	; 1
  94:	63 e0       	ldi	r22, 0x03	; 3
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <DIO_Write_Pin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9c:	83 ed       	ldi	r24, 0xD3	; 211
  9e:	90 e3       	ldi	r25, 0x30	; 48
  a0:	01 97       	sbiw	r24, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <LCD_Enable+0xe>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <LCD_Enable+0x14>
  a6:	00 00       	nop
	_delay_ms(50);
	DIO_Write_Pin(PORT_A,EN_SWITCH,LOW);
  a8:	40 e0       	ldi	r20, 0x00	; 0
  aa:	63 e0       	ldi	r22, 0x03	; 3
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <DIO_Write_Pin>
  b2:	08 95       	ret

000000b4 <LCD_Wirte_Cmd>:
 * 			@param [in]					-Cmd Command user will inter to preform specific operation					*
 * 			@retval						-NONE																		*
 * 			Note						-NONE																		*
 ********************************************************************************************************************/
void LCD_Wirte_Cmd (uint8_t Cmd)
{
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
  b8:	c8 2f       	mov	r28, r24
	DIO_Write_Pin(PORT_A,RS_SWITCH,LOW);
  ba:	40 e0       	ldi	r20, 0x00	; 0
  bc:	61 e0       	ldi	r22, 0x01	; 1
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <DIO_Write_Pin>
	DIO_Write_Pin(PORT_A,RW_SWITCH,LOW);
  c4:	40 e0       	ldi	r20, 0x00	; 0
  c6:	62 e0       	ldi	r22, 0x02	; 2
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <DIO_Write_Pin>
	
	#ifdef FOUR_BIT_MODE
	

	LCD_DATA = (LCD_DATA&0x0F) | (Cmd&0xF0);  
  ce:	8b b3       	in	r24, 0x1b	; 27
  d0:	8f 70       	andi	r24, 0x0F	; 15
  d2:	9c 2f       	mov	r25, r28
  d4:	90 7f       	andi	r25, 0xF0	; 240
  d6:	89 2b       	or	r24, r25
  d8:	8b bb       	out	0x1b, r24	; 27
	LCD_Enable ();
  da:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Enable>
  de:	89 ef       	ldi	r24, 0xF9	; 249
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <LCD_Wirte_Cmd+0x2e>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <LCD_Wirte_Cmd+0x34>
  e8:	00 00       	nop
	_delay_ms(1);
	if (Init_Is_Finshed)
  ea:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ee:	88 23       	and	r24, r24
  f0:	49 f0       	breq	.+18     	; 0x104 <LCD_Wirte_Cmd+0x50>
	{
		
		LCD_DATA = (((LCD_DATA&0x0F) | (Cmd&0x0F))<<4);
  f2:	8b b3       	in	r24, 0x1b	; 27
  f4:	c8 2b       	or	r28, r24
  f6:	90 e1       	ldi	r25, 0x10	; 16
  f8:	c9 9f       	mul	r28, r25
  fa:	e0 01       	movw	r28, r0
  fc:	11 24       	eor	r1, r1
  fe:	cb bb       	out	0x1b, r28	; 27
		LCD_Enable ();
 100:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Enable>
 104:	83 ef       	ldi	r24, 0xF3	; 243
 106:	91 e0       	ldi	r25, 0x01	; 1
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <LCD_Wirte_Cmd+0x54>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <LCD_Wirte_Cmd+0x5a>
 10e:	00 00       	nop
	#ifdef EIGHT_BIT_MODE
	LCD_DATA = Cmd ;
	LCD_Enable();
	#endif
	_delay_ms(2);
}
 110:	df 91       	pop	r29
 112:	cf 91       	pop	r28
 114:	08 95       	ret

00000116 <LCD_Clear_Screen>:
 * 			@retval						-NONE																		*
 * 			Note						-NONE																		*
 ********************************************************************************************************************/
void LCD_Clear_Screen ()
{
	LCD_Wirte_Cmd(LCD_CLEAR_SCREEN);
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_Wirte_Cmd>
 11c:	08 95       	ret

0000011e <LCD_Init>:
 11e:	87 e8       	ldi	r24, 0x87	; 135
 120:	93 e1       	ldi	r25, 0x13	; 19
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <LCD_Init+0x4>
 126:	00 c0       	rjmp	.+0      	; 0x128 <LCD_Init+0xa>
 128:	00 00       	nop
 ********************************************************************************************************************/
void LCD_Init()
{
	_delay_ms(20) ;
	
	SET_BIT(LCD_CTRL_DIR,RS_SWITCH);
 12a:	8a b3       	in	r24, 0x1a	; 26
 12c:	82 60       	ori	r24, 0x02	; 2
 12e:	8a bb       	out	0x1a, r24	; 26
	SET_BIT(LCD_CTRL_DIR,RW_SWITCH);
 130:	8a b3       	in	r24, 0x1a	; 26
 132:	84 60       	ori	r24, 0x04	; 4
 134:	8a bb       	out	0x1a, r24	; 26
	SET_BIT(LCD_CTRL_DIR,EN_SWITCH);
 136:	8a b3       	in	r24, 0x1a	; 26
 138:	88 60       	ori	r24, 0x08	; 8
 13a:	8a bb       	out	0x1a, r24	; 26

	CLEAR_BIT(LCD_CTRL,RS_SWITCH);
 13c:	8b b3       	in	r24, 0x1b	; 27
 13e:	8d 7f       	andi	r24, 0xFD	; 253
 140:	8b bb       	out	0x1b, r24	; 27
	CLEAR_BIT(LCD_CTRL,RW_SWITCH);
 142:	8b b3       	in	r24, 0x1b	; 27
 144:	8b 7f       	andi	r24, 0xFB	; 251
 146:	8b bb       	out	0x1b, r24	; 27
	CLEAR_BIT(LCD_CTRL,EN_SWITCH);
 148:	8b b3       	in	r24, 0x1b	; 27
 14a:	87 7f       	andi	r24, 0xF7	; 247
 14c:	8b bb       	out	0x1b, r24	; 27
#ifdef EIGHT_BIT_MODE
	SET_REG(LCD_DATA_DIR);
#endif 

#ifdef FOUR_BIT_MODE
	SET_BIT(LCD_DATA_DIR,4);
 14e:	8a b3       	in	r24, 0x1a	; 26
 150:	80 61       	ori	r24, 0x10	; 16
 152:	8a bb       	out	0x1a, r24	; 26
	SET_BIT(LCD_DATA_DIR,5);
 154:	8a b3       	in	r24, 0x1a	; 26
 156:	80 62       	ori	r24, 0x20	; 32
 158:	8a bb       	out	0x1a, r24	; 26
	SET_BIT(LCD_DATA_DIR,6);
 15a:	8a b3       	in	r24, 0x1a	; 26
 15c:	80 64       	ori	r24, 0x40	; 64
 15e:	8a bb       	out	0x1a, r24	; 26
	SET_BIT(LCD_DATA_DIR,7);
 160:	8a b3       	in	r24, 0x1a	; 26
 162:	80 68       	ori	r24, 0x80	; 128
 164:	8a bb       	out	0x1a, r24	; 26
 166:	85 ea       	ldi	r24, 0xA5	; 165
 168:	9e e0       	ldi	r25, 0x0E	; 14
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <LCD_Init+0x4c>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <LCD_Init+0x52>
 170:	00 00       	nop
#endif 
	_delay_ms(15);
	LCD_Clear_Screen();
 172:	0e 94 8b 00 	call	0x116	; 0x116 <LCD_Clear_Screen>
	LCD_Wirte_Cmd(LCD_FUNCTION_8BIT_2LINES);
	#endif
	
#ifdef FOUR_BIT_MODE	

	LCD_Wirte_Cmd(0x20);
 176:	80 e2       	ldi	r24, 0x20	; 32
 178:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_Wirte_Cmd>
	LCD_Wirte_Cmd(0x20);
 17c:	80 e2       	ldi	r24, 0x20	; 32
 17e:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_Wirte_Cmd>
	LCD_Wirte_Cmd(0x80);
 182:	80 e8       	ldi	r24, 0x80	; 128
 184:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_Wirte_Cmd>
 188:	89 ef       	ldi	r24, 0xF9	; 249
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <LCD_Init+0x6e>
 190:	00 c0       	rjmp	.+0      	; 0x192 <LCD_Init+0x74>
 192:	00 00       	nop
	_delay_ms(1);
	
	LCD_Wirte_Cmd(0x00);
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_Wirte_Cmd>
	LCD_Wirte_Cmd(0xF0);
 19a:	80 ef       	ldi	r24, 0xF0	; 240
 19c:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_Wirte_Cmd>
 1a0:	89 ef       	ldi	r24, 0xF9	; 249
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <LCD_Init+0x86>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <LCD_Init+0x8c>
 1aa:	00 00       	nop
	_delay_ms(1);
	
	LCD_Wirte_Cmd(0x00);
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_Wirte_Cmd>
	LCD_Wirte_Cmd(0x10);
 1b2:	80 e1       	ldi	r24, 0x10	; 16
 1b4:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_Wirte_Cmd>
 1b8:	83 ef       	ldi	r24, 0xF3	; 243
 1ba:	91 e0       	ldi	r25, 0x01	; 1
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <LCD_Init+0x9e>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <LCD_Init+0xa4>
 1c2:	00 00       	nop
	_delay_ms(2);
	
// 	LCD_Wirte_Cmd(0x00);	By Default
// 	LCD_Wirte_Cmd(0x60);	By Default

	Init_Is_Finshed = 1 ; // when we init LCD in case four bit we will send 0x2xxxx  , 0x2xxxx , 0x8xxxx
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	// SO When we send 0x0010 0000 last four bit will be read from lcd and 0000 will not be read
	#endif
	LCD_Wirte_Cmd(LCD_ENTRY_MODE);
 1ca:	86 e0       	ldi	r24, 0x06	; 6
 1cc:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_Wirte_Cmd>
	LCD_Wirte_Cmd(LCD_BEGIN_AT_FIRST_ROW);
 1d0:	80 e8       	ldi	r24, 0x80	; 128
 1d2:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_Wirte_Cmd>
	LCD_Wirte_Cmd(LCD_DISP_ON_CURSOR_BLINK);	
 1d6:	8f e0       	ldi	r24, 0x0F	; 15
 1d8:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_Wirte_Cmd>
 1dc:	08 95       	ret

000001de <main>:
volatile uint8_t flag = 0 ; 
static uint8_t c = 0 ; 

int main()
{		
	LCD_Init();
 1de:	0e 94 8f 00 	call	0x11e	; 0x11e <LCD_Init>
	
	DIO_Write_Pin_Dir(PORT_B,GPIO_PIN_0,OUT);
 1e2:	41 e0       	ldi	r20, 0x01	; 1
 1e4:	60 e0       	ldi	r22, 0x00	; 0
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	0e 94 5e 01 	call	0x2bc	; 0x2bc <DIO_Write_Pin_Dir>
	
	TCCR0 = 0x01 ;    
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	83 bf       	out	0x33, r24	; 51
	
	TIMSK |= (1<<0) ; 
 1f0:	89 b7       	in	r24, 0x39	; 57
 1f2:	81 60       	ori	r24, 0x01	; 1
 1f4:	89 bf       	out	0x39, r24	; 57
	
	EnableGlobalEnterrupt() ;
 1f6:	0e 94 f7 02 	call	0x5ee	; 0x5ee <EnableGlobalEnterrupt>
	TCNT0 = 24 ;
 1fa:	88 e1       	ldi	r24, 0x18	; 24
 1fc:	82 bf       	out	0x32, r24	; 50
 1fe:	ff cf       	rjmp	.-2      	; 0x1fe <main+0x20>

00000200 <__vector_11>:
	{
	}
}

ISR(TIMER0_OVF_vect)
{
 200:	1f 92       	push	r1
 202:	0f 92       	push	r0
 204:	0f b6       	in	r0, 0x3f	; 63
 206:	0f 92       	push	r0
 208:	11 24       	eor	r1, r1
 20a:	2f 93       	push	r18
 20c:	3f 93       	push	r19
 20e:	4f 93       	push	r20
 210:	5f 93       	push	r21
 212:	6f 93       	push	r22
 214:	7f 93       	push	r23
 216:	8f 93       	push	r24
 218:	9f 93       	push	r25
 21a:	af 93       	push	r26
 21c:	bf 93       	push	r27
 21e:	ef 93       	push	r30
 220:	ff 93       	push	r31
	c++;
 222:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <c>
 226:	8f 5f       	subi	r24, 0xFF	; 255
 228:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <c>
	if ( c==4 )
 22c:	84 30       	cpi	r24, 0x04	; 4
 22e:	41 f4       	brne	.+16     	; 0x240 <__vector_11+0x40>
	{
		TCNT0 = 24 ; 
 230:	88 e1       	ldi	r24, 0x18	; 24
 232:	82 bf       	out	0x32, r24	; 50
		DIO_Toggle_Pin(PORT_B,GPIO_PIN_0);
 234:	60 e0       	ldi	r22, 0x00	; 0
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	0e 94 48 02 	call	0x490	; 0x490 <DIO_Toggle_Pin>
		c=0 ;
 23c:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <c>
	}
}
 240:	ff 91       	pop	r31
 242:	ef 91       	pop	r30
 244:	bf 91       	pop	r27
 246:	af 91       	pop	r26
 248:	9f 91       	pop	r25
 24a:	8f 91       	pop	r24
 24c:	7f 91       	pop	r23
 24e:	6f 91       	pop	r22
 250:	5f 91       	pop	r21
 252:	4f 91       	pop	r20
 254:	3f 91       	pop	r19
 256:	2f 91       	pop	r18
 258:	0f 90       	pop	r0
 25a:	0f be       	out	0x3f, r0	; 63
 25c:	0f 90       	pop	r0
 25e:	1f 90       	pop	r1
 260:	18 95       	reti

00000262 <__vector_16>:
	ENABLE_ADC_INTERRUPT ; 							 
	
	return Local_ErrorState ;
}
ISR(ADC_vect)
{
 262:	1f 92       	push	r1
 264:	0f 92       	push	r0
 266:	0f b6       	in	r0, 0x3f	; 63
 268:	0f 92       	push	r0
 26a:	11 24       	eor	r1, r1
 26c:	2f 93       	push	r18
 26e:	3f 93       	push	r19
 270:	4f 93       	push	r20
 272:	5f 93       	push	r21
 274:	6f 93       	push	r22
 276:	7f 93       	push	r23
 278:	8f 93       	push	r24
 27a:	9f 93       	push	r25
 27c:	af 93       	push	r26
 27e:	bf 93       	push	r27
 280:	ef 93       	push	r30
 282:	ff 93       	push	r31
	if (ADC_GptrFun != NULL)
 284:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <ADC_GptrFun>
 288:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <ADC_GptrFun+0x1>
 28c:	30 97       	sbiw	r30, 0x00	; 0
 28e:	29 f0       	breq	.+10     	; 0x29a <__vector_16+0x38>
	{
		ADC_GptrFun(ADCGptrParameter) ; 
 290:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <ADCGptrParameter>
 294:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <ADCGptrParameter+0x1>
 298:	09 95       	icall
	}
 29a:	ff 91       	pop	r31
 29c:	ef 91       	pop	r30
 29e:	bf 91       	pop	r27
 2a0:	af 91       	pop	r26
 2a2:	9f 91       	pop	r25
 2a4:	8f 91       	pop	r24
 2a6:	7f 91       	pop	r23
 2a8:	6f 91       	pop	r22
 2aa:	5f 91       	pop	r21
 2ac:	4f 91       	pop	r20
 2ae:	3f 91       	pop	r19
 2b0:	2f 91       	pop	r18
 2b2:	0f 90       	pop	r0
 2b4:	0f be       	out	0x3f, r0	; 63
 2b6:	0f 90       	pop	r0
 2b8:	1f 90       	pop	r1
 2ba:	18 95       	reti

000002bc <DIO_Write_Pin_Dir>:
		break;
		case PORT_C :
		*(value) = (PINC &(1<<PinNumber))>>PinNumber ;
		break;
		case PORT_D :
		*(value) = (PIND &(1<<PinNumber))>>PinNumber ;
 2bc:	81 30       	cpi	r24, 0x01	; 1
 2be:	11 f1       	breq	.+68     	; 0x304 <DIO_Write_Pin_Dir+0x48>
 2c0:	30 f0       	brcs	.+12     	; 0x2ce <DIO_Write_Pin_Dir+0x12>
 2c2:	82 30       	cpi	r24, 0x02	; 2
 2c4:	d1 f1       	breq	.+116    	; 0x33a <DIO_Write_Pin_Dir+0x7e>
 2c6:	83 30       	cpi	r24, 0x03	; 3
 2c8:	09 f4       	brne	.+2      	; 0x2cc <DIO_Write_Pin_Dir+0x10>
 2ca:	52 c0       	rjmp	.+164    	; 0x370 <DIO_Write_Pin_Dir+0xb4>
 2cc:	08 95       	ret
 2ce:	41 30       	cpi	r20, 0x01	; 1
 2d0:	59 f4       	brne	.+22     	; 0x2e8 <DIO_Write_Pin_Dir+0x2c>
 2d2:	2a b3       	in	r18, 0x1a	; 26
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	02 c0       	rjmp	.+4      	; 0x2de <DIO_Write_Pin_Dir+0x22>
 2da:	88 0f       	add	r24, r24
 2dc:	99 1f       	adc	r25, r25
 2de:	6a 95       	dec	r22
 2e0:	e2 f7       	brpl	.-8      	; 0x2da <DIO_Write_Pin_Dir+0x1e>
 2e2:	82 2b       	or	r24, r18
 2e4:	8a bb       	out	0x1a, r24	; 26
 2e6:	08 95       	ret
 2e8:	41 11       	cpse	r20, r1
 2ea:	5c c0       	rjmp	.+184    	; 0x3a4 <DIO_Write_Pin_Dir+0xe8>
 2ec:	2a b3       	in	r18, 0x1a	; 26
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <DIO_Write_Pin_Dir+0x3c>
 2f4:	88 0f       	add	r24, r24
 2f6:	99 1f       	adc	r25, r25
 2f8:	6a 95       	dec	r22
 2fa:	e2 f7       	brpl	.-8      	; 0x2f4 <DIO_Write_Pin_Dir+0x38>
 2fc:	80 95       	com	r24
 2fe:	82 23       	and	r24, r18
 300:	8a bb       	out	0x1a, r24	; 26
 302:	08 95       	ret
 304:	41 30       	cpi	r20, 0x01	; 1
 306:	59 f4       	brne	.+22     	; 0x31e <DIO_Write_Pin_Dir+0x62>
 308:	27 b3       	in	r18, 0x17	; 23
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	02 c0       	rjmp	.+4      	; 0x314 <DIO_Write_Pin_Dir+0x58>
 310:	88 0f       	add	r24, r24
 312:	99 1f       	adc	r25, r25
 314:	6a 95       	dec	r22
 316:	e2 f7       	brpl	.-8      	; 0x310 <DIO_Write_Pin_Dir+0x54>
 318:	82 2b       	or	r24, r18
 31a:	87 bb       	out	0x17, r24	; 23
 31c:	08 95       	ret
 31e:	41 11       	cpse	r20, r1
 320:	41 c0       	rjmp	.+130    	; 0x3a4 <DIO_Write_Pin_Dir+0xe8>
 322:	27 b3       	in	r18, 0x17	; 23
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	02 c0       	rjmp	.+4      	; 0x32e <DIO_Write_Pin_Dir+0x72>
 32a:	88 0f       	add	r24, r24
 32c:	99 1f       	adc	r25, r25
 32e:	6a 95       	dec	r22
 330:	e2 f7       	brpl	.-8      	; 0x32a <DIO_Write_Pin_Dir+0x6e>
 332:	80 95       	com	r24
 334:	82 23       	and	r24, r18
 336:	87 bb       	out	0x17, r24	; 23
 338:	08 95       	ret
 33a:	41 30       	cpi	r20, 0x01	; 1
 33c:	59 f4       	brne	.+22     	; 0x354 <DIO_Write_Pin_Dir+0x98>
 33e:	24 b3       	in	r18, 0x14	; 20
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	02 c0       	rjmp	.+4      	; 0x34a <DIO_Write_Pin_Dir+0x8e>
 346:	88 0f       	add	r24, r24
 348:	99 1f       	adc	r25, r25
 34a:	6a 95       	dec	r22
 34c:	e2 f7       	brpl	.-8      	; 0x346 <DIO_Write_Pin_Dir+0x8a>
 34e:	82 2b       	or	r24, r18
 350:	84 bb       	out	0x14, r24	; 20
 352:	08 95       	ret
 354:	41 11       	cpse	r20, r1
 356:	26 c0       	rjmp	.+76     	; 0x3a4 <DIO_Write_Pin_Dir+0xe8>
 358:	24 b3       	in	r18, 0x14	; 20
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	02 c0       	rjmp	.+4      	; 0x364 <DIO_Write_Pin_Dir+0xa8>
 360:	88 0f       	add	r24, r24
 362:	99 1f       	adc	r25, r25
 364:	6a 95       	dec	r22
 366:	e2 f7       	brpl	.-8      	; 0x360 <DIO_Write_Pin_Dir+0xa4>
 368:	80 95       	com	r24
 36a:	82 23       	and	r24, r18
 36c:	84 bb       	out	0x14, r24	; 20
 36e:	08 95       	ret
 370:	41 30       	cpi	r20, 0x01	; 1
 372:	59 f4       	brne	.+22     	; 0x38a <DIO_Write_Pin_Dir+0xce>
 374:	21 b3       	in	r18, 0x11	; 17
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	02 c0       	rjmp	.+4      	; 0x380 <DIO_Write_Pin_Dir+0xc4>
 37c:	88 0f       	add	r24, r24
 37e:	99 1f       	adc	r25, r25
 380:	6a 95       	dec	r22
 382:	e2 f7       	brpl	.-8      	; 0x37c <DIO_Write_Pin_Dir+0xc0>
 384:	82 2b       	or	r24, r18
 386:	81 bb       	out	0x11, r24	; 17
 388:	08 95       	ret
 38a:	41 11       	cpse	r20, r1
 38c:	0b c0       	rjmp	.+22     	; 0x3a4 <DIO_Write_Pin_Dir+0xe8>
 38e:	21 b3       	in	r18, 0x11	; 17
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	02 c0       	rjmp	.+4      	; 0x39a <DIO_Write_Pin_Dir+0xde>
 396:	88 0f       	add	r24, r24
 398:	99 1f       	adc	r25, r25
 39a:	6a 95       	dec	r22
 39c:	e2 f7       	brpl	.-8      	; 0x396 <DIO_Write_Pin_Dir+0xda>
 39e:	80 95       	com	r24
 3a0:	82 23       	and	r24, r18
 3a2:	81 bb       	out	0x11, r24	; 17
 3a4:	08 95       	ret

000003a6 <DIO_Write_Pin>:
 3a6:	81 30       	cpi	r24, 0x01	; 1
 3a8:	11 f1       	breq	.+68     	; 0x3ee <DIO_Write_Pin+0x48>
 3aa:	30 f0       	brcs	.+12     	; 0x3b8 <DIO_Write_Pin+0x12>
 3ac:	82 30       	cpi	r24, 0x02	; 2
 3ae:	d1 f1       	breq	.+116    	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 3b0:	83 30       	cpi	r24, 0x03	; 3
 3b2:	09 f4       	brne	.+2      	; 0x3b6 <DIO_Write_Pin+0x10>
 3b4:	52 c0       	rjmp	.+164    	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 3b6:	08 95       	ret
 3b8:	41 30       	cpi	r20, 0x01	; 1
 3ba:	59 f4       	brne	.+22     	; 0x3d2 <DIO_Write_Pin+0x2c>
 3bc:	2b b3       	in	r18, 0x1b	; 27
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <DIO_Write_Pin+0x22>
 3c4:	88 0f       	add	r24, r24
 3c6:	99 1f       	adc	r25, r25
 3c8:	6a 95       	dec	r22
 3ca:	e2 f7       	brpl	.-8      	; 0x3c4 <DIO_Write_Pin+0x1e>
 3cc:	82 2b       	or	r24, r18
 3ce:	8b bb       	out	0x1b, r24	; 27
 3d0:	08 95       	ret
 3d2:	41 11       	cpse	r20, r1
 3d4:	5c c0       	rjmp	.+184    	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
 3d6:	2b b3       	in	r18, 0x1b	; 27
 3d8:	81 e0       	ldi	r24, 0x01	; 1
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <DIO_Write_Pin+0x3c>
 3de:	88 0f       	add	r24, r24
 3e0:	99 1f       	adc	r25, r25
 3e2:	6a 95       	dec	r22
 3e4:	e2 f7       	brpl	.-8      	; 0x3de <DIO_Write_Pin+0x38>
 3e6:	80 95       	com	r24
 3e8:	82 23       	and	r24, r18
 3ea:	8b bb       	out	0x1b, r24	; 27
 3ec:	08 95       	ret
 3ee:	41 30       	cpi	r20, 0x01	; 1
 3f0:	59 f4       	brne	.+22     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 3f2:	28 b3       	in	r18, 0x18	; 24
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	02 c0       	rjmp	.+4      	; 0x3fe <DIO_Write_Pin+0x58>
 3fa:	88 0f       	add	r24, r24
 3fc:	99 1f       	adc	r25, r25
 3fe:	6a 95       	dec	r22
 400:	e2 f7       	brpl	.-8      	; 0x3fa <DIO_Write_Pin+0x54>
 402:	82 2b       	or	r24, r18
 404:	88 bb       	out	0x18, r24	; 24
 406:	08 95       	ret
 408:	41 11       	cpse	r20, r1
 40a:	41 c0       	rjmp	.+130    	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
 40c:	28 b3       	in	r18, 0x18	; 24
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	02 c0       	rjmp	.+4      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 414:	88 0f       	add	r24, r24
 416:	99 1f       	adc	r25, r25
 418:	6a 95       	dec	r22
 41a:	e2 f7       	brpl	.-8      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 41c:	80 95       	com	r24
 41e:	82 23       	and	r24, r18
 420:	88 bb       	out	0x18, r24	; 24
 422:	08 95       	ret
 424:	41 30       	cpi	r20, 0x01	; 1
 426:	59 f4       	brne	.+22     	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 428:	25 b3       	in	r18, 0x15	; 21
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	02 c0       	rjmp	.+4      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 430:	88 0f       	add	r24, r24
 432:	99 1f       	adc	r25, r25
 434:	6a 95       	dec	r22
 436:	e2 f7       	brpl	.-8      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 438:	82 2b       	or	r24, r18
 43a:	85 bb       	out	0x15, r24	; 21
 43c:	08 95       	ret
 43e:	41 11       	cpse	r20, r1
 440:	26 c0       	rjmp	.+76     	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
 442:	25 b3       	in	r18, 0x15	; 21
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	02 c0       	rjmp	.+4      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 44a:	88 0f       	add	r24, r24
 44c:	99 1f       	adc	r25, r25
 44e:	6a 95       	dec	r22
 450:	e2 f7       	brpl	.-8      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 452:	80 95       	com	r24
 454:	82 23       	and	r24, r18
 456:	85 bb       	out	0x15, r24	; 21
 458:	08 95       	ret
 45a:	41 30       	cpi	r20, 0x01	; 1
 45c:	59 f4       	brne	.+22     	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
 45e:	22 b3       	in	r18, 0x12	; 18
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	02 c0       	rjmp	.+4      	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
 466:	88 0f       	add	r24, r24
 468:	99 1f       	adc	r25, r25
 46a:	6a 95       	dec	r22
 46c:	e2 f7       	brpl	.-8      	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 46e:	82 2b       	or	r24, r18
 470:	82 bb       	out	0x12, r24	; 18
 472:	08 95       	ret
 474:	41 11       	cpse	r20, r1
 476:	0b c0       	rjmp	.+22     	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
 478:	22 b3       	in	r18, 0x12	; 18
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	02 c0       	rjmp	.+4      	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
 480:	88 0f       	add	r24, r24
 482:	99 1f       	adc	r25, r25
 484:	6a 95       	dec	r22
 486:	e2 f7       	brpl	.-8      	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
 488:	80 95       	com	r24
 48a:	82 23       	and	r24, r18
 48c:	82 bb       	out	0x12, r24	; 18
 48e:	08 95       	ret

00000490 <DIO_Toggle_Pin>:
	}
}

void DIO_Toggle_Pin( GPIO_PORT_t PortNumber , GPIO_PIN_t PinNumber  )
{
	switch(PortNumber)
 490:	81 30       	cpi	r24, 0x01	; 1
 492:	89 f0       	breq	.+34     	; 0x4b6 <DIO_Toggle_Pin+0x26>
 494:	28 f0       	brcs	.+10     	; 0x4a0 <DIO_Toggle_Pin+0x10>
 496:	82 30       	cpi	r24, 0x02	; 2
 498:	c9 f0       	breq	.+50     	; 0x4cc <DIO_Toggle_Pin+0x3c>
 49a:	83 30       	cpi	r24, 0x03	; 3
 49c:	11 f1       	breq	.+68     	; 0x4e2 <DIO_Toggle_Pin+0x52>
 49e:	08 95       	ret
	{
		case PORT_A :
		PORTA ^= (1<<PinNumber);
 4a0:	2b b3       	in	r18, 0x1b	; 27
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	02 c0       	rjmp	.+4      	; 0x4ac <DIO_Toggle_Pin+0x1c>
 4a8:	88 0f       	add	r24, r24
 4aa:	99 1f       	adc	r25, r25
 4ac:	6a 95       	dec	r22
 4ae:	e2 f7       	brpl	.-8      	; 0x4a8 <DIO_Toggle_Pin+0x18>
 4b0:	82 27       	eor	r24, r18
 4b2:	8b bb       	out	0x1b, r24	; 27
		break ;
 4b4:	08 95       	ret
		case PORT_B :
		PORTB ^= (1<<PinNumber);
 4b6:	28 b3       	in	r18, 0x18	; 24
 4b8:	81 e0       	ldi	r24, 0x01	; 1
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <DIO_Toggle_Pin+0x32>
 4be:	88 0f       	add	r24, r24
 4c0:	99 1f       	adc	r25, r25
 4c2:	6a 95       	dec	r22
 4c4:	e2 f7       	brpl	.-8      	; 0x4be <DIO_Toggle_Pin+0x2e>
 4c6:	82 27       	eor	r24, r18
 4c8:	88 bb       	out	0x18, r24	; 24
		break ;
 4ca:	08 95       	ret
		case PORT_C :
		PORTC ^= (1<<PinNumber);
 4cc:	25 b3       	in	r18, 0x15	; 21
 4ce:	81 e0       	ldi	r24, 0x01	; 1
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <DIO_Toggle_Pin+0x48>
 4d4:	88 0f       	add	r24, r24
 4d6:	99 1f       	adc	r25, r25
 4d8:	6a 95       	dec	r22
 4da:	e2 f7       	brpl	.-8      	; 0x4d4 <DIO_Toggle_Pin+0x44>
 4dc:	82 27       	eor	r24, r18
 4de:	85 bb       	out	0x15, r24	; 21
		break ;
 4e0:	08 95       	ret
		case PORT_D :
		PORTD ^= (1<<PinNumber);
 4e2:	22 b3       	in	r18, 0x12	; 18
 4e4:	81 e0       	ldi	r24, 0x01	; 1
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	02 c0       	rjmp	.+4      	; 0x4ee <DIO_Toggle_Pin+0x5e>
 4ea:	88 0f       	add	r24, r24
 4ec:	99 1f       	adc	r25, r25
 4ee:	6a 95       	dec	r22
 4f0:	e2 f7       	brpl	.-8      	; 0x4ea <DIO_Toggle_Pin+0x5a>
 4f2:	82 27       	eor	r24, r18
 4f4:	82 bb       	out	0x12, r24	; 18
 4f6:	08 95       	ret

000004f8 <__vector_1>:
			break;
	}
}
/*******************************ISR********************************/
ISR(INT0_vect)
{
 4f8:	1f 92       	push	r1
 4fa:	0f 92       	push	r0
 4fc:	0f b6       	in	r0, 0x3f	; 63
 4fe:	0f 92       	push	r0
 500:	11 24       	eor	r1, r1
 502:	2f 93       	push	r18
 504:	3f 93       	push	r19
 506:	4f 93       	push	r20
 508:	5f 93       	push	r21
 50a:	6f 93       	push	r22
 50c:	7f 93       	push	r23
 50e:	8f 93       	push	r24
 510:	9f 93       	push	r25
 512:	af 93       	push	r26
 514:	bf 93       	push	r27
 516:	ef 93       	push	r30
 518:	ff 93       	push	r31
	if (INT0_Fptr!=NULL)
 51a:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <INT0_Fptr>
 51e:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <INT0_Fptr+0x1>
 522:	30 97       	sbiw	r30, 0x00	; 0
 524:	09 f0       	breq	.+2      	; 0x528 <__vector_1+0x30>
	{
		INT0_Fptr();
 526:	09 95       	icall
	}
}
 528:	ff 91       	pop	r31
 52a:	ef 91       	pop	r30
 52c:	bf 91       	pop	r27
 52e:	af 91       	pop	r26
 530:	9f 91       	pop	r25
 532:	8f 91       	pop	r24
 534:	7f 91       	pop	r23
 536:	6f 91       	pop	r22
 538:	5f 91       	pop	r21
 53a:	4f 91       	pop	r20
 53c:	3f 91       	pop	r19
 53e:	2f 91       	pop	r18
 540:	0f 90       	pop	r0
 542:	0f be       	out	0x3f, r0	; 63
 544:	0f 90       	pop	r0
 546:	1f 90       	pop	r1
 548:	18 95       	reti

0000054a <__vector_2>:
ISR(INT1_vect)
{
 54a:	1f 92       	push	r1
 54c:	0f 92       	push	r0
 54e:	0f b6       	in	r0, 0x3f	; 63
 550:	0f 92       	push	r0
 552:	11 24       	eor	r1, r1
 554:	2f 93       	push	r18
 556:	3f 93       	push	r19
 558:	4f 93       	push	r20
 55a:	5f 93       	push	r21
 55c:	6f 93       	push	r22
 55e:	7f 93       	push	r23
 560:	8f 93       	push	r24
 562:	9f 93       	push	r25
 564:	af 93       	push	r26
 566:	bf 93       	push	r27
 568:	ef 93       	push	r30
 56a:	ff 93       	push	r31
	if (INT1_Fptr!=NULL)
 56c:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <INT1_Fptr>
 570:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <INT1_Fptr+0x1>
 574:	30 97       	sbiw	r30, 0x00	; 0
 576:	09 f0       	breq	.+2      	; 0x57a <__vector_2+0x30>
	{
		INT1_Fptr();
 578:	09 95       	icall
	}
}
 57a:	ff 91       	pop	r31
 57c:	ef 91       	pop	r30
 57e:	bf 91       	pop	r27
 580:	af 91       	pop	r26
 582:	9f 91       	pop	r25
 584:	8f 91       	pop	r24
 586:	7f 91       	pop	r23
 588:	6f 91       	pop	r22
 58a:	5f 91       	pop	r21
 58c:	4f 91       	pop	r20
 58e:	3f 91       	pop	r19
 590:	2f 91       	pop	r18
 592:	0f 90       	pop	r0
 594:	0f be       	out	0x3f, r0	; 63
 596:	0f 90       	pop	r0
 598:	1f 90       	pop	r1
 59a:	18 95       	reti

0000059c <__vector_3>:
ISR(INT2_vect)
{
 59c:	1f 92       	push	r1
 59e:	0f 92       	push	r0
 5a0:	0f b6       	in	r0, 0x3f	; 63
 5a2:	0f 92       	push	r0
 5a4:	11 24       	eor	r1, r1
 5a6:	2f 93       	push	r18
 5a8:	3f 93       	push	r19
 5aa:	4f 93       	push	r20
 5ac:	5f 93       	push	r21
 5ae:	6f 93       	push	r22
 5b0:	7f 93       	push	r23
 5b2:	8f 93       	push	r24
 5b4:	9f 93       	push	r25
 5b6:	af 93       	push	r26
 5b8:	bf 93       	push	r27
 5ba:	ef 93       	push	r30
 5bc:	ff 93       	push	r31
	if (INT2_Fptr!=NULL)
 5be:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <INT2_Fptr>
 5c2:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <INT2_Fptr+0x1>
 5c6:	30 97       	sbiw	r30, 0x00	; 0
 5c8:	09 f0       	breq	.+2      	; 0x5cc <__vector_3+0x30>
	{
		INT2_Fptr();
 5ca:	09 95       	icall
	}
 5cc:	ff 91       	pop	r31
 5ce:	ef 91       	pop	r30
 5d0:	bf 91       	pop	r27
 5d2:	af 91       	pop	r26
 5d4:	9f 91       	pop	r25
 5d6:	8f 91       	pop	r24
 5d8:	7f 91       	pop	r23
 5da:	6f 91       	pop	r22
 5dc:	5f 91       	pop	r21
 5de:	4f 91       	pop	r20
 5e0:	3f 91       	pop	r19
 5e2:	2f 91       	pop	r18
 5e4:	0f 90       	pop	r0
 5e6:	0f be       	out	0x3f, r0	; 63
 5e8:	0f 90       	pop	r0
 5ea:	1f 90       	pop	r1
 5ec:	18 95       	reti

000005ee <EnableGlobalEnterrupt>:

ES_t EnableGlobalEnterrupt(void) 
{
	ES_t Local_state = NO_Error ; 
	
	SET_BIT(SREG,7) ;
 5ee:	8f b7       	in	r24, 0x3f	; 63
 5f0:	80 68       	ori	r24, 0x80	; 128
 5f2:	8f bf       	out	0x3f, r24	; 63
	
	return Local_state ; 
}
 5f4:	80 e0       	ldi	r24, 0x00	; 0
 5f6:	08 95       	ret

000005f8 <_exit>:
 5f8:	f8 94       	cli

000005fa <__stop_program>:
 5fa:	ff cf       	rjmp	.-2      	; 0x5fa <__stop_program>
