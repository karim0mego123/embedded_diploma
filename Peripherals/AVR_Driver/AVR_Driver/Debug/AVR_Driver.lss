
AVR_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000612  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000686  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800060  00800060  00000686  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000686  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  000006f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001457  00000000  00000000  00000854  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000994  00000000  00000000  00001cab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cfc  00000000  00000000  0000263f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000380  00000000  00000000  0000333c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000076d  00000000  00000000  000036bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000fc7  00000000  00000000  00003e29  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00004df0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__vector_1>
   8:	0c 94 7f 02 	jmp	0x4fe	; 0x4fe <__vector_2>
   c:	0c 94 a8 02 	jmp	0x550	; 0x550 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e1       	ldi	r30, 0x12	; 18
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 36       	cpi	r26, 0x67	; 103
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 47 01 	call	0x28e	; 0x28e <main>
  8a:	0c 94 07 03 	jmp	0x60e	; 0x60e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_Enable>:
 * 			@retval						-NONE																		*
 * 			Note						-NONE																		*
 ********************************************************************************************************************/
void LCD_Enable ()
{
	DIO_Write_Pin(PORT_B,EN_SWITCH,HIGH);
  92:	41 e0       	ldi	r20, 0x01	; 1
  94:	62 e0       	ldi	r22, 0x02	; 2
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <DIO_Write_Pin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9c:	8f e4       	ldi	r24, 0x4F	; 79
  9e:	93 ec       	ldi	r25, 0xC3	; 195
  a0:	01 97       	sbiw	r24, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <LCD_Enable+0xe>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <LCD_Enable+0x14>
  a6:	00 00       	nop
	_delay_ms(50);
	DIO_Write_Pin(PORT_B,EN_SWITCH,LOW);
  a8:	40 e0       	ldi	r20, 0x00	; 0
  aa:	62 e0       	ldi	r22, 0x02	; 2
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <DIO_Write_Pin>
  b2:	08 95       	ret

000000b4 <LCD_Wirte_Cmd>:
 * 			@param [in]					-Cmd Command user will inter to preform specific operation					*
 * 			@retval						-NONE																		*
 * 			Note						-NONE																		*
 ********************************************************************************************************************/
void LCD_Wirte_Cmd (uint8_t Cmd)
{
  b4:	cf 93       	push	r28
  b6:	c8 2f       	mov	r28, r24
	DIO_Write_Pin(PORT_B,RS_SWITCH,LOW);
  b8:	40 e0       	ldi	r20, 0x00	; 0
  ba:	60 e0       	ldi	r22, 0x00	; 0
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <DIO_Write_Pin>
	DIO_Write_Pin(PORT_B,RW_SWITCH,LOW);
  c2:	40 e0       	ldi	r20, 0x00	; 0
  c4:	61 e0       	ldi	r22, 0x01	; 1
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <DIO_Write_Pin>
	
	#ifdef FOUR_BIT_MODE
	
	LCD_DATA = (LCD_DATA&0x0f) | (Cmd&0xF0);  
  cc:	8b b3       	in	r24, 0x1b	; 27
  ce:	8f 70       	andi	r24, 0x0F	; 15
  d0:	9c 2f       	mov	r25, r28
  d2:	90 7f       	andi	r25, 0xF0	; 240
  d4:	89 2b       	or	r24, r25
  d6:	8b bb       	out	0x1b, r24	; 27
	LCD_Enable ();
  d8:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Enable>
  dc:	87 ee       	ldi	r24, 0xE7	; 231
  de:	93 e0       	ldi	r25, 0x03	; 3
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <LCD_Wirte_Cmd+0x2c>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <LCD_Wirte_Cmd+0x32>
  e6:	00 00       	nop
	_delay_ms(1);
	if (Init_Is_Finshed)
  e8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ec:	88 23       	and	r24, r24
  ee:	31 f0       	breq	.+12     	; 0xfc <LCD_Wirte_Cmd+0x48>
	{
		LCD_DATA = (((LCD_DATA&0xF0) | (Cmd&0x0F))<<4);
  f0:	8b b3       	in	r24, 0x1b	; 27
  f2:	c2 95       	swap	r28
  f4:	c0 7f       	andi	r28, 0xF0	; 240
  f6:	cb bb       	out	0x1b, r28	; 27
		LCD_Enable ();
  f8:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Enable>
  fc:	8f ec       	ldi	r24, 0xCF	; 207
  fe:	97 e0       	ldi	r25, 0x07	; 7
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <LCD_Wirte_Cmd+0x4c>
 104:	00 c0       	rjmp	.+0      	; 0x106 <LCD_Wirte_Cmd+0x52>
 106:	00 00       	nop
	#ifdef EIGHT_BIT_MODE
	LCD_DATA = Cmd ;
	LCD_Enable();
	#endif
	_delay_ms(2);
}
 108:	cf 91       	pop	r28
 10a:	08 95       	ret

0000010c <LCD_Clear_Screen>:
 * 			@retval						-NONE																		*
 * 			Note						-NONE																		*
 ********************************************************************************************************************/
void LCD_Clear_Screen ()
{
	LCD_Wirte_Cmd(LCD_CLEAR_SCREEN);
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_Wirte_Cmd>
 112:	08 95       	ret

00000114 <LCD_Init>:
 114:	8f e1       	ldi	r24, 0x1F	; 31
 116:	9e e4       	ldi	r25, 0x4E	; 78
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <LCD_Init+0x4>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <LCD_Init+0xa>
 11e:	00 00       	nop
 * 			Note						-NONE																		*
 ********************************************************************************************************************/
void LCD_Init()
{
	_delay_ms(20) ;
	LCD_CTRL_DIR = 0x07 ; 
 120:	87 e0       	ldi	r24, 0x07	; 7
 122:	87 bb       	out	0x17, r24	; 23
	LCD_CTRL &= ~(0x07);
 124:	88 b3       	in	r24, 0x18	; 24
 126:	88 7f       	andi	r24, 0xF8	; 248
 128:	88 bb       	out	0x18, r24	; 24
	SET_REG(LCD_DATA_DIR);
 12a:	8f ef       	ldi	r24, 0xFF	; 255
 12c:	8a bb       	out	0x1a, r24	; 26
 12e:	87 e9       	ldi	r24, 0x97	; 151
 130:	9a e3       	ldi	r25, 0x3A	; 58
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <LCD_Init+0x1e>
 136:	00 c0       	rjmp	.+0      	; 0x138 <LCD_Init+0x24>
 138:	00 00       	nop
	_delay_ms(15);
	LCD_Clear_Screen();
 13a:	0e 94 86 00 	call	0x10c	; 0x10c <LCD_Clear_Screen>
	LCD_Wirte_Cmd(LCD_FUNCTION_8BIT_2LINES);
	#endif
	
#ifdef FOUR_BIT_MODE	

	LCD_Wirte_Cmd(0x20);
 13e:	80 e2       	ldi	r24, 0x20	; 32
 140:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_Wirte_Cmd>
	LCD_Wirte_Cmd(0x20);
 144:	80 e2       	ldi	r24, 0x20	; 32
 146:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_Wirte_Cmd>
	LCD_Wirte_Cmd(0x80);
 14a:	80 e8       	ldi	r24, 0x80	; 128
 14c:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_Wirte_Cmd>
 150:	87 ee       	ldi	r24, 0xE7	; 231
 152:	93 e0       	ldi	r25, 0x03	; 3
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <LCD_Init+0x40>
 158:	00 c0       	rjmp	.+0      	; 0x15a <LCD_Init+0x46>
 15a:	00 00       	nop
	_delay_ms(1);
	
	LCD_Wirte_Cmd(0x00);
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_Wirte_Cmd>
	LCD_Wirte_Cmd(0xF0);
 162:	80 ef       	ldi	r24, 0xF0	; 240
 164:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_Wirte_Cmd>
 168:	87 ee       	ldi	r24, 0xE7	; 231
 16a:	93 e0       	ldi	r25, 0x03	; 3
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <LCD_Init+0x58>
 170:	00 c0       	rjmp	.+0      	; 0x172 <LCD_Init+0x5e>
 172:	00 00       	nop
	_delay_ms(1);
	
	LCD_Wirte_Cmd(0x00);
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_Wirte_Cmd>
	LCD_Wirte_Cmd(0x10);
 17a:	80 e1       	ldi	r24, 0x10	; 16
 17c:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_Wirte_Cmd>
 180:	8f ec       	ldi	r24, 0xCF	; 207
 182:	97 e0       	ldi	r25, 0x07	; 7
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <LCD_Init+0x70>
 188:	00 c0       	rjmp	.+0      	; 0x18a <LCD_Init+0x76>
 18a:	00 00       	nop
	_delay_ms(2);
	
// 	LCD_Wirte_Cmd(0x00);	By Default
// 	LCD_Wirte_Cmd(0x60);	By Default

	Init_Is_Finshed = 1 ; // when we init LCD in case four bit we will send 0x2xxxx  , 0x2xxxx , 0x8xxxx
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	// SO When we send 0x0010 0000 last four bit will be read from lcd and 0000 will not be read
	#endif
	LCD_Wirte_Cmd(LCD_ENTRY_MODE);
 192:	86 e0       	ldi	r24, 0x06	; 6
 194:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_Wirte_Cmd>
	LCD_Wirte_Cmd(LCD_BEGIN_AT_FIRST_ROW);
 198:	80 e8       	ldi	r24, 0x80	; 128
 19a:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_Wirte_Cmd>
	LCD_Wirte_Cmd(LCD_DISP_ON_CURSOR_BLINK);	
 19e:	8f e0       	ldi	r24, 0x0F	; 15
 1a0:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_Wirte_Cmd>
 1a4:	08 95       	ret

000001a6 <Lcd_Write_Char>:
 * 			@retval						-NONE																		*
 * 			Note						-NONE																		*
 *******************************************************************************************************************/

void Lcd_Write_Char(uint8_t Char)
{
 1a6:	cf 93       	push	r28
 1a8:	c8 2f       	mov	r28, r24
	
	DIO_Write_Pin(PORT_B,RS_SWITCH,HIGH);
 1aa:	41 e0       	ldi	r20, 0x01	; 1
 1ac:	60 e0       	ldi	r22, 0x00	; 0
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <DIO_Write_Pin>
	DIO_Write_Pin(PORT_B,RW_SWITCH,LOW);
 1b4:	40 e0       	ldi	r20, 0x00	; 0
 1b6:	61 e0       	ldi	r22, 0x01	; 1
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <DIO_Write_Pin>
#ifdef FOUR_BIT_MODE
	LCD_DATA = (LCD_DATA&0x0F) | (Char&0xF0);
 1be:	8b b3       	in	r24, 0x1b	; 27
 1c0:	8f 70       	andi	r24, 0x0F	; 15
 1c2:	9c 2f       	mov	r25, r28
 1c4:	90 7f       	andi	r25, 0xF0	; 240
 1c6:	89 2b       	or	r24, r25
 1c8:	8b bb       	out	0x1b, r24	; 27
	LCD_Enable ();
 1ca:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Enable>
 1ce:	87 ee       	ldi	r24, 0xE7	; 231
 1d0:	93 e0       	ldi	r25, 0x03	; 3
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <Lcd_Write_Char+0x2c>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <Lcd_Write_Char+0x32>
 1d8:	00 00       	nop
	_delay_ms(1);
	LCD_DATA = (((LCD_DATA&0xF0) | (Char&0x0F))<<4);
 1da:	8b b3       	in	r24, 0x1b	; 27
 1dc:	c2 95       	swap	r28
 1de:	c0 7f       	andi	r28, 0xF0	; 240
 1e0:	cb bb       	out	0x1b, r28	; 27
	LCD_Enable ();
 1e2:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Enable>
#ifdef EIGHT_BIT_MODE
	_delay_ms(1);
	LCD_DATA = Char ;
	LCD_Enable();
#endif
}
 1e6:	cf 91       	pop	r28
 1e8:	08 95       	ret

000001ea <LCD_GO_TO_INDEX>:
 * 			Note						-NONE																		*
 ********************************************************************************************************************/
void LCD_GO_TO_INDEX(uint8_t ROW , uint8_t COL)
{
	uint8_t Address ; 
	if (ROW<2 && COL <16){
 1ea:	82 30       	cpi	r24, 0x02	; 2
 1ec:	50 f4       	brcc	.+20     	; 0x202 <LCD_GO_TO_INDEX+0x18>
 1ee:	60 31       	cpi	r22, 0x10	; 16
 1f0:	40 f4       	brcc	.+16     	; 0x202 <LCD_GO_TO_INDEX+0x18>
		Address = ( ROW * Second_Row_Address ) + COL; // We multiply the row number by the starting address of the second row and add the column value
 1f2:	90 e4       	ldi	r25, 0x40	; 64
 1f4:	89 9f       	mul	r24, r25
 1f6:	60 0d       	add	r22, r0
 1f8:	11 24       	eor	r1, r1
 1fa:	86 2f       	mov	r24, r22
		SET_BIT(Address,7);	// To set DDRAM Address we must set bit7 in Address . Address here limit by 7bits becouse has 80 Location
		LCD_Wirte_Cmd(Address);
 1fc:	80 68       	ori	r24, 0x80	; 128
 1fe:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_Wirte_Cmd>
 202:	08 95       	ret

00000204 <LCD_Write_String>:
 *			@param [in]					-COL																		*		
 * 			@retval						-NONE																		*
 * 			Note						-NONE																		*
 ********************************************************************************************************************/
void LCD_Write_String( uint8_t* STRING , uint8_t ROW , uint8_t COL)
{
 204:	ef 92       	push	r14
 206:	ff 92       	push	r15
 208:	0f 93       	push	r16
 20a:	1f 93       	push	r17
 20c:	cf 93       	push	r28
 20e:	df 93       	push	r29
 210:	8c 01       	movw	r16, r24
 212:	d6 2f       	mov	r29, r22
 214:	f4 2e       	mov	r15, r20
	LCD_GO_TO_INDEX(ROW,COL);
 216:	64 2f       	mov	r22, r20
 218:	8d 2f       	mov	r24, r29
 21a:	0e 94 f5 00 	call	0x1ea	; 0x1ea <LCD_GO_TO_INDEX>
	uint8_t index = 0 ;
	uint8_t Line = 0 ;
 21e:	e1 2c       	mov	r14, r1
 * 			Note						-NONE																		*
 ********************************************************************************************************************/
void LCD_Write_String( uint8_t* STRING , uint8_t ROW , uint8_t COL)
{
	LCD_GO_TO_INDEX(ROW,COL);
	uint8_t index = 0 ;
 220:	c0 e0       	ldi	r28, 0x00	; 0
	uint8_t Line = 0 ;
	while(STRING[index]!='\0' && ((ROW*16)+(index+COL))<=32 )  // Know if there are empty position in 2 * 16 LCD 
 222:	1c c0       	rjmp	.+56     	; 0x25c <LCD_Write_String+0x58>
	{
		if (( (ROW*16)+(index+COL) )<16 ) // Write in First Row 
 224:	20 31       	cpi	r18, 0x10	; 16
 226:	31 05       	cpc	r19, r1
 228:	24 f4       	brge	.+8      	; 0x232 <LCD_Write_String+0x2e>
		{
			Lcd_Write_Char(STRING[index]);
 22a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <Lcd_Write_Char>
			index++;
 22e:	cf 5f       	subi	r28, 0xFF	; 255
 230:	15 c0       	rjmp	.+42     	; 0x25c <LCD_Write_String+0x58>
		}
		else if (( (ROW*16)+(index+COL) ) == 16 && Line == 0 ) // IF I REACH END OF ROW0 I WILL MOVE TO ROW1 
 232:	20 31       	cpi	r18, 0x10	; 16
 234:	31 05       	cpc	r19, r1
 236:	49 f4       	brne	.+18     	; 0x24a <LCD_Write_String+0x46>
 238:	e1 10       	cpse	r14, r1
 23a:	07 c0       	rjmp	.+14     	; 0x24a <LCD_Write_String+0x46>
		{
			LCD_GO_TO_INDEX(1,0) ; 
 23c:	60 e0       	ldi	r22, 0x00	; 0
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	0e 94 f5 00 	call	0x1ea	; 0x1ea <LCD_GO_TO_INDEX>
			Line = 1 ; 
 244:	ee 24       	eor	r14, r14
 246:	e3 94       	inc	r14
 248:	09 c0       	rjmp	.+18     	; 0x25c <LCD_Write_String+0x58>
		}
		else if (( (ROW*16)+(index+COL) ) < 32 && Line==1  ) // i will start write in ROW1 till end of Row
 24a:	20 32       	cpi	r18, 0x20	; 32
 24c:	31 05       	cpc	r19, r1
 24e:	34 f4       	brge	.+12     	; 0x25c <LCD_Write_String+0x58>
 250:	91 e0       	ldi	r25, 0x01	; 1
 252:	e9 12       	cpse	r14, r25
 254:	03 c0       	rjmp	.+6      	; 0x25c <LCD_Write_String+0x58>
		{
			Lcd_Write_Char(STRING[index]);
 256:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <Lcd_Write_Char>
			index++ ;
 25a:	cf 5f       	subi	r28, 0xFF	; 255
void LCD_Write_String( uint8_t* STRING , uint8_t ROW , uint8_t COL)
{
	LCD_GO_TO_INDEX(ROW,COL);
	uint8_t index = 0 ;
	uint8_t Line = 0 ;
	while(STRING[index]!='\0' && ((ROW*16)+(index+COL))<=32 )  // Know if there are empty position in 2 * 16 LCD 
 25c:	f8 01       	movw	r30, r16
 25e:	ec 0f       	add	r30, r28
 260:	f1 1d       	adc	r31, r1
 262:	80 81       	ld	r24, Z
 264:	88 23       	and	r24, r24
 266:	61 f0       	breq	.+24     	; 0x280 <LCD_Write_String+0x7c>
 268:	2f 2d       	mov	r18, r15
 26a:	30 e0       	ldi	r19, 0x00	; 0
 26c:	2c 0f       	add	r18, r28
 26e:	31 1d       	adc	r19, r1
 270:	90 e1       	ldi	r25, 0x10	; 16
 272:	d9 9f       	mul	r29, r25
 274:	20 0d       	add	r18, r0
 276:	31 1d       	adc	r19, r1
 278:	11 24       	eor	r1, r1
 27a:	21 32       	cpi	r18, 0x21	; 33
 27c:	31 05       	cpc	r19, r1
 27e:	94 f2       	brlt	.-92     	; 0x224 <LCD_Write_String+0x20>
		{
			Lcd_Write_Char(STRING[index]);
			index++ ;
		}		
	}
}
 280:	df 91       	pop	r29
 282:	cf 91       	pop	r28
 284:	1f 91       	pop	r17
 286:	0f 91       	pop	r16
 288:	ff 90       	pop	r15
 28a:	ef 90       	pop	r14
 28c:	08 95       	ret

0000028e <main>:
#include "LCD.h"
#include "USART.h"
 #include "string.h"
 Error_Status_t Compare_String(uint8_t* Buffer1 , uint8_t* Buffer2);
int main(void)
{
 28e:	cf 93       	push	r28
 290:	df 93       	push	r29
 292:	cd b7       	in	r28, 0x3d	; 61
 294:	de b7       	in	r29, 0x3e	; 62
 296:	6e 97       	sbiw	r28, 0x1e	; 30
 298:	0f b6       	in	r0, 0x3f	; 63
 29a:	f8 94       	cli
 29c:	de bf       	out	0x3e, r29	; 62
 29e:	0f be       	out	0x3f, r0	; 63
 2a0:	cd bf       	out	0x3d, r28	; 61
	uint8_t Buffer[30] ;
	DIO_Write_Pin_Dir(PORT_D,GPIO_PIN_0,IN);
 2a2:	40 e0       	ldi	r20, 0x00	; 0
 2a4:	60 e0       	ldi	r22, 0x00	; 0
 2a6:	83 e0       	ldi	r24, 0x03	; 3
 2a8:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <DIO_Write_Pin_Dir>
	DIO_Write_Pin_Dir(PORT_D,GPIO_PIN_1,OUT);
 2ac:	41 e0       	ldi	r20, 0x01	; 1
 2ae:	61 e0       	ldi	r22, 0x01	; 1
 2b0:	83 e0       	ldi	r24, 0x03	; 3
 2b2:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <DIO_Write_Pin_Dir>
	LCD_Init();
 2b6:	0e 94 8a 00 	call	0x114	; 0x114 <LCD_Init>
	USART_Init();
 2ba:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <USART_Init>
	while(1)
	{
		USAERT_Recieve_STRING(Buffer);
 2be:	ce 01       	movw	r24, r28
 2c0:	01 96       	adiw	r24, 0x01	; 1
 2c2:	0e 94 ee 02 	call	0x5dc	; 0x5dc <USAERT_Recieve_STRING>
		LCD_Write_String(Buffer,0,0);
 2c6:	40 e0       	ldi	r20, 0x00	; 0
 2c8:	60 e0       	ldi	r22, 0x00	; 0
 2ca:	ce 01       	movw	r24, r28
 2cc:	01 96       	adiw	r24, 0x01	; 1
 2ce:	0e 94 02 01 	call	0x204	; 0x204 <LCD_Write_String>
		LCD_Clear_Screen();
 2d2:	0e 94 86 00 	call	0x10c	; 0x10c <LCD_Clear_Screen>
 2d6:	f3 cf       	rjmp	.-26     	; 0x2be <main+0x30>

000002d8 <DIO_Write_Pin_Dir>:
			{
				DDRD = 0XFF ;
			}
			else
			{
				DDRD = 0X00 ;
 2d8:	81 30       	cpi	r24, 0x01	; 1
 2da:	11 f1       	breq	.+68     	; 0x320 <DIO_Write_Pin_Dir+0x48>
 2dc:	30 f0       	brcs	.+12     	; 0x2ea <DIO_Write_Pin_Dir+0x12>
 2de:	82 30       	cpi	r24, 0x02	; 2
 2e0:	d1 f1       	breq	.+116    	; 0x356 <DIO_Write_Pin_Dir+0x7e>
 2e2:	83 30       	cpi	r24, 0x03	; 3
 2e4:	09 f4       	brne	.+2      	; 0x2e8 <DIO_Write_Pin_Dir+0x10>
 2e6:	52 c0       	rjmp	.+164    	; 0x38c <DIO_Write_Pin_Dir+0xb4>
 2e8:	08 95       	ret
 2ea:	41 30       	cpi	r20, 0x01	; 1
 2ec:	59 f4       	brne	.+22     	; 0x304 <DIO_Write_Pin_Dir+0x2c>
 2ee:	2a b3       	in	r18, 0x1a	; 26
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	02 c0       	rjmp	.+4      	; 0x2fa <DIO_Write_Pin_Dir+0x22>
 2f6:	88 0f       	add	r24, r24
 2f8:	99 1f       	adc	r25, r25
 2fa:	6a 95       	dec	r22
 2fc:	e2 f7       	brpl	.-8      	; 0x2f6 <DIO_Write_Pin_Dir+0x1e>
 2fe:	82 2b       	or	r24, r18
 300:	8a bb       	out	0x1a, r24	; 26
 302:	08 95       	ret
 304:	41 11       	cpse	r20, r1
 306:	5c c0       	rjmp	.+184    	; 0x3c0 <DIO_Write_Pin_Dir+0xe8>
 308:	2a b3       	in	r18, 0x1a	; 26
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	02 c0       	rjmp	.+4      	; 0x314 <DIO_Write_Pin_Dir+0x3c>
 310:	88 0f       	add	r24, r24
 312:	99 1f       	adc	r25, r25
 314:	6a 95       	dec	r22
 316:	e2 f7       	brpl	.-8      	; 0x310 <DIO_Write_Pin_Dir+0x38>
 318:	80 95       	com	r24
 31a:	82 23       	and	r24, r18
 31c:	8a bb       	out	0x1a, r24	; 26
 31e:	08 95       	ret
 320:	41 30       	cpi	r20, 0x01	; 1
 322:	59 f4       	brne	.+22     	; 0x33a <DIO_Write_Pin_Dir+0x62>
 324:	27 b3       	in	r18, 0x17	; 23
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	02 c0       	rjmp	.+4      	; 0x330 <DIO_Write_Pin_Dir+0x58>
 32c:	88 0f       	add	r24, r24
 32e:	99 1f       	adc	r25, r25
 330:	6a 95       	dec	r22
 332:	e2 f7       	brpl	.-8      	; 0x32c <DIO_Write_Pin_Dir+0x54>
 334:	82 2b       	or	r24, r18
 336:	87 bb       	out	0x17, r24	; 23
 338:	08 95       	ret
 33a:	41 11       	cpse	r20, r1
 33c:	41 c0       	rjmp	.+130    	; 0x3c0 <DIO_Write_Pin_Dir+0xe8>
 33e:	27 b3       	in	r18, 0x17	; 23
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	02 c0       	rjmp	.+4      	; 0x34a <DIO_Write_Pin_Dir+0x72>
 346:	88 0f       	add	r24, r24
 348:	99 1f       	adc	r25, r25
 34a:	6a 95       	dec	r22
 34c:	e2 f7       	brpl	.-8      	; 0x346 <DIO_Write_Pin_Dir+0x6e>
 34e:	80 95       	com	r24
 350:	82 23       	and	r24, r18
 352:	87 bb       	out	0x17, r24	; 23
 354:	08 95       	ret
 356:	41 30       	cpi	r20, 0x01	; 1
 358:	59 f4       	brne	.+22     	; 0x370 <DIO_Write_Pin_Dir+0x98>
 35a:	24 b3       	in	r18, 0x14	; 20
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	02 c0       	rjmp	.+4      	; 0x366 <DIO_Write_Pin_Dir+0x8e>
 362:	88 0f       	add	r24, r24
 364:	99 1f       	adc	r25, r25
 366:	6a 95       	dec	r22
 368:	e2 f7       	brpl	.-8      	; 0x362 <DIO_Write_Pin_Dir+0x8a>
 36a:	82 2b       	or	r24, r18
 36c:	84 bb       	out	0x14, r24	; 20
 36e:	08 95       	ret
 370:	41 11       	cpse	r20, r1
 372:	26 c0       	rjmp	.+76     	; 0x3c0 <DIO_Write_Pin_Dir+0xe8>
 374:	24 b3       	in	r18, 0x14	; 20
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	02 c0       	rjmp	.+4      	; 0x380 <DIO_Write_Pin_Dir+0xa8>
 37c:	88 0f       	add	r24, r24
 37e:	99 1f       	adc	r25, r25
 380:	6a 95       	dec	r22
 382:	e2 f7       	brpl	.-8      	; 0x37c <DIO_Write_Pin_Dir+0xa4>
 384:	80 95       	com	r24
 386:	82 23       	and	r24, r18
 388:	84 bb       	out	0x14, r24	; 20
 38a:	08 95       	ret
 38c:	41 30       	cpi	r20, 0x01	; 1
 38e:	59 f4       	brne	.+22     	; 0x3a6 <DIO_Write_Pin_Dir+0xce>
 390:	21 b3       	in	r18, 0x11	; 17
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	02 c0       	rjmp	.+4      	; 0x39c <DIO_Write_Pin_Dir+0xc4>
 398:	88 0f       	add	r24, r24
 39a:	99 1f       	adc	r25, r25
 39c:	6a 95       	dec	r22
 39e:	e2 f7       	brpl	.-8      	; 0x398 <DIO_Write_Pin_Dir+0xc0>
 3a0:	82 2b       	or	r24, r18
 3a2:	81 bb       	out	0x11, r24	; 17
 3a4:	08 95       	ret
 3a6:	41 11       	cpse	r20, r1
 3a8:	0b c0       	rjmp	.+22     	; 0x3c0 <DIO_Write_Pin_Dir+0xe8>
 3aa:	21 b3       	in	r18, 0x11	; 17
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <DIO_Write_Pin_Dir+0xde>
 3b2:	88 0f       	add	r24, r24
 3b4:	99 1f       	adc	r25, r25
 3b6:	6a 95       	dec	r22
 3b8:	e2 f7       	brpl	.-8      	; 0x3b2 <DIO_Write_Pin_Dir+0xda>
 3ba:	80 95       	com	r24
 3bc:	82 23       	and	r24, r18
 3be:	81 bb       	out	0x11, r24	; 17
 3c0:	08 95       	ret

000003c2 <DIO_Write_Pin>:
	}
}

void DIO_Write_Pin( GPIO_PORT_t PortNumber , GPIO_PIN_t PinNumber , uint8_t value  )
{
	switch( PortNumber )
 3c2:	81 30       	cpi	r24, 0x01	; 1
 3c4:	11 f1       	breq	.+68     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 3c6:	30 f0       	brcs	.+12     	; 0x3d4 <DIO_Write_Pin+0x12>
 3c8:	82 30       	cpi	r24, 0x02	; 2
 3ca:	d1 f1       	breq	.+116    	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 3cc:	83 30       	cpi	r24, 0x03	; 3
 3ce:	09 f4       	brne	.+2      	; 0x3d2 <DIO_Write_Pin+0x10>
 3d0:	52 c0       	rjmp	.+164    	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 3d2:	08 95       	ret
	{
		case PORT_A :
		if ( value == HIGH )
 3d4:	41 30       	cpi	r20, 0x01	; 1
 3d6:	59 f4       	brne	.+22     	; 0x3ee <DIO_Write_Pin+0x2c>
		{
			PORTA |= (1<<PinNumber) ;
 3d8:	2b b3       	in	r18, 0x1b	; 27
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	02 c0       	rjmp	.+4      	; 0x3e4 <DIO_Write_Pin+0x22>
 3e0:	88 0f       	add	r24, r24
 3e2:	99 1f       	adc	r25, r25
 3e4:	6a 95       	dec	r22
 3e6:	e2 f7       	brpl	.-8      	; 0x3e0 <DIO_Write_Pin+0x1e>
 3e8:	82 2b       	or	r24, r18
 3ea:	8b bb       	out	0x1b, r24	; 27
 3ec:	08 95       	ret
		}
		else if ( value == LOW )
 3ee:	41 11       	cpse	r20, r1
 3f0:	5c c0       	rjmp	.+184    	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
		{
			PORTA &= ~(1<<PinNumber) ;
 3f2:	2b b3       	in	r18, 0x1b	; 27
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	02 c0       	rjmp	.+4      	; 0x3fe <DIO_Write_Pin+0x3c>
 3fa:	88 0f       	add	r24, r24
 3fc:	99 1f       	adc	r25, r25
 3fe:	6a 95       	dec	r22
 400:	e2 f7       	brpl	.-8      	; 0x3fa <DIO_Write_Pin+0x38>
 402:	80 95       	com	r24
 404:	82 23       	and	r24, r18
 406:	8b bb       	out	0x1b, r24	; 27
 408:	08 95       	ret
		{
			//	Error Handling
		}
		break ;
		case PORT_B :
		if ( value == HIGH )
 40a:	41 30       	cpi	r20, 0x01	; 1
 40c:	59 f4       	brne	.+22     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
		{
			PORTB |= (1<<PinNumber) ;
 40e:	28 b3       	in	r18, 0x18	; 24
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	02 c0       	rjmp	.+4      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 416:	88 0f       	add	r24, r24
 418:	99 1f       	adc	r25, r25
 41a:	6a 95       	dec	r22
 41c:	e2 f7       	brpl	.-8      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 41e:	82 2b       	or	r24, r18
 420:	88 bb       	out	0x18, r24	; 24
 422:	08 95       	ret
		}
		else if ( value == LOW )
 424:	41 11       	cpse	r20, r1
 426:	41 c0       	rjmp	.+130    	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
		{
			PORTB &= ~(1<<PinNumber) ;
 428:	28 b3       	in	r18, 0x18	; 24
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	02 c0       	rjmp	.+4      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 430:	88 0f       	add	r24, r24
 432:	99 1f       	adc	r25, r25
 434:	6a 95       	dec	r22
 436:	e2 f7       	brpl	.-8      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 438:	80 95       	com	r24
 43a:	82 23       	and	r24, r18
 43c:	88 bb       	out	0x18, r24	; 24
 43e:	08 95       	ret
		{
			//	Error Handling
		}
		break ;
		case PORT_C :
		if ( value == HIGH )
 440:	41 30       	cpi	r20, 0x01	; 1
 442:	59 f4       	brne	.+22     	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
		{
			PORTC |= (1<<PinNumber) ;
 444:	25 b3       	in	r18, 0x15	; 21
 446:	81 e0       	ldi	r24, 0x01	; 1
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	02 c0       	rjmp	.+4      	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 44c:	88 0f       	add	r24, r24
 44e:	99 1f       	adc	r25, r25
 450:	6a 95       	dec	r22
 452:	e2 f7       	brpl	.-8      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 454:	82 2b       	or	r24, r18
 456:	85 bb       	out	0x15, r24	; 21
 458:	08 95       	ret
		}
		else if ( value == LOW )
 45a:	41 11       	cpse	r20, r1
 45c:	26 c0       	rjmp	.+76     	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
		{
			PORTC &= ~(1<<PinNumber) ;
 45e:	25 b3       	in	r18, 0x15	; 21
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	02 c0       	rjmp	.+4      	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
 466:	88 0f       	add	r24, r24
 468:	99 1f       	adc	r25, r25
 46a:	6a 95       	dec	r22
 46c:	e2 f7       	brpl	.-8      	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 46e:	80 95       	com	r24
 470:	82 23       	and	r24, r18
 472:	85 bb       	out	0x15, r24	; 21
 474:	08 95       	ret
		{
			//	Error Handling
		}
		break ;
		case PORT_D :
		if ( value == HIGH )
 476:	41 30       	cpi	r20, 0x01	; 1
 478:	59 f4       	brne	.+22     	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
		{
			PORTD |= (1<<PinNumber) ;
 47a:	22 b3       	in	r18, 0x12	; 18
 47c:	81 e0       	ldi	r24, 0x01	; 1
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	02 c0       	rjmp	.+4      	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
 482:	88 0f       	add	r24, r24
 484:	99 1f       	adc	r25, r25
 486:	6a 95       	dec	r22
 488:	e2 f7       	brpl	.-8      	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
 48a:	82 2b       	or	r24, r18
 48c:	82 bb       	out	0x12, r24	; 18
 48e:	08 95       	ret
		}
		else if ( value == LOW )
 490:	41 11       	cpse	r20, r1
 492:	0b c0       	rjmp	.+22     	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
		{
			PORTD &= ~(1<<PinNumber) ;
 494:	22 b3       	in	r18, 0x12	; 18
 496:	81 e0       	ldi	r24, 0x01	; 1
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	02 c0       	rjmp	.+4      	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
 49c:	88 0f       	add	r24, r24
 49e:	99 1f       	adc	r25, r25
 4a0:	6a 95       	dec	r22
 4a2:	e2 f7       	brpl	.-8      	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 4a4:	80 95       	com	r24
 4a6:	82 23       	and	r24, r18
 4a8:	82 bb       	out	0x12, r24	; 18
 4aa:	08 95       	ret

000004ac <__vector_1>:
			break;
	}
}
/*******************************ISR********************************/
ISR(INT0_vect)
{
 4ac:	1f 92       	push	r1
 4ae:	0f 92       	push	r0
 4b0:	0f b6       	in	r0, 0x3f	; 63
 4b2:	0f 92       	push	r0
 4b4:	11 24       	eor	r1, r1
 4b6:	2f 93       	push	r18
 4b8:	3f 93       	push	r19
 4ba:	4f 93       	push	r20
 4bc:	5f 93       	push	r21
 4be:	6f 93       	push	r22
 4c0:	7f 93       	push	r23
 4c2:	8f 93       	push	r24
 4c4:	9f 93       	push	r25
 4c6:	af 93       	push	r26
 4c8:	bf 93       	push	r27
 4ca:	ef 93       	push	r30
 4cc:	ff 93       	push	r31
	if (INT0_Fptr!=NULLPTR)
 4ce:	e0 91 65 00 	lds	r30, 0x0065	; 0x800065 <INT0_Fptr>
 4d2:	f0 91 66 00 	lds	r31, 0x0066	; 0x800066 <INT0_Fptr+0x1>
 4d6:	30 97       	sbiw	r30, 0x00	; 0
 4d8:	09 f0       	breq	.+2      	; 0x4dc <__vector_1+0x30>
	{
		INT0_Fptr();
 4da:	09 95       	icall
	}
}
 4dc:	ff 91       	pop	r31
 4de:	ef 91       	pop	r30
 4e0:	bf 91       	pop	r27
 4e2:	af 91       	pop	r26
 4e4:	9f 91       	pop	r25
 4e6:	8f 91       	pop	r24
 4e8:	7f 91       	pop	r23
 4ea:	6f 91       	pop	r22
 4ec:	5f 91       	pop	r21
 4ee:	4f 91       	pop	r20
 4f0:	3f 91       	pop	r19
 4f2:	2f 91       	pop	r18
 4f4:	0f 90       	pop	r0
 4f6:	0f be       	out	0x3f, r0	; 63
 4f8:	0f 90       	pop	r0
 4fa:	1f 90       	pop	r1
 4fc:	18 95       	reti

000004fe <__vector_2>:
ISR(INT1_vect)
{
 4fe:	1f 92       	push	r1
 500:	0f 92       	push	r0
 502:	0f b6       	in	r0, 0x3f	; 63
 504:	0f 92       	push	r0
 506:	11 24       	eor	r1, r1
 508:	2f 93       	push	r18
 50a:	3f 93       	push	r19
 50c:	4f 93       	push	r20
 50e:	5f 93       	push	r21
 510:	6f 93       	push	r22
 512:	7f 93       	push	r23
 514:	8f 93       	push	r24
 516:	9f 93       	push	r25
 518:	af 93       	push	r26
 51a:	bf 93       	push	r27
 51c:	ef 93       	push	r30
 51e:	ff 93       	push	r31
	if (INT1_Fptr!=NULLPTR)
 520:	e0 91 63 00 	lds	r30, 0x0063	; 0x800063 <INT1_Fptr>
 524:	f0 91 64 00 	lds	r31, 0x0064	; 0x800064 <INT1_Fptr+0x1>
 528:	30 97       	sbiw	r30, 0x00	; 0
 52a:	09 f0       	breq	.+2      	; 0x52e <__vector_2+0x30>
	{
		INT1_Fptr();
 52c:	09 95       	icall
	}
}
 52e:	ff 91       	pop	r31
 530:	ef 91       	pop	r30
 532:	bf 91       	pop	r27
 534:	af 91       	pop	r26
 536:	9f 91       	pop	r25
 538:	8f 91       	pop	r24
 53a:	7f 91       	pop	r23
 53c:	6f 91       	pop	r22
 53e:	5f 91       	pop	r21
 540:	4f 91       	pop	r20
 542:	3f 91       	pop	r19
 544:	2f 91       	pop	r18
 546:	0f 90       	pop	r0
 548:	0f be       	out	0x3f, r0	; 63
 54a:	0f 90       	pop	r0
 54c:	1f 90       	pop	r1
 54e:	18 95       	reti

00000550 <__vector_3>:
ISR(INT2_vect)
{
 550:	1f 92       	push	r1
 552:	0f 92       	push	r0
 554:	0f b6       	in	r0, 0x3f	; 63
 556:	0f 92       	push	r0
 558:	11 24       	eor	r1, r1
 55a:	2f 93       	push	r18
 55c:	3f 93       	push	r19
 55e:	4f 93       	push	r20
 560:	5f 93       	push	r21
 562:	6f 93       	push	r22
 564:	7f 93       	push	r23
 566:	8f 93       	push	r24
 568:	9f 93       	push	r25
 56a:	af 93       	push	r26
 56c:	bf 93       	push	r27
 56e:	ef 93       	push	r30
 570:	ff 93       	push	r31
	if (INT2_Fptr!=NULLPTR)
 572:	e0 91 61 00 	lds	r30, 0x0061	; 0x800061 <INT2_Fptr>
 576:	f0 91 62 00 	lds	r31, 0x0062	; 0x800062 <INT2_Fptr+0x1>
 57a:	30 97       	sbiw	r30, 0x00	; 0
 57c:	09 f0       	breq	.+2      	; 0x580 <__vector_3+0x30>
	{
		INT2_Fptr();
 57e:	09 95       	icall
	}
 580:	ff 91       	pop	r31
 582:	ef 91       	pop	r30
 584:	bf 91       	pop	r27
 586:	af 91       	pop	r26
 588:	9f 91       	pop	r25
 58a:	8f 91       	pop	r24
 58c:	7f 91       	pop	r23
 58e:	6f 91       	pop	r22
 590:	5f 91       	pop	r21
 592:	4f 91       	pop	r20
 594:	3f 91       	pop	r19
 596:	2f 91       	pop	r18
 598:	0f 90       	pop	r0
 59a:	0f be       	out	0x3f, r0	; 63
 59c:	0f 90       	pop	r0
 59e:	1f 90       	pop	r1
 5a0:	18 95       	reti

000005a2 <USART_Init>:
			USART_Send_Char(*String);
			String++ ;
		}
	}
	return Loc_TX_String_Status ; 
}
 5a2:	8b b1       	in	r24, 0x0b	; 11
 5a4:	82 60       	ori	r24, 0x02	; 2
 5a6:	8b b9       	out	0x0b, r24	; 11
 5a8:	8a b1       	in	r24, 0x0a	; 10
 5aa:	88 60       	ori	r24, 0x08	; 8
 5ac:	8a b9       	out	0x0a, r24	; 10
 5ae:	8a b1       	in	r24, 0x0a	; 10
 5b0:	80 61       	ori	r24, 0x10	; 16
 5b2:	8a b9       	out	0x0a, r24	; 10
 5b4:	86 e8       	ldi	r24, 0x86	; 134
 5b6:	80 bd       	out	0x20, r24	; 32
 5b8:	82 e6       	ldi	r24, 0x62	; 98
 5ba:	89 b9       	out	0x09, r24	; 9
 5bc:	80 b5       	in	r24, 0x20	; 32
 5be:	81 60       	ori	r24, 0x01	; 1
 5c0:	80 bd       	out	0x20, r24	; 32
 5c2:	80 e0       	ldi	r24, 0x00	; 0
 5c4:	08 95       	ret

000005c6 <USART_Recieve_Char>:
 5c6:	00 97       	sbiw	r24, 0x00	; 0
 5c8:	39 f0       	breq	.+14     	; 0x5d8 <USART_Recieve_Char+0x12>
 5ca:	5f 9b       	sbis	0x0b, 7	; 11
 5cc:	fe cf       	rjmp	.-4      	; 0x5ca <USART_Recieve_Char+0x4>
 5ce:	2c b1       	in	r18, 0x0c	; 12
 5d0:	fc 01       	movw	r30, r24
 5d2:	20 83       	st	Z, r18
 5d4:	80 e0       	ldi	r24, 0x00	; 0
 5d6:	08 95       	ret
 5d8:	81 e0       	ldi	r24, 0x01	; 1
 5da:	08 95       	ret

000005dc <USAERT_Recieve_STRING>:
Error_Status_t USAERT_Recieve_STRING(uint8_t* String)
{
 5dc:	1f 93       	push	r17
 5de:	cf 93       	push	r28
 5e0:	df 93       	push	r29
 5e2:	ec 01       	movw	r28, r24
	Error_Status_t Loc_RX_STRING_Status = NO_Error ;
	if(String==NULLPTR)
 5e4:	89 2b       	or	r24, r25
 5e6:	11 f0       	breq	.+4      	; 0x5ec <USAERT_Recieve_STRING+0x10>
	}
	return Loc_TX_String_Status ; 
}
Error_Status_t USAERT_Recieve_STRING(uint8_t* String)
{
	Error_Status_t Loc_RX_STRING_Status = NO_Error ;
 5e8:	10 e0       	ldi	r17, 0x00	; 0
 5ea:	01 c0       	rjmp	.+2      	; 0x5ee <USAERT_Recieve_STRING+0x12>
	if(String==NULLPTR)
	{
		Loc_RX_STRING_Status = Error ; 
 5ec:	11 e0       	ldi	r17, 0x01	; 1
	}
	while (1)
	{
		USART_Recieve_Char(String);
 5ee:	ce 01       	movw	r24, r28
 5f0:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <USART_Recieve_Char>
		if(*String == '\r' || *String == '\n')
 5f4:	88 81       	ld	r24, Y
 5f6:	8d 30       	cpi	r24, 0x0D	; 13
 5f8:	21 f0       	breq	.+8      	; 0x602 <USAERT_Recieve_STRING+0x26>
 5fa:	8a 30       	cpi	r24, 0x0A	; 10
 5fc:	11 f0       	breq	.+4      	; 0x602 <USAERT_Recieve_STRING+0x26>
		{
			*String = '\0' ; 
			break;
		}
		String++;
 5fe:	21 96       	adiw	r28, 0x01	; 1
	}
 600:	f6 cf       	rjmp	.-20     	; 0x5ee <USAERT_Recieve_STRING+0x12>
	while (1)
	{
		USART_Recieve_Char(String);
		if(*String == '\r' || *String == '\n')
		{
			*String = '\0' ; 
 602:	18 82       	st	Y, r1
			break;
		}
		String++;
	}
	return Loc_RX_STRING_Status ; 
}
 604:	81 2f       	mov	r24, r17
 606:	df 91       	pop	r29
 608:	cf 91       	pop	r28
 60a:	1f 91       	pop	r17
 60c:	08 95       	ret

0000060e <_exit>:
 60e:	f8 94       	cli

00000610 <__stop_program>:
 610:	ff cf       	rjmp	.-2      	; 0x610 <__stop_program>
