
AVR_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000057c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000005f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800060  00800060  000005f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000620  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  0000065c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001317  00000000  00000000  000007bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000976  00000000  00000000  00001ad3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c70  00000000  00000000  00002449  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000380  00000000  00000000  000030bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000078c  00000000  00000000  0000343c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000eaf  00000000  00000000  00003bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00004a77  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__vector_1>
   8:	0c 94 38 02 	jmp	0x470	; 0x470 <__vector_2>
   c:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e7       	ldi	r30, 0x7C	; 124
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 36       	cpi	r26, 0x66	; 102
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 00 01 	call	0x200	; 0x200 <main>
  8a:	0c 94 bc 02 	jmp	0x578	; 0x578 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_Enable>:
 * 			@retval						-NONE																		*
 * 			Note						-NONE																		*
 ********************************************************************************************************************/
void LCD_Enable ()
{
	DIO_Write_Pin(PORT_B,EN_SWITCH,HIGH);
  92:	41 e0       	ldi	r20, 0x01	; 1
  94:	62 e0       	ldi	r22, 0x02	; 2
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	0e 94 9a 01 	call	0x334	; 0x334 <DIO_Write_Pin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9c:	8f e4       	ldi	r24, 0x4F	; 79
  9e:	93 ec       	ldi	r25, 0xC3	; 195
  a0:	01 97       	sbiw	r24, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <LCD_Enable+0xe>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <LCD_Enable+0x14>
  a6:	00 00       	nop
	_delay_ms(50);
	DIO_Write_Pin(PORT_B,EN_SWITCH,LOW);
  a8:	40 e0       	ldi	r20, 0x00	; 0
  aa:	62 e0       	ldi	r22, 0x02	; 2
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	0e 94 9a 01 	call	0x334	; 0x334 <DIO_Write_Pin>
  b2:	08 95       	ret

000000b4 <LCD_Wirte_Cmd>:
 * 			@param [in]					-Cmd Command user will inter to preform specific operation					*
 * 			@retval						-NONE																		*
 * 			Note						-NONE																		*
 ********************************************************************************************************************/
void LCD_Wirte_Cmd (uint8_t Cmd)
{
  b4:	cf 93       	push	r28
  b6:	c8 2f       	mov	r28, r24
	DIO_Write_Pin(PORT_B,RS_SWITCH,LOW);
  b8:	40 e0       	ldi	r20, 0x00	; 0
  ba:	60 e0       	ldi	r22, 0x00	; 0
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	0e 94 9a 01 	call	0x334	; 0x334 <DIO_Write_Pin>
	DIO_Write_Pin(PORT_B,RW_SWITCH,LOW);
  c2:	40 e0       	ldi	r20, 0x00	; 0
  c4:	61 e0       	ldi	r22, 0x01	; 1
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	0e 94 9a 01 	call	0x334	; 0x334 <DIO_Write_Pin>
		LCD_Enable ();
	}
	#endif
	
	#ifdef EIGHT_BIT_MODE
	LCD_DATA = Cmd ;
  cc:	cb bb       	out	0x1b, r28	; 27
	LCD_Enable();
  ce:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Enable>
  d2:	8f ec       	ldi	r24, 0xCF	; 207
  d4:	97 e0       	ldi	r25, 0x07	; 7
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <LCD_Wirte_Cmd+0x22>
  da:	00 c0       	rjmp	.+0      	; 0xdc <LCD_Wirte_Cmd+0x28>
  dc:	00 00       	nop
	#endif
	_delay_ms(2);
}
  de:	cf 91       	pop	r28
  e0:	08 95       	ret

000000e2 <LCD_Clear_Screen>:
 * 			@retval						-NONE																		*
 * 			Note						-NONE																		*
 ********************************************************************************************************************/
void LCD_Clear_Screen ()
{
	LCD_Wirte_Cmd(LCD_CLEAR_SCREEN);
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_Wirte_Cmd>
  e8:	08 95       	ret

000000ea <LCD_Init>:
  ea:	8f e1       	ldi	r24, 0x1F	; 31
  ec:	9e e4       	ldi	r25, 0x4E	; 78
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <LCD_Init+0x4>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <LCD_Init+0xa>
  f4:	00 00       	nop
 * 			Note						-NONE																		*
 ********************************************************************************************************************/
void LCD_Init()
{
	_delay_ms(20) ;
	LCD_CTRL_DIR = 0x07 ; 
  f6:	87 e0       	ldi	r24, 0x07	; 7
  f8:	87 bb       	out	0x17, r24	; 23
	LCD_CTRL &= ~(0x07);
  fa:	88 b3       	in	r24, 0x18	; 24
  fc:	88 7f       	andi	r24, 0xF8	; 248
  fe:	88 bb       	out	0x18, r24	; 24
	SET_REG(LCD_DATA_DIR);
 100:	8f ef       	ldi	r24, 0xFF	; 255
 102:	8a bb       	out	0x1a, r24	; 26
 104:	87 e9       	ldi	r24, 0x97	; 151
 106:	9a e3       	ldi	r25, 0x3A	; 58
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <LCD_Init+0x1e>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <LCD_Init+0x24>
 10e:	00 00       	nop
	_delay_ms(15);
	LCD_Clear_Screen();
 110:	0e 94 71 00 	call	0xe2	; 0xe2 <LCD_Clear_Screen>
	
	#ifdef EIGHT_BIT_MODE
	LCD_Wirte_Cmd(LCD_FUNCTION_8BIT_2LINES);
 114:	88 e3       	ldi	r24, 0x38	; 56
 116:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_Wirte_Cmd>
// 	LCD_Wirte_Cmd(0x60);	By Default

	Init_Is_Finshed = 1 ; // when we init LCD in case four bit we will send 0x2xxxx  , 0x2xxxx , 0x8xxxx
	// SO When we send 0x0010 0000 last four bit will be read from lcd and 0000 will not be read
	#endif
	LCD_Wirte_Cmd(LCD_ENTRY_MODE);
 11a:	86 e0       	ldi	r24, 0x06	; 6
 11c:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_Wirte_Cmd>
	LCD_Wirte_Cmd(LCD_BEGIN_AT_FIRST_ROW);
 120:	80 e8       	ldi	r24, 0x80	; 128
 122:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_Wirte_Cmd>
	LCD_Wirte_Cmd(LCD_DISP_ON_CURSOR_BLINK);	
 126:	8f e0       	ldi	r24, 0x0F	; 15
 128:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_Wirte_Cmd>
 12c:	08 95       	ret

0000012e <Lcd_Write_Char>:
 * 			@retval						-NONE																		*
 * 			Note						-NONE																		*
 *******************************************************************************************************************/

void Lcd_Write_Char(uint8_t Char)
{
 12e:	cf 93       	push	r28
 130:	c8 2f       	mov	r28, r24
	
	DIO_Write_Pin(PORT_B,RS_SWITCH,HIGH);
 132:	41 e0       	ldi	r20, 0x01	; 1
 134:	60 e0       	ldi	r22, 0x00	; 0
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	0e 94 9a 01 	call	0x334	; 0x334 <DIO_Write_Pin>
	DIO_Write_Pin(PORT_B,RW_SWITCH,LOW);
 13c:	40 e0       	ldi	r20, 0x00	; 0
 13e:	61 e0       	ldi	r22, 0x01	; 1
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	0e 94 9a 01 	call	0x334	; 0x334 <DIO_Write_Pin>
 146:	87 ee       	ldi	r24, 0xE7	; 231
 148:	93 e0       	ldi	r25, 0x03	; 3
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <Lcd_Write_Char+0x1c>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <Lcd_Write_Char+0x22>
 150:	00 00       	nop
	LCD_Enable ();
#endif
	
#ifdef EIGHT_BIT_MODE
	_delay_ms(1);
	LCD_DATA = Char ;
 152:	cb bb       	out	0x1b, r28	; 27
	LCD_Enable();
 154:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Enable>
#endif
}
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <LCD_GO_TO_INDEX>:
 * 			Note						-NONE																		*
 ********************************************************************************************************************/
void LCD_GO_TO_INDEX(uint8_t ROW , uint8_t COL)
{
	uint8_t Address ; 
	if (ROW<2 && COL <16){
 15c:	82 30       	cpi	r24, 0x02	; 2
 15e:	50 f4       	brcc	.+20     	; 0x174 <LCD_GO_TO_INDEX+0x18>
 160:	60 31       	cpi	r22, 0x10	; 16
 162:	40 f4       	brcc	.+16     	; 0x174 <LCD_GO_TO_INDEX+0x18>
		Address = ( ROW * Second_Row_Address ) + COL; // We multiply the row number by the starting address of the second row and add the column value
 164:	90 e4       	ldi	r25, 0x40	; 64
 166:	89 9f       	mul	r24, r25
 168:	60 0d       	add	r22, r0
 16a:	11 24       	eor	r1, r1
 16c:	86 2f       	mov	r24, r22
		SET_BIT(Address,7);	// To set DDRAM Address we must set bit7 in Address . Address here limit by 7bits becouse has 80 Location
		LCD_Wirte_Cmd(Address);
 16e:	80 68       	ori	r24, 0x80	; 128
 170:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_Wirte_Cmd>
 174:	08 95       	ret

00000176 <LCD_Write_String>:
 *			@param [in]					-COL																		*		
 * 			@retval						-NONE																		*
 * 			Note						-NONE																		*
 ********************************************************************************************************************/
void LCD_Write_String( uint8_t* STRING , uint8_t ROW , uint8_t COL)
{
 176:	ef 92       	push	r14
 178:	ff 92       	push	r15
 17a:	0f 93       	push	r16
 17c:	1f 93       	push	r17
 17e:	cf 93       	push	r28
 180:	df 93       	push	r29
 182:	8c 01       	movw	r16, r24
 184:	d6 2f       	mov	r29, r22
 186:	f4 2e       	mov	r15, r20
	LCD_GO_TO_INDEX(ROW,COL);
 188:	64 2f       	mov	r22, r20
 18a:	8d 2f       	mov	r24, r29
 18c:	0e 94 ae 00 	call	0x15c	; 0x15c <LCD_GO_TO_INDEX>
	uint8_t index = 0 ;
	uint8_t Line = 0 ;
 190:	e1 2c       	mov	r14, r1
 * 			Note						-NONE																		*
 ********************************************************************************************************************/
void LCD_Write_String( uint8_t* STRING , uint8_t ROW , uint8_t COL)
{
	LCD_GO_TO_INDEX(ROW,COL);
	uint8_t index = 0 ;
 192:	c0 e0       	ldi	r28, 0x00	; 0
	uint8_t Line = 0 ;
	while(STRING[index]!='\0' && ((ROW*16)+(index+COL))<=32 )  // Know if there are empty position in 2 * 16 LCD 
 194:	1c c0       	rjmp	.+56     	; 0x1ce <LCD_Write_String+0x58>
	{
		if (( (ROW*16)+(index+COL) )<16 ) // Write in First Row 
 196:	20 31       	cpi	r18, 0x10	; 16
 198:	31 05       	cpc	r19, r1
 19a:	24 f4       	brge	.+8      	; 0x1a4 <LCD_Write_String+0x2e>
		{
			Lcd_Write_Char(STRING[index]);
 19c:	0e 94 97 00 	call	0x12e	; 0x12e <Lcd_Write_Char>
			index++;
 1a0:	cf 5f       	subi	r28, 0xFF	; 255
 1a2:	15 c0       	rjmp	.+42     	; 0x1ce <LCD_Write_String+0x58>
		}
		else if (( (ROW*16)+(index+COL) ) == 16 && Line == 0 ) // IF I REACH END OF ROW0 I WILL MOVE TO ROW1 
 1a4:	20 31       	cpi	r18, 0x10	; 16
 1a6:	31 05       	cpc	r19, r1
 1a8:	49 f4       	brne	.+18     	; 0x1bc <LCD_Write_String+0x46>
 1aa:	e1 10       	cpse	r14, r1
 1ac:	07 c0       	rjmp	.+14     	; 0x1bc <LCD_Write_String+0x46>
		{
			LCD_GO_TO_INDEX(1,0) ; 
 1ae:	60 e0       	ldi	r22, 0x00	; 0
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	0e 94 ae 00 	call	0x15c	; 0x15c <LCD_GO_TO_INDEX>
			Line = 1 ; 
 1b6:	ee 24       	eor	r14, r14
 1b8:	e3 94       	inc	r14
 1ba:	09 c0       	rjmp	.+18     	; 0x1ce <LCD_Write_String+0x58>
		}
		else if (( (ROW*16)+(index+COL) ) < 32 && Line==1  ) // i will start write in ROW1 till end of Row
 1bc:	20 32       	cpi	r18, 0x20	; 32
 1be:	31 05       	cpc	r19, r1
 1c0:	34 f4       	brge	.+12     	; 0x1ce <LCD_Write_String+0x58>
 1c2:	91 e0       	ldi	r25, 0x01	; 1
 1c4:	e9 12       	cpse	r14, r25
 1c6:	03 c0       	rjmp	.+6      	; 0x1ce <LCD_Write_String+0x58>
		{
			Lcd_Write_Char(STRING[index]);
 1c8:	0e 94 97 00 	call	0x12e	; 0x12e <Lcd_Write_Char>
			index++ ;
 1cc:	cf 5f       	subi	r28, 0xFF	; 255
void LCD_Write_String( uint8_t* STRING , uint8_t ROW , uint8_t COL)
{
	LCD_GO_TO_INDEX(ROW,COL);
	uint8_t index = 0 ;
	uint8_t Line = 0 ;
	while(STRING[index]!='\0' && ((ROW*16)+(index+COL))<=32 )  // Know if there are empty position in 2 * 16 LCD 
 1ce:	f8 01       	movw	r30, r16
 1d0:	ec 0f       	add	r30, r28
 1d2:	f1 1d       	adc	r31, r1
 1d4:	80 81       	ld	r24, Z
 1d6:	88 23       	and	r24, r24
 1d8:	61 f0       	breq	.+24     	; 0x1f2 <LCD_Write_String+0x7c>
 1da:	2f 2d       	mov	r18, r15
 1dc:	30 e0       	ldi	r19, 0x00	; 0
 1de:	2c 0f       	add	r18, r28
 1e0:	31 1d       	adc	r19, r1
 1e2:	90 e1       	ldi	r25, 0x10	; 16
 1e4:	d9 9f       	mul	r29, r25
 1e6:	20 0d       	add	r18, r0
 1e8:	31 1d       	adc	r19, r1
 1ea:	11 24       	eor	r1, r1
 1ec:	21 32       	cpi	r18, 0x21	; 33
 1ee:	31 05       	cpc	r19, r1
 1f0:	94 f2       	brlt	.-92     	; 0x196 <LCD_Write_String+0x20>
		{
			Lcd_Write_Char(STRING[index]);
			index++ ;
		}		
	}
}
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
 1f6:	1f 91       	pop	r17
 1f8:	0f 91       	pop	r16
 1fa:	ff 90       	pop	r15
 1fc:	ef 90       	pop	r14
 1fe:	08 95       	ret

00000200 <main>:
#include "LCD.h"
#include "USART.h"
 #include "string.h"
 Error_Status_t Compare_String(uint8_t* Buffer1 , uint8_t* Buffer2);
int main(void)
{
 200:	cf 93       	push	r28
 202:	df 93       	push	r29
 204:	cd b7       	in	r28, 0x3d	; 61
 206:	de b7       	in	r29, 0x3e	; 62
 208:	6e 97       	sbiw	r28, 0x1e	; 30
 20a:	0f b6       	in	r0, 0x3f	; 63
 20c:	f8 94       	cli
 20e:	de bf       	out	0x3e, r29	; 62
 210:	0f be       	out	0x3f, r0	; 63
 212:	cd bf       	out	0x3d, r28	; 61
	uint8_t Buffer[30] ;
	DIO_Write_Pin_Dir(PORT_D,GPIO_PIN_0,IN);
 214:	40 e0       	ldi	r20, 0x00	; 0
 216:	60 e0       	ldi	r22, 0x00	; 0
 218:	83 e0       	ldi	r24, 0x03	; 3
 21a:	0e 94 25 01 	call	0x24a	; 0x24a <DIO_Write_Pin_Dir>
	DIO_Write_Pin_Dir(PORT_D,GPIO_PIN_1,OUT);
 21e:	41 e0       	ldi	r20, 0x01	; 1
 220:	61 e0       	ldi	r22, 0x01	; 1
 222:	83 e0       	ldi	r24, 0x03	; 3
 224:	0e 94 25 01 	call	0x24a	; 0x24a <DIO_Write_Pin_Dir>
	LCD_Init();
 228:	0e 94 75 00 	call	0xea	; 0xea <LCD_Init>
	USART_Init();
 22c:	0e 94 8a 02 	call	0x514	; 0x514 <USART_Init>
	while(1)
	{
		USAERT_Recieve_STRING(Buffer);
 230:	ce 01       	movw	r24, r28
 232:	01 96       	adiw	r24, 0x01	; 1
 234:	0e 94 a3 02 	call	0x546	; 0x546 <USAERT_Recieve_STRING>
		LCD_Write_String(Buffer,0,0);
 238:	40 e0       	ldi	r20, 0x00	; 0
 23a:	60 e0       	ldi	r22, 0x00	; 0
 23c:	ce 01       	movw	r24, r28
 23e:	01 96       	adiw	r24, 0x01	; 1
 240:	0e 94 bb 00 	call	0x176	; 0x176 <LCD_Write_String>
		LCD_Clear_Screen();
 244:	0e 94 71 00 	call	0xe2	; 0xe2 <LCD_Clear_Screen>
 248:	f3 cf       	rjmp	.-26     	; 0x230 <main+0x30>

0000024a <DIO_Write_Pin_Dir>:
			{
				DDRD = 0XFF ;
			}
			else
			{
				DDRD = 0X00 ;
 24a:	81 30       	cpi	r24, 0x01	; 1
 24c:	11 f1       	breq	.+68     	; 0x292 <DIO_Write_Pin_Dir+0x48>
 24e:	30 f0       	brcs	.+12     	; 0x25c <DIO_Write_Pin_Dir+0x12>
 250:	82 30       	cpi	r24, 0x02	; 2
 252:	d1 f1       	breq	.+116    	; 0x2c8 <DIO_Write_Pin_Dir+0x7e>
 254:	83 30       	cpi	r24, 0x03	; 3
 256:	09 f4       	brne	.+2      	; 0x25a <DIO_Write_Pin_Dir+0x10>
 258:	52 c0       	rjmp	.+164    	; 0x2fe <DIO_Write_Pin_Dir+0xb4>
 25a:	08 95       	ret
 25c:	41 30       	cpi	r20, 0x01	; 1
 25e:	59 f4       	brne	.+22     	; 0x276 <DIO_Write_Pin_Dir+0x2c>
 260:	2a b3       	in	r18, 0x1a	; 26
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	02 c0       	rjmp	.+4      	; 0x26c <DIO_Write_Pin_Dir+0x22>
 268:	88 0f       	add	r24, r24
 26a:	99 1f       	adc	r25, r25
 26c:	6a 95       	dec	r22
 26e:	e2 f7       	brpl	.-8      	; 0x268 <DIO_Write_Pin_Dir+0x1e>
 270:	82 2b       	or	r24, r18
 272:	8a bb       	out	0x1a, r24	; 26
 274:	08 95       	ret
 276:	41 11       	cpse	r20, r1
 278:	5c c0       	rjmp	.+184    	; 0x332 <DIO_Write_Pin_Dir+0xe8>
 27a:	2a b3       	in	r18, 0x1a	; 26
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	02 c0       	rjmp	.+4      	; 0x286 <DIO_Write_Pin_Dir+0x3c>
 282:	88 0f       	add	r24, r24
 284:	99 1f       	adc	r25, r25
 286:	6a 95       	dec	r22
 288:	e2 f7       	brpl	.-8      	; 0x282 <DIO_Write_Pin_Dir+0x38>
 28a:	80 95       	com	r24
 28c:	82 23       	and	r24, r18
 28e:	8a bb       	out	0x1a, r24	; 26
 290:	08 95       	ret
 292:	41 30       	cpi	r20, 0x01	; 1
 294:	59 f4       	brne	.+22     	; 0x2ac <DIO_Write_Pin_Dir+0x62>
 296:	27 b3       	in	r18, 0x17	; 23
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <DIO_Write_Pin_Dir+0x58>
 29e:	88 0f       	add	r24, r24
 2a0:	99 1f       	adc	r25, r25
 2a2:	6a 95       	dec	r22
 2a4:	e2 f7       	brpl	.-8      	; 0x29e <DIO_Write_Pin_Dir+0x54>
 2a6:	82 2b       	or	r24, r18
 2a8:	87 bb       	out	0x17, r24	; 23
 2aa:	08 95       	ret
 2ac:	41 11       	cpse	r20, r1
 2ae:	41 c0       	rjmp	.+130    	; 0x332 <DIO_Write_Pin_Dir+0xe8>
 2b0:	27 b3       	in	r18, 0x17	; 23
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <DIO_Write_Pin_Dir+0x72>
 2b8:	88 0f       	add	r24, r24
 2ba:	99 1f       	adc	r25, r25
 2bc:	6a 95       	dec	r22
 2be:	e2 f7       	brpl	.-8      	; 0x2b8 <DIO_Write_Pin_Dir+0x6e>
 2c0:	80 95       	com	r24
 2c2:	82 23       	and	r24, r18
 2c4:	87 bb       	out	0x17, r24	; 23
 2c6:	08 95       	ret
 2c8:	41 30       	cpi	r20, 0x01	; 1
 2ca:	59 f4       	brne	.+22     	; 0x2e2 <DIO_Write_Pin_Dir+0x98>
 2cc:	24 b3       	in	r18, 0x14	; 20
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <DIO_Write_Pin_Dir+0x8e>
 2d4:	88 0f       	add	r24, r24
 2d6:	99 1f       	adc	r25, r25
 2d8:	6a 95       	dec	r22
 2da:	e2 f7       	brpl	.-8      	; 0x2d4 <DIO_Write_Pin_Dir+0x8a>
 2dc:	82 2b       	or	r24, r18
 2de:	84 bb       	out	0x14, r24	; 20
 2e0:	08 95       	ret
 2e2:	41 11       	cpse	r20, r1
 2e4:	26 c0       	rjmp	.+76     	; 0x332 <DIO_Write_Pin_Dir+0xe8>
 2e6:	24 b3       	in	r18, 0x14	; 20
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <DIO_Write_Pin_Dir+0xa8>
 2ee:	88 0f       	add	r24, r24
 2f0:	99 1f       	adc	r25, r25
 2f2:	6a 95       	dec	r22
 2f4:	e2 f7       	brpl	.-8      	; 0x2ee <DIO_Write_Pin_Dir+0xa4>
 2f6:	80 95       	com	r24
 2f8:	82 23       	and	r24, r18
 2fa:	84 bb       	out	0x14, r24	; 20
 2fc:	08 95       	ret
 2fe:	41 30       	cpi	r20, 0x01	; 1
 300:	59 f4       	brne	.+22     	; 0x318 <DIO_Write_Pin_Dir+0xce>
 302:	21 b3       	in	r18, 0x11	; 17
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	02 c0       	rjmp	.+4      	; 0x30e <DIO_Write_Pin_Dir+0xc4>
 30a:	88 0f       	add	r24, r24
 30c:	99 1f       	adc	r25, r25
 30e:	6a 95       	dec	r22
 310:	e2 f7       	brpl	.-8      	; 0x30a <DIO_Write_Pin_Dir+0xc0>
 312:	82 2b       	or	r24, r18
 314:	81 bb       	out	0x11, r24	; 17
 316:	08 95       	ret
 318:	41 11       	cpse	r20, r1
 31a:	0b c0       	rjmp	.+22     	; 0x332 <DIO_Write_Pin_Dir+0xe8>
 31c:	21 b3       	in	r18, 0x11	; 17
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	02 c0       	rjmp	.+4      	; 0x328 <DIO_Write_Pin_Dir+0xde>
 324:	88 0f       	add	r24, r24
 326:	99 1f       	adc	r25, r25
 328:	6a 95       	dec	r22
 32a:	e2 f7       	brpl	.-8      	; 0x324 <DIO_Write_Pin_Dir+0xda>
 32c:	80 95       	com	r24
 32e:	82 23       	and	r24, r18
 330:	81 bb       	out	0x11, r24	; 17
 332:	08 95       	ret

00000334 <DIO_Write_Pin>:
	}
}

void DIO_Write_Pin( GPIO_PORT_t PortNumber , GPIO_PIN_t PinNumber , uint8_t value  )
{
	switch( PortNumber )
 334:	81 30       	cpi	r24, 0x01	; 1
 336:	11 f1       	breq	.+68     	; 0x37c <DIO_Write_Pin+0x48>
 338:	30 f0       	brcs	.+12     	; 0x346 <DIO_Write_Pin+0x12>
 33a:	82 30       	cpi	r24, 0x02	; 2
 33c:	d1 f1       	breq	.+116    	; 0x3b2 <DIO_Write_Pin+0x7e>
 33e:	83 30       	cpi	r24, 0x03	; 3
 340:	09 f4       	brne	.+2      	; 0x344 <DIO_Write_Pin+0x10>
 342:	52 c0       	rjmp	.+164    	; 0x3e8 <DIO_Write_Pin+0xb4>
 344:	08 95       	ret
	{
		case PORT_A :
		if ( value == HIGH )
 346:	41 30       	cpi	r20, 0x01	; 1
 348:	59 f4       	brne	.+22     	; 0x360 <DIO_Write_Pin+0x2c>
		{
			PORTA |= (1<<PinNumber) ;
 34a:	2b b3       	in	r18, 0x1b	; 27
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	02 c0       	rjmp	.+4      	; 0x356 <DIO_Write_Pin+0x22>
 352:	88 0f       	add	r24, r24
 354:	99 1f       	adc	r25, r25
 356:	6a 95       	dec	r22
 358:	e2 f7       	brpl	.-8      	; 0x352 <DIO_Write_Pin+0x1e>
 35a:	82 2b       	or	r24, r18
 35c:	8b bb       	out	0x1b, r24	; 27
 35e:	08 95       	ret
		}
		else if ( value == LOW )
 360:	41 11       	cpse	r20, r1
 362:	5c c0       	rjmp	.+184    	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
		{
			PORTA &= ~(1<<PinNumber) ;
 364:	2b b3       	in	r18, 0x1b	; 27
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	02 c0       	rjmp	.+4      	; 0x370 <DIO_Write_Pin+0x3c>
 36c:	88 0f       	add	r24, r24
 36e:	99 1f       	adc	r25, r25
 370:	6a 95       	dec	r22
 372:	e2 f7       	brpl	.-8      	; 0x36c <DIO_Write_Pin+0x38>
 374:	80 95       	com	r24
 376:	82 23       	and	r24, r18
 378:	8b bb       	out	0x1b, r24	; 27
 37a:	08 95       	ret
		{
			//	Error Handling
		}
		break ;
		case PORT_B :
		if ( value == HIGH )
 37c:	41 30       	cpi	r20, 0x01	; 1
 37e:	59 f4       	brne	.+22     	; 0x396 <DIO_Write_Pin+0x62>
		{
			PORTB |= (1<<PinNumber) ;
 380:	28 b3       	in	r18, 0x18	; 24
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	02 c0       	rjmp	.+4      	; 0x38c <DIO_Write_Pin+0x58>
 388:	88 0f       	add	r24, r24
 38a:	99 1f       	adc	r25, r25
 38c:	6a 95       	dec	r22
 38e:	e2 f7       	brpl	.-8      	; 0x388 <DIO_Write_Pin+0x54>
 390:	82 2b       	or	r24, r18
 392:	88 bb       	out	0x18, r24	; 24
 394:	08 95       	ret
		}
		else if ( value == LOW )
 396:	41 11       	cpse	r20, r1
 398:	41 c0       	rjmp	.+130    	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
		{
			PORTB &= ~(1<<PinNumber) ;
 39a:	28 b3       	in	r18, 0x18	; 24
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <DIO_Write_Pin+0x72>
 3a2:	88 0f       	add	r24, r24
 3a4:	99 1f       	adc	r25, r25
 3a6:	6a 95       	dec	r22
 3a8:	e2 f7       	brpl	.-8      	; 0x3a2 <DIO_Write_Pin+0x6e>
 3aa:	80 95       	com	r24
 3ac:	82 23       	and	r24, r18
 3ae:	88 bb       	out	0x18, r24	; 24
 3b0:	08 95       	ret
		{
			//	Error Handling
		}
		break ;
		case PORT_C :
		if ( value == HIGH )
 3b2:	41 30       	cpi	r20, 0x01	; 1
 3b4:	59 f4       	brne	.+22     	; 0x3cc <DIO_Write_Pin+0x98>
		{
			PORTC |= (1<<PinNumber) ;
 3b6:	25 b3       	in	r18, 0x15	; 21
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <DIO_Write_Pin+0x8e>
 3be:	88 0f       	add	r24, r24
 3c0:	99 1f       	adc	r25, r25
 3c2:	6a 95       	dec	r22
 3c4:	e2 f7       	brpl	.-8      	; 0x3be <DIO_Write_Pin+0x8a>
 3c6:	82 2b       	or	r24, r18
 3c8:	85 bb       	out	0x15, r24	; 21
 3ca:	08 95       	ret
		}
		else if ( value == LOW )
 3cc:	41 11       	cpse	r20, r1
 3ce:	26 c0       	rjmp	.+76     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
		{
			PORTC &= ~(1<<PinNumber) ;
 3d0:	25 b3       	in	r18, 0x15	; 21
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	02 c0       	rjmp	.+4      	; 0x3dc <DIO_Write_Pin+0xa8>
 3d8:	88 0f       	add	r24, r24
 3da:	99 1f       	adc	r25, r25
 3dc:	6a 95       	dec	r22
 3de:	e2 f7       	brpl	.-8      	; 0x3d8 <DIO_Write_Pin+0xa4>
 3e0:	80 95       	com	r24
 3e2:	82 23       	and	r24, r18
 3e4:	85 bb       	out	0x15, r24	; 21
 3e6:	08 95       	ret
		{
			//	Error Handling
		}
		break ;
		case PORT_D :
		if ( value == HIGH )
 3e8:	41 30       	cpi	r20, 0x01	; 1
 3ea:	59 f4       	brne	.+22     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
		{
			PORTD |= (1<<PinNumber) ;
 3ec:	22 b3       	in	r18, 0x12	; 18
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <DIO_Write_Pin+0xc4>
 3f4:	88 0f       	add	r24, r24
 3f6:	99 1f       	adc	r25, r25
 3f8:	6a 95       	dec	r22
 3fa:	e2 f7       	brpl	.-8      	; 0x3f4 <DIO_Write_Pin+0xc0>
 3fc:	82 2b       	or	r24, r18
 3fe:	82 bb       	out	0x12, r24	; 18
 400:	08 95       	ret
		}
		else if ( value == LOW )
 402:	41 11       	cpse	r20, r1
 404:	0b c0       	rjmp	.+22     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
		{
			PORTD &= ~(1<<PinNumber) ;
 406:	22 b3       	in	r18, 0x12	; 18
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	02 c0       	rjmp	.+4      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 40e:	88 0f       	add	r24, r24
 410:	99 1f       	adc	r25, r25
 412:	6a 95       	dec	r22
 414:	e2 f7       	brpl	.-8      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 416:	80 95       	com	r24
 418:	82 23       	and	r24, r18
 41a:	82 bb       	out	0x12, r24	; 18
 41c:	08 95       	ret

0000041e <__vector_1>:
			break;
	}
}
/*******************************ISR********************************/
ISR(INT0_vect)
{
 41e:	1f 92       	push	r1
 420:	0f 92       	push	r0
 422:	0f b6       	in	r0, 0x3f	; 63
 424:	0f 92       	push	r0
 426:	11 24       	eor	r1, r1
 428:	2f 93       	push	r18
 42a:	3f 93       	push	r19
 42c:	4f 93       	push	r20
 42e:	5f 93       	push	r21
 430:	6f 93       	push	r22
 432:	7f 93       	push	r23
 434:	8f 93       	push	r24
 436:	9f 93       	push	r25
 438:	af 93       	push	r26
 43a:	bf 93       	push	r27
 43c:	ef 93       	push	r30
 43e:	ff 93       	push	r31
	if (INT0_Fptr!=NULLPTR)
 440:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <INT0_Fptr>
 444:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <INT0_Fptr+0x1>
 448:	30 97       	sbiw	r30, 0x00	; 0
 44a:	09 f0       	breq	.+2      	; 0x44e <__vector_1+0x30>
	{
		INT0_Fptr();
 44c:	09 95       	icall
	}
}
 44e:	ff 91       	pop	r31
 450:	ef 91       	pop	r30
 452:	bf 91       	pop	r27
 454:	af 91       	pop	r26
 456:	9f 91       	pop	r25
 458:	8f 91       	pop	r24
 45a:	7f 91       	pop	r23
 45c:	6f 91       	pop	r22
 45e:	5f 91       	pop	r21
 460:	4f 91       	pop	r20
 462:	3f 91       	pop	r19
 464:	2f 91       	pop	r18
 466:	0f 90       	pop	r0
 468:	0f be       	out	0x3f, r0	; 63
 46a:	0f 90       	pop	r0
 46c:	1f 90       	pop	r1
 46e:	18 95       	reti

00000470 <__vector_2>:
ISR(INT1_vect)
{
 470:	1f 92       	push	r1
 472:	0f 92       	push	r0
 474:	0f b6       	in	r0, 0x3f	; 63
 476:	0f 92       	push	r0
 478:	11 24       	eor	r1, r1
 47a:	2f 93       	push	r18
 47c:	3f 93       	push	r19
 47e:	4f 93       	push	r20
 480:	5f 93       	push	r21
 482:	6f 93       	push	r22
 484:	7f 93       	push	r23
 486:	8f 93       	push	r24
 488:	9f 93       	push	r25
 48a:	af 93       	push	r26
 48c:	bf 93       	push	r27
 48e:	ef 93       	push	r30
 490:	ff 93       	push	r31
	if (INT1_Fptr!=NULLPTR)
 492:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <INT1_Fptr>
 496:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <INT1_Fptr+0x1>
 49a:	30 97       	sbiw	r30, 0x00	; 0
 49c:	09 f0       	breq	.+2      	; 0x4a0 <__vector_2+0x30>
	{
		INT1_Fptr();
 49e:	09 95       	icall
	}
}
 4a0:	ff 91       	pop	r31
 4a2:	ef 91       	pop	r30
 4a4:	bf 91       	pop	r27
 4a6:	af 91       	pop	r26
 4a8:	9f 91       	pop	r25
 4aa:	8f 91       	pop	r24
 4ac:	7f 91       	pop	r23
 4ae:	6f 91       	pop	r22
 4b0:	5f 91       	pop	r21
 4b2:	4f 91       	pop	r20
 4b4:	3f 91       	pop	r19
 4b6:	2f 91       	pop	r18
 4b8:	0f 90       	pop	r0
 4ba:	0f be       	out	0x3f, r0	; 63
 4bc:	0f 90       	pop	r0
 4be:	1f 90       	pop	r1
 4c0:	18 95       	reti

000004c2 <__vector_3>:
ISR(INT2_vect)
{
 4c2:	1f 92       	push	r1
 4c4:	0f 92       	push	r0
 4c6:	0f b6       	in	r0, 0x3f	; 63
 4c8:	0f 92       	push	r0
 4ca:	11 24       	eor	r1, r1
 4cc:	2f 93       	push	r18
 4ce:	3f 93       	push	r19
 4d0:	4f 93       	push	r20
 4d2:	5f 93       	push	r21
 4d4:	6f 93       	push	r22
 4d6:	7f 93       	push	r23
 4d8:	8f 93       	push	r24
 4da:	9f 93       	push	r25
 4dc:	af 93       	push	r26
 4de:	bf 93       	push	r27
 4e0:	ef 93       	push	r30
 4e2:	ff 93       	push	r31
	if (INT2_Fptr!=NULLPTR)
 4e4:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 4e8:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 4ec:	30 97       	sbiw	r30, 0x00	; 0
 4ee:	09 f0       	breq	.+2      	; 0x4f2 <__vector_3+0x30>
	{
		INT2_Fptr();
 4f0:	09 95       	icall
	}
 4f2:	ff 91       	pop	r31
 4f4:	ef 91       	pop	r30
 4f6:	bf 91       	pop	r27
 4f8:	af 91       	pop	r26
 4fa:	9f 91       	pop	r25
 4fc:	8f 91       	pop	r24
 4fe:	7f 91       	pop	r23
 500:	6f 91       	pop	r22
 502:	5f 91       	pop	r21
 504:	4f 91       	pop	r20
 506:	3f 91       	pop	r19
 508:	2f 91       	pop	r18
 50a:	0f 90       	pop	r0
 50c:	0f be       	out	0x3f, r0	; 63
 50e:	0f 90       	pop	r0
 510:	1f 90       	pop	r1
 512:	18 95       	reti

00000514 <USART_Init>:
			USART_Send_Char(*String);
			String++ ;
		}
	}
	return Loc_TX_String_Status ; 
}
 514:	8a b1       	in	r24, 0x0a	; 10
 516:	88 60       	ori	r24, 0x08	; 8
 518:	8a b9       	out	0x0a, r24	; 10
 51a:	8a b1       	in	r24, 0x0a	; 10
 51c:	80 61       	ori	r24, 0x10	; 16
 51e:	8a b9       	out	0x0a, r24	; 10
 520:	86 e8       	ldi	r24, 0x86	; 134
 522:	80 bd       	out	0x20, r24	; 32
 524:	87 e6       	ldi	r24, 0x67	; 103
 526:	89 b9       	out	0x09, r24	; 9
 528:	80 b5       	in	r24, 0x20	; 32
 52a:	80 bd       	out	0x20, r24	; 32
 52c:	80 e0       	ldi	r24, 0x00	; 0
 52e:	08 95       	ret

00000530 <USART_Recieve_Char>:
 530:	00 97       	sbiw	r24, 0x00	; 0
 532:	39 f0       	breq	.+14     	; 0x542 <USART_Recieve_Char+0x12>
 534:	5f 9b       	sbis	0x0b, 7	; 11
 536:	fe cf       	rjmp	.-4      	; 0x534 <USART_Recieve_Char+0x4>
 538:	2c b1       	in	r18, 0x0c	; 12
 53a:	fc 01       	movw	r30, r24
 53c:	20 83       	st	Z, r18
 53e:	80 e0       	ldi	r24, 0x00	; 0
 540:	08 95       	ret
 542:	81 e0       	ldi	r24, 0x01	; 1
 544:	08 95       	ret

00000546 <USAERT_Recieve_STRING>:
Error_Status_t USAERT_Recieve_STRING(uint8_t* String)
{
 546:	1f 93       	push	r17
 548:	cf 93       	push	r28
 54a:	df 93       	push	r29
 54c:	ec 01       	movw	r28, r24
	Error_Status_t Loc_RX_STRING_Status = NO_Error ;
	if(String==NULLPTR)
 54e:	89 2b       	or	r24, r25
 550:	11 f0       	breq	.+4      	; 0x556 <USAERT_Recieve_STRING+0x10>
	}
	return Loc_TX_String_Status ; 
}
Error_Status_t USAERT_Recieve_STRING(uint8_t* String)
{
	Error_Status_t Loc_RX_STRING_Status = NO_Error ;
 552:	10 e0       	ldi	r17, 0x00	; 0
 554:	01 c0       	rjmp	.+2      	; 0x558 <USAERT_Recieve_STRING+0x12>
	if(String==NULLPTR)
	{
		Loc_RX_STRING_Status = Error ; 
 556:	11 e0       	ldi	r17, 0x01	; 1
	}
	while (1)
	{
		USART_Recieve_Char(String);
 558:	ce 01       	movw	r24, r28
 55a:	0e 94 98 02 	call	0x530	; 0x530 <USART_Recieve_Char>
		if(*String == '\r' || *String == '\n')
 55e:	88 81       	ld	r24, Y
 560:	8d 30       	cpi	r24, 0x0D	; 13
 562:	21 f0       	breq	.+8      	; 0x56c <USAERT_Recieve_STRING+0x26>
 564:	8a 30       	cpi	r24, 0x0A	; 10
 566:	11 f0       	breq	.+4      	; 0x56c <USAERT_Recieve_STRING+0x26>
		{
			*String = '\0' ; 
			break;
		}
		String++;
 568:	21 96       	adiw	r28, 0x01	; 1
	}
 56a:	f6 cf       	rjmp	.-20     	; 0x558 <USAERT_Recieve_STRING+0x12>
	while (1)
	{
		USART_Recieve_Char(String);
		if(*String == '\r' || *String == '\n')
		{
			*String = '\0' ; 
 56c:	18 82       	st	Y, r1
			break;
		}
		String++;
	}
	return Loc_RX_STRING_Status ; 
}
 56e:	81 2f       	mov	r24, r17
 570:	df 91       	pop	r29
 572:	cf 91       	pop	r28
 574:	1f 91       	pop	r17
 576:	08 95       	ret

00000578 <_exit>:
 578:	f8 94       	cli

0000057a <__stop_program>:
 57a:	ff cf       	rjmp	.-2      	; 0x57a <__stop_program>
