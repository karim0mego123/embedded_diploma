
AVR_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000048e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  0000048e  00000522  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800070  00800070  00000532  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000532  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000564  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  000005a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011e5  00000000  00000000  000006c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000087e  00000000  00000000  000018ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bc9  00000000  00000000  0000212b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000300  00000000  00000000  00002cf4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005d8  00000000  00000000  00002ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e1c  00000000  00000000  000035cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  000043e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 ca 01 	jmp	0x394	; 0x394 <__vector_1>
   8:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__vector_2>
   c:	0c 94 1c 02 	jmp	0x438	; 0x438 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e8       	ldi	r30, 0x8E	; 142
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 37       	cpi	r26, 0x77	; 119
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 47 01 	call	0x28e	; 0x28e <main>
  8a:	0c 94 45 02 	jmp	0x48a	; 0x48a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_Enable>:
 * 			@retval						-NONE																		*
 * 			Note						-NONE																		*
 ********************************************************************************************************************/
void LCD_Enable ()
{
	DIO_Write_Pin(PORT_B,EN_SWITCH,HIGH);
  92:	41 e0       	ldi	r20, 0x01	; 1
  94:	63 e0       	ldi	r22, 0x03	; 3
  96:	82 e4       	ldi	r24, 0x42	; 66
  98:	0e 94 52 01 	call	0x2a4	; 0x2a4 <DIO_Write_Pin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9c:	83 ed       	ldi	r24, 0xD3	; 211
  9e:	90 e3       	ldi	r25, 0x30	; 48
  a0:	01 97       	sbiw	r24, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <LCD_Enable+0xe>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <LCD_Enable+0x14>
  a6:	00 00       	nop
	_delay_ms(50);
	DIO_Write_Pin(PORT_B,EN_SWITCH,LOW);
  a8:	40 e0       	ldi	r20, 0x00	; 0
  aa:	63 e0       	ldi	r22, 0x03	; 3
  ac:	82 e4       	ldi	r24, 0x42	; 66
  ae:	0e 94 52 01 	call	0x2a4	; 0x2a4 <DIO_Write_Pin>
  b2:	08 95       	ret

000000b4 <LCD_Wirte_Cmd>:
 * 			@param [in]					-Cmd Command user will inter to preform specific operation					*
 * 			@retval						-NONE																		*
 * 			Note						-NONE																		*
 ********************************************************************************************************************/
void LCD_Wirte_Cmd (uint8_t Cmd)
{
  b4:	cf 93       	push	r28
  b6:	c8 2f       	mov	r28, r24
	DIO_Write_Pin(PORT_B,RS_SWITCH,LOW);
  b8:	40 e0       	ldi	r20, 0x00	; 0
  ba:	61 e0       	ldi	r22, 0x01	; 1
  bc:	82 e4       	ldi	r24, 0x42	; 66
  be:	0e 94 52 01 	call	0x2a4	; 0x2a4 <DIO_Write_Pin>
	DIO_Write_Pin(PORT_B,RW_SWITCH,LOW);
  c2:	40 e0       	ldi	r20, 0x00	; 0
  c4:	62 e0       	ldi	r22, 0x02	; 2
  c6:	82 e4       	ldi	r24, 0x42	; 66
  c8:	0e 94 52 01 	call	0x2a4	; 0x2a4 <DIO_Write_Pin>
	
	#ifdef FOUR_BIT_MODE
	
	LCD_DATA = (LCD_DATA&0x0f) | (Cmd&0xF0);  
  cc:	8b b3       	in	r24, 0x1b	; 27
  ce:	8f 70       	andi	r24, 0x0F	; 15
  d0:	9c 2f       	mov	r25, r28
  d2:	90 7f       	andi	r25, 0xF0	; 240
  d4:	89 2b       	or	r24, r25
  d6:	8b bb       	out	0x1b, r24	; 27
	LCD_Enable ();
  d8:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Enable>
  dc:	89 ef       	ldi	r24, 0xF9	; 249
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <LCD_Wirte_Cmd+0x2c>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <LCD_Wirte_Cmd+0x32>
  e6:	00 00       	nop
	_delay_ms(1);
	if (Init_Is_Finshed)
  e8:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
  ec:	88 23       	and	r24, r24
  ee:	31 f0       	breq	.+12     	; 0xfc <LCD_Wirte_Cmd+0x48>
	{
		LCD_DATA = (((LCD_DATA&0xF0) | (Cmd&0x0F))<<4);
  f0:	8b b3       	in	r24, 0x1b	; 27
  f2:	c2 95       	swap	r28
  f4:	c0 7f       	andi	r28, 0xF0	; 240
  f6:	cb bb       	out	0x1b, r28	; 27
		LCD_Enable ();
  f8:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Enable>
  fc:	83 ef       	ldi	r24, 0xF3	; 243
  fe:	91 e0       	ldi	r25, 0x01	; 1
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <LCD_Wirte_Cmd+0x4c>
 104:	00 c0       	rjmp	.+0      	; 0x106 <LCD_Wirte_Cmd+0x52>
 106:	00 00       	nop
	#ifdef EIGHT_BIT_MODE
	LCD_DATA = Cmd ;
	LCD_Enable();
	#endif
	_delay_ms(2);
}
 108:	cf 91       	pop	r28
 10a:	08 95       	ret

0000010c <LCD_Clear_Screen>:
 * 			@retval						-NONE																		*
 * 			Note						-NONE																		*
 ********************************************************************************************************************/
void LCD_Clear_Screen ()
{
	LCD_Wirte_Cmd(LCD_CLEAR_SCREEN);
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_Wirte_Cmd>
 112:	08 95       	ret

00000114 <LCD_Init>:
 114:	87 e8       	ldi	r24, 0x87	; 135
 116:	93 e1       	ldi	r25, 0x13	; 19
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <LCD_Init+0x4>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <LCD_Init+0xa>
 11e:	00 00       	nop
 * 			Note						-NONE																		*
 ********************************************************************************************************************/
void LCD_Init()
{
	_delay_ms(20) ;
	LCD_CTRL_DIR = 0x07 ; 
 120:	87 e0       	ldi	r24, 0x07	; 7
 122:	8a bb       	out	0x1a, r24	; 26
	LCD_CTRL &= ~(0x07);
 124:	8b b3       	in	r24, 0x1b	; 27
 126:	88 7f       	andi	r24, 0xF8	; 248
 128:	8b bb       	out	0x1b, r24	; 27
	SET_REG(LCD_DATA_DIR);
 12a:	8f ef       	ldi	r24, 0xFF	; 255
 12c:	8a bb       	out	0x1a, r24	; 26
 12e:	85 ea       	ldi	r24, 0xA5	; 165
 130:	9e e0       	ldi	r25, 0x0E	; 14
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <LCD_Init+0x1e>
 136:	00 c0       	rjmp	.+0      	; 0x138 <LCD_Init+0x24>
 138:	00 00       	nop
	_delay_ms(15);
	LCD_Clear_Screen();
 13a:	0e 94 86 00 	call	0x10c	; 0x10c <LCD_Clear_Screen>
	LCD_Wirte_Cmd(LCD_FUNCTION_8BIT_2LINES);
	#endif
	
#ifdef FOUR_BIT_MODE	

	LCD_Wirte_Cmd(0x20);
 13e:	80 e2       	ldi	r24, 0x20	; 32
 140:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_Wirte_Cmd>
	LCD_Wirte_Cmd(0x20);
 144:	80 e2       	ldi	r24, 0x20	; 32
 146:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_Wirte_Cmd>
	LCD_Wirte_Cmd(0x80);
 14a:	80 e8       	ldi	r24, 0x80	; 128
 14c:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_Wirte_Cmd>
 150:	89 ef       	ldi	r24, 0xF9	; 249
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <LCD_Init+0x40>
 158:	00 c0       	rjmp	.+0      	; 0x15a <LCD_Init+0x46>
 15a:	00 00       	nop
	_delay_ms(1);
	
	LCD_Wirte_Cmd(0x00);
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_Wirte_Cmd>
	LCD_Wirte_Cmd(0xF0);
 162:	80 ef       	ldi	r24, 0xF0	; 240
 164:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_Wirte_Cmd>
 168:	89 ef       	ldi	r24, 0xF9	; 249
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <LCD_Init+0x58>
 170:	00 c0       	rjmp	.+0      	; 0x172 <LCD_Init+0x5e>
 172:	00 00       	nop
	_delay_ms(1);
	
	LCD_Wirte_Cmd(0x00);
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_Wirte_Cmd>
	LCD_Wirte_Cmd(0x10);
 17a:	80 e1       	ldi	r24, 0x10	; 16
 17c:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_Wirte_Cmd>
 180:	83 ef       	ldi	r24, 0xF3	; 243
 182:	91 e0       	ldi	r25, 0x01	; 1
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <LCD_Init+0x70>
 188:	00 c0       	rjmp	.+0      	; 0x18a <LCD_Init+0x76>
 18a:	00 00       	nop
	_delay_ms(2);
	
// 	LCD_Wirte_Cmd(0x00);	By Default
// 	LCD_Wirte_Cmd(0x60);	By Default

	Init_Is_Finshed = 1 ; // when we init LCD in case four bit we will send 0x2xxxx  , 0x2xxxx , 0x8xxxx
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__data_end>
	// SO When we send 0x0010 0000 last four bit will be read from lcd and 0000 will not be read
	#endif
	LCD_Wirte_Cmd(LCD_ENTRY_MODE);
 192:	86 e0       	ldi	r24, 0x06	; 6
 194:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_Wirte_Cmd>
	LCD_Wirte_Cmd(LCD_BEGIN_AT_FIRST_ROW);
 198:	80 e8       	ldi	r24, 0x80	; 128
 19a:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_Wirte_Cmd>
	LCD_Wirte_Cmd(LCD_DISP_ON_CURSOR_BLINK);	
 19e:	8f e0       	ldi	r24, 0x0F	; 15
 1a0:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_Wirte_Cmd>
 1a4:	08 95       	ret

000001a6 <Lcd_Write_Char>:
 * 			@retval						-NONE																		*
 * 			Note						-NONE																		*
 *******************************************************************************************************************/

void Lcd_Write_Char(uint8_t Char)
{
 1a6:	cf 93       	push	r28
 1a8:	c8 2f       	mov	r28, r24
	
	DIO_Write_Pin(PORT_B,RS_SWITCH,HIGH);
 1aa:	41 e0       	ldi	r20, 0x01	; 1
 1ac:	61 e0       	ldi	r22, 0x01	; 1
 1ae:	82 e4       	ldi	r24, 0x42	; 66
 1b0:	0e 94 52 01 	call	0x2a4	; 0x2a4 <DIO_Write_Pin>
	DIO_Write_Pin(PORT_B,RW_SWITCH,LOW);
 1b4:	40 e0       	ldi	r20, 0x00	; 0
 1b6:	62 e0       	ldi	r22, 0x02	; 2
 1b8:	82 e4       	ldi	r24, 0x42	; 66
 1ba:	0e 94 52 01 	call	0x2a4	; 0x2a4 <DIO_Write_Pin>
#ifdef FOUR_BIT_MODE
	LCD_DATA = (LCD_DATA&0x0F) | (Char&0xF0);
 1be:	8b b3       	in	r24, 0x1b	; 27
 1c0:	8f 70       	andi	r24, 0x0F	; 15
 1c2:	9c 2f       	mov	r25, r28
 1c4:	90 7f       	andi	r25, 0xF0	; 240
 1c6:	89 2b       	or	r24, r25
 1c8:	8b bb       	out	0x1b, r24	; 27
	LCD_Enable ();
 1ca:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Enable>
 1ce:	89 ef       	ldi	r24, 0xF9	; 249
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <Lcd_Write_Char+0x2c>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <Lcd_Write_Char+0x32>
 1d8:	00 00       	nop
	_delay_ms(1);
	LCD_DATA = (((LCD_DATA&0xF0) | (Char&0x0F))<<4);
 1da:	8b b3       	in	r24, 0x1b	; 27
 1dc:	c2 95       	swap	r28
 1de:	c0 7f       	andi	r28, 0xF0	; 240
 1e0:	cb bb       	out	0x1b, r28	; 27
	LCD_Enable ();
 1e2:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Enable>
#ifdef EIGHT_BIT_MODE
	_delay_ms(1);
	LCD_DATA = Char ;
	LCD_Enable();
#endif
}
 1e6:	cf 91       	pop	r28
 1e8:	08 95       	ret

000001ea <LCD_GO_TO_INDEX>:
 * 			Note						-NONE																		*
 ********************************************************************************************************************/
void LCD_GO_TO_INDEX(uint8_t ROW , uint8_t COL)
{
	uint8_t Address ; 
	if (ROW<2 && COL <16){
 1ea:	82 30       	cpi	r24, 0x02	; 2
 1ec:	50 f4       	brcc	.+20     	; 0x202 <LCD_GO_TO_INDEX+0x18>
 1ee:	60 31       	cpi	r22, 0x10	; 16
 1f0:	40 f4       	brcc	.+16     	; 0x202 <LCD_GO_TO_INDEX+0x18>
		Address = ( ROW * Second_Row_Address ) + COL; // We multiply the row number by the starting address of the second row and add the column value
 1f2:	90 e4       	ldi	r25, 0x40	; 64
 1f4:	89 9f       	mul	r24, r25
 1f6:	60 0d       	add	r22, r0
 1f8:	11 24       	eor	r1, r1
 1fa:	86 2f       	mov	r24, r22
		SET_BIT(Address,7);	// To set DDRAM Address we must set bit7 in Address . Address here limit by 7bits becouse has 80 Location
		LCD_Wirte_Cmd(Address);
 1fc:	80 68       	ori	r24, 0x80	; 128
 1fe:	0e 94 5a 00 	call	0xb4	; 0xb4 <LCD_Wirte_Cmd>
 202:	08 95       	ret

00000204 <LCD_Write_String>:
 *			@param [in]					-COL																		*		
 * 			@retval						-NONE																		*
 * 			Note						-NONE																		*
 ********************************************************************************************************************/
void LCD_Write_String( string STRING , uint8_t ROW , uint8_t COL)
{
 204:	ef 92       	push	r14
 206:	ff 92       	push	r15
 208:	0f 93       	push	r16
 20a:	1f 93       	push	r17
 20c:	cf 93       	push	r28
 20e:	df 93       	push	r29
 210:	8c 01       	movw	r16, r24
 212:	d6 2f       	mov	r29, r22
 214:	f4 2e       	mov	r15, r20
	LCD_GO_TO_INDEX(ROW,COL);
 216:	64 2f       	mov	r22, r20
 218:	8d 2f       	mov	r24, r29
 21a:	0e 94 f5 00 	call	0x1ea	; 0x1ea <LCD_GO_TO_INDEX>
	uint8_t index = 0 ;
	uint8_t Line = 0 ;
 21e:	e1 2c       	mov	r14, r1
 * 			Note						-NONE																		*
 ********************************************************************************************************************/
void LCD_Write_String( string STRING , uint8_t ROW , uint8_t COL)
{
	LCD_GO_TO_INDEX(ROW,COL);
	uint8_t index = 0 ;
 220:	c0 e0       	ldi	r28, 0x00	; 0
	uint8_t Line = 0 ;
	while(STRING[index]!='\0' && ((ROW*16)+(index+COL))<=32 )  // Know if there are empty position in 2 * 16 LCD 
 222:	1c c0       	rjmp	.+56     	; 0x25c <LCD_Write_String+0x58>
	{
		if (( (ROW*16)+(index+COL) )<16 ) // Write in First Row 
 224:	20 31       	cpi	r18, 0x10	; 16
 226:	31 05       	cpc	r19, r1
 228:	24 f4       	brge	.+8      	; 0x232 <LCD_Write_String+0x2e>
		{
			Lcd_Write_Char(STRING[index]);
 22a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <Lcd_Write_Char>
			index++;
 22e:	cf 5f       	subi	r28, 0xFF	; 255
 230:	15 c0       	rjmp	.+42     	; 0x25c <LCD_Write_String+0x58>
		}
		else if (( (ROW*16)+(index+COL) ) == 16 && Line == 0 ) // IF I REACH END OF ROW0 I WILL MOVE TO ROW1 
 232:	20 31       	cpi	r18, 0x10	; 16
 234:	31 05       	cpc	r19, r1
 236:	49 f4       	brne	.+18     	; 0x24a <LCD_Write_String+0x46>
 238:	e1 10       	cpse	r14, r1
 23a:	07 c0       	rjmp	.+14     	; 0x24a <LCD_Write_String+0x46>
		{
			LCD_GO_TO_INDEX(1,0) ; 
 23c:	60 e0       	ldi	r22, 0x00	; 0
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	0e 94 f5 00 	call	0x1ea	; 0x1ea <LCD_GO_TO_INDEX>
			Line = 1 ; 
 244:	ee 24       	eor	r14, r14
 246:	e3 94       	inc	r14
 248:	09 c0       	rjmp	.+18     	; 0x25c <LCD_Write_String+0x58>
		}
		else if (( (ROW*16)+(index+COL) ) < 32 && Line==1  ) // i will start write in ROW1 till end of Row
 24a:	20 32       	cpi	r18, 0x20	; 32
 24c:	31 05       	cpc	r19, r1
 24e:	34 f4       	brge	.+12     	; 0x25c <LCD_Write_String+0x58>
 250:	91 e0       	ldi	r25, 0x01	; 1
 252:	e9 12       	cpse	r14, r25
 254:	03 c0       	rjmp	.+6      	; 0x25c <LCD_Write_String+0x58>
		{
			Lcd_Write_Char(STRING[index]);
 256:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <Lcd_Write_Char>
			index++ ;
 25a:	cf 5f       	subi	r28, 0xFF	; 255
void LCD_Write_String( string STRING , uint8_t ROW , uint8_t COL)
{
	LCD_GO_TO_INDEX(ROW,COL);
	uint8_t index = 0 ;
	uint8_t Line = 0 ;
	while(STRING[index]!='\0' && ((ROW*16)+(index+COL))<=32 )  // Know if there are empty position in 2 * 16 LCD 
 25c:	f8 01       	movw	r30, r16
 25e:	ec 0f       	add	r30, r28
 260:	f1 1d       	adc	r31, r1
 262:	80 81       	ld	r24, Z
 264:	88 23       	and	r24, r24
 266:	61 f0       	breq	.+24     	; 0x280 <LCD_Write_String+0x7c>
 268:	2f 2d       	mov	r18, r15
 26a:	30 e0       	ldi	r19, 0x00	; 0
 26c:	2c 0f       	add	r18, r28
 26e:	31 1d       	adc	r19, r1
 270:	90 e1       	ldi	r25, 0x10	; 16
 272:	d9 9f       	mul	r29, r25
 274:	20 0d       	add	r18, r0
 276:	31 1d       	adc	r19, r1
 278:	11 24       	eor	r1, r1
 27a:	21 32       	cpi	r18, 0x21	; 33
 27c:	31 05       	cpc	r19, r1
 27e:	94 f2       	brlt	.-92     	; 0x224 <LCD_Write_String+0x20>
		{
			Lcd_Write_Char(STRING[index]);
			index++ ;
		}		
	}
}
 280:	df 91       	pop	r29
 282:	cf 91       	pop	r28
 284:	1f 91       	pop	r17
 286:	0f 91       	pop	r16
 288:	ff 90       	pop	r15
 28a:	ef 90       	pop	r14
 28c:	08 95       	ret

0000028e <main>:
	LCD_Clear_Screen();
}

int main(void)
{
	LCD_Init(); 
 28e:	0e 94 8a 00 	call	0x114	; 0x114 <LCD_Init>
	LCD_Write_String((uint8_t*)"Karim El Meligy",0,0) ;
 292:	40 e0       	ldi	r20, 0x00	; 0
 294:	60 e0       	ldi	r22, 0x00	; 0
 296:	80 e6       	ldi	r24, 0x60	; 96
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	0e 94 02 01 	call	0x204	; 0x204 <LCD_Write_String>
}
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	08 95       	ret

000002a4 <DIO_Write_Pin>:
	}
}

void DIO_Write_Pin( uint8_t PortNumber , uint8_t PinNumber , uint8_t value  )
{
	switch( PortNumber )
 2a4:	82 34       	cpi	r24, 0x42	; 66
 2a6:	29 f1       	breq	.+74     	; 0x2f2 <DIO_Write_Pin+0x4e>
 2a8:	18 f4       	brcc	.+6      	; 0x2b0 <DIO_Write_Pin+0xc>
 2aa:	81 34       	cpi	r24, 0x41	; 65
 2ac:	39 f0       	breq	.+14     	; 0x2bc <DIO_Write_Pin+0x18>
 2ae:	08 95       	ret
 2b0:	83 34       	cpi	r24, 0x43	; 67
 2b2:	d1 f1       	breq	.+116    	; 0x328 <DIO_Write_Pin+0x84>
 2b4:	84 34       	cpi	r24, 0x44	; 68
 2b6:	09 f4       	brne	.+2      	; 0x2ba <DIO_Write_Pin+0x16>
 2b8:	52 c0       	rjmp	.+164    	; 0x35e <DIO_Write_Pin+0xba>
 2ba:	08 95       	ret
	{
		case PORT_A :
		if ( value == HIGH )
 2bc:	41 30       	cpi	r20, 0x01	; 1
 2be:	59 f4       	brne	.+22     	; 0x2d6 <DIO_Write_Pin+0x32>
		{
			PORTA |= (1<<PinNumber) ;
 2c0:	2b b3       	in	r18, 0x1b	; 27
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	02 c0       	rjmp	.+4      	; 0x2cc <DIO_Write_Pin+0x28>
 2c8:	88 0f       	add	r24, r24
 2ca:	99 1f       	adc	r25, r25
 2cc:	6a 95       	dec	r22
 2ce:	e2 f7       	brpl	.-8      	; 0x2c8 <DIO_Write_Pin+0x24>
 2d0:	82 2b       	or	r24, r18
 2d2:	8b bb       	out	0x1b, r24	; 27
 2d4:	08 95       	ret
		}
		else if ( value == LOW )
 2d6:	41 11       	cpse	r20, r1
 2d8:	5c c0       	rjmp	.+184    	; 0x392 <DIO_Write_Pin+0xee>
		{
			PORTA &= ~(1<<PinNumber) ;
 2da:	2b b3       	in	r18, 0x1b	; 27
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <DIO_Write_Pin+0x42>
 2e2:	88 0f       	add	r24, r24
 2e4:	99 1f       	adc	r25, r25
 2e6:	6a 95       	dec	r22
 2e8:	e2 f7       	brpl	.-8      	; 0x2e2 <DIO_Write_Pin+0x3e>
 2ea:	80 95       	com	r24
 2ec:	82 23       	and	r24, r18
 2ee:	8b bb       	out	0x1b, r24	; 27
 2f0:	08 95       	ret
		{
			//	Error Handling
		}
		break ;
		case PORT_B :
		if ( value == HIGH )
 2f2:	41 30       	cpi	r20, 0x01	; 1
 2f4:	59 f4       	brne	.+22     	; 0x30c <DIO_Write_Pin+0x68>
		{
			PORTB |= (1<<PinNumber) ;
 2f6:	28 b3       	in	r18, 0x18	; 24
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	02 c0       	rjmp	.+4      	; 0x302 <DIO_Write_Pin+0x5e>
 2fe:	88 0f       	add	r24, r24
 300:	99 1f       	adc	r25, r25
 302:	6a 95       	dec	r22
 304:	e2 f7       	brpl	.-8      	; 0x2fe <DIO_Write_Pin+0x5a>
 306:	82 2b       	or	r24, r18
 308:	88 bb       	out	0x18, r24	; 24
 30a:	08 95       	ret
		}
		else if ( value == LOW )
 30c:	41 11       	cpse	r20, r1
 30e:	41 c0       	rjmp	.+130    	; 0x392 <DIO_Write_Pin+0xee>
		{
			PORTB &= ~(1<<PinNumber) ;
 310:	28 b3       	in	r18, 0x18	; 24
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	02 c0       	rjmp	.+4      	; 0x31c <DIO_Write_Pin+0x78>
 318:	88 0f       	add	r24, r24
 31a:	99 1f       	adc	r25, r25
 31c:	6a 95       	dec	r22
 31e:	e2 f7       	brpl	.-8      	; 0x318 <DIO_Write_Pin+0x74>
 320:	80 95       	com	r24
 322:	82 23       	and	r24, r18
 324:	88 bb       	out	0x18, r24	; 24
 326:	08 95       	ret
		{
			//	Error Handling
		}
		break ;
		case PORT_C :
		if ( value == HIGH )
 328:	41 30       	cpi	r20, 0x01	; 1
 32a:	59 f4       	brne	.+22     	; 0x342 <DIO_Write_Pin+0x9e>
		{
			PORTC |= (1<<PinNumber) ;
 32c:	25 b3       	in	r18, 0x15	; 21
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	02 c0       	rjmp	.+4      	; 0x338 <DIO_Write_Pin+0x94>
 334:	88 0f       	add	r24, r24
 336:	99 1f       	adc	r25, r25
 338:	6a 95       	dec	r22
 33a:	e2 f7       	brpl	.-8      	; 0x334 <DIO_Write_Pin+0x90>
 33c:	82 2b       	or	r24, r18
 33e:	85 bb       	out	0x15, r24	; 21
 340:	08 95       	ret
		}
		else if ( value == LOW )
 342:	41 11       	cpse	r20, r1
 344:	26 c0       	rjmp	.+76     	; 0x392 <DIO_Write_Pin+0xee>
		{
			PORTC &= ~(1<<PinNumber) ;
 346:	25 b3       	in	r18, 0x15	; 21
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	02 c0       	rjmp	.+4      	; 0x352 <DIO_Write_Pin+0xae>
 34e:	88 0f       	add	r24, r24
 350:	99 1f       	adc	r25, r25
 352:	6a 95       	dec	r22
 354:	e2 f7       	brpl	.-8      	; 0x34e <DIO_Write_Pin+0xaa>
 356:	80 95       	com	r24
 358:	82 23       	and	r24, r18
 35a:	85 bb       	out	0x15, r24	; 21
 35c:	08 95       	ret
		{
			//	Error Handling
		}
		break ;
		case PORT_D :
		if ( value == HIGH )
 35e:	41 30       	cpi	r20, 0x01	; 1
 360:	59 f4       	brne	.+22     	; 0x378 <DIO_Write_Pin+0xd4>
		{
			PORTD |= (1<<PinNumber) ;
 362:	22 b3       	in	r18, 0x12	; 18
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	02 c0       	rjmp	.+4      	; 0x36e <DIO_Write_Pin+0xca>
 36a:	88 0f       	add	r24, r24
 36c:	99 1f       	adc	r25, r25
 36e:	6a 95       	dec	r22
 370:	e2 f7       	brpl	.-8      	; 0x36a <DIO_Write_Pin+0xc6>
 372:	82 2b       	or	r24, r18
 374:	82 bb       	out	0x12, r24	; 18
 376:	08 95       	ret
		}
		else if ( value == LOW )
 378:	41 11       	cpse	r20, r1
 37a:	0b c0       	rjmp	.+22     	; 0x392 <DIO_Write_Pin+0xee>
		{
			PORTD &= ~(1<<PinNumber) ;
 37c:	22 b3       	in	r18, 0x12	; 18
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	02 c0       	rjmp	.+4      	; 0x388 <DIO_Write_Pin+0xe4>
 384:	88 0f       	add	r24, r24
 386:	99 1f       	adc	r25, r25
 388:	6a 95       	dec	r22
 38a:	e2 f7       	brpl	.-8      	; 0x384 <DIO_Write_Pin+0xe0>
 38c:	80 95       	com	r24
 38e:	82 23       	and	r24, r18
 390:	82 bb       	out	0x12, r24	; 18
 392:	08 95       	ret

00000394 <__vector_1>:
			break;
	}
}
/*******************************ISR********************************/
ISR(INT0_vect)
{
 394:	1f 92       	push	r1
 396:	0f 92       	push	r0
 398:	0f b6       	in	r0, 0x3f	; 63
 39a:	0f 92       	push	r0
 39c:	11 24       	eor	r1, r1
 39e:	2f 93       	push	r18
 3a0:	3f 93       	push	r19
 3a2:	4f 93       	push	r20
 3a4:	5f 93       	push	r21
 3a6:	6f 93       	push	r22
 3a8:	7f 93       	push	r23
 3aa:	8f 93       	push	r24
 3ac:	9f 93       	push	r25
 3ae:	af 93       	push	r26
 3b0:	bf 93       	push	r27
 3b2:	ef 93       	push	r30
 3b4:	ff 93       	push	r31
	if (INT0_Fptr!=NULLPTR)
 3b6:	e0 91 75 00 	lds	r30, 0x0075	; 0x800075 <INT0_Fptr>
 3ba:	f0 91 76 00 	lds	r31, 0x0076	; 0x800076 <INT0_Fptr+0x1>
 3be:	30 97       	sbiw	r30, 0x00	; 0
 3c0:	09 f0       	breq	.+2      	; 0x3c4 <__vector_1+0x30>
	{
		INT0_Fptr();
 3c2:	09 95       	icall
	}
}
 3c4:	ff 91       	pop	r31
 3c6:	ef 91       	pop	r30
 3c8:	bf 91       	pop	r27
 3ca:	af 91       	pop	r26
 3cc:	9f 91       	pop	r25
 3ce:	8f 91       	pop	r24
 3d0:	7f 91       	pop	r23
 3d2:	6f 91       	pop	r22
 3d4:	5f 91       	pop	r21
 3d6:	4f 91       	pop	r20
 3d8:	3f 91       	pop	r19
 3da:	2f 91       	pop	r18
 3dc:	0f 90       	pop	r0
 3de:	0f be       	out	0x3f, r0	; 63
 3e0:	0f 90       	pop	r0
 3e2:	1f 90       	pop	r1
 3e4:	18 95       	reti

000003e6 <__vector_2>:
ISR(INT1_vect)
{
 3e6:	1f 92       	push	r1
 3e8:	0f 92       	push	r0
 3ea:	0f b6       	in	r0, 0x3f	; 63
 3ec:	0f 92       	push	r0
 3ee:	11 24       	eor	r1, r1
 3f0:	2f 93       	push	r18
 3f2:	3f 93       	push	r19
 3f4:	4f 93       	push	r20
 3f6:	5f 93       	push	r21
 3f8:	6f 93       	push	r22
 3fa:	7f 93       	push	r23
 3fc:	8f 93       	push	r24
 3fe:	9f 93       	push	r25
 400:	af 93       	push	r26
 402:	bf 93       	push	r27
 404:	ef 93       	push	r30
 406:	ff 93       	push	r31
	if (INT1_Fptr!=NULLPTR)
 408:	e0 91 73 00 	lds	r30, 0x0073	; 0x800073 <INT1_Fptr>
 40c:	f0 91 74 00 	lds	r31, 0x0074	; 0x800074 <INT1_Fptr+0x1>
 410:	30 97       	sbiw	r30, 0x00	; 0
 412:	09 f0       	breq	.+2      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
	{
		INT1_Fptr();
 414:	09 95       	icall
	}
}
 416:	ff 91       	pop	r31
 418:	ef 91       	pop	r30
 41a:	bf 91       	pop	r27
 41c:	af 91       	pop	r26
 41e:	9f 91       	pop	r25
 420:	8f 91       	pop	r24
 422:	7f 91       	pop	r23
 424:	6f 91       	pop	r22
 426:	5f 91       	pop	r21
 428:	4f 91       	pop	r20
 42a:	3f 91       	pop	r19
 42c:	2f 91       	pop	r18
 42e:	0f 90       	pop	r0
 430:	0f be       	out	0x3f, r0	; 63
 432:	0f 90       	pop	r0
 434:	1f 90       	pop	r1
 436:	18 95       	reti

00000438 <__vector_3>:
ISR(INT2_vect)
{
 438:	1f 92       	push	r1
 43a:	0f 92       	push	r0
 43c:	0f b6       	in	r0, 0x3f	; 63
 43e:	0f 92       	push	r0
 440:	11 24       	eor	r1, r1
 442:	2f 93       	push	r18
 444:	3f 93       	push	r19
 446:	4f 93       	push	r20
 448:	5f 93       	push	r21
 44a:	6f 93       	push	r22
 44c:	7f 93       	push	r23
 44e:	8f 93       	push	r24
 450:	9f 93       	push	r25
 452:	af 93       	push	r26
 454:	bf 93       	push	r27
 456:	ef 93       	push	r30
 458:	ff 93       	push	r31
	if (INT2_Fptr!=NULLPTR)
 45a:	e0 91 71 00 	lds	r30, 0x0071	; 0x800071 <INT2_Fptr>
 45e:	f0 91 72 00 	lds	r31, 0x0072	; 0x800072 <INT2_Fptr+0x1>
 462:	30 97       	sbiw	r30, 0x00	; 0
 464:	09 f0       	breq	.+2      	; 0x468 <__vector_3+0x30>
	{
		INT2_Fptr();
 466:	09 95       	icall
	}
 468:	ff 91       	pop	r31
 46a:	ef 91       	pop	r30
 46c:	bf 91       	pop	r27
 46e:	af 91       	pop	r26
 470:	9f 91       	pop	r25
 472:	8f 91       	pop	r24
 474:	7f 91       	pop	r23
 476:	6f 91       	pop	r22
 478:	5f 91       	pop	r21
 47a:	4f 91       	pop	r20
 47c:	3f 91       	pop	r19
 47e:	2f 91       	pop	r18
 480:	0f 90       	pop	r0
 482:	0f be       	out	0x3f, r0	; 63
 484:	0f 90       	pop	r0
 486:	1f 90       	pop	r1
 488:	18 95       	reti

0000048a <_exit>:
 48a:	f8 94       	cli

0000048c <__stop_program>:
 48c:	ff cf       	rjmp	.-2      	; 0x48c <__stop_program>
